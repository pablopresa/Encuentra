package PpGg;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import org.apache.commons.lang.builder.HashCodeBuilder;

import beans.encuentra.ArticuloRepoFromLoad;
import beans.encuentra.ArticuloReposicion;
import beans.encuentra.DepositoMayorista;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import clienteLaIsla.SincroLaIsla;
import dataTypes.DTO_Articulo;
import dataTypes.DataDescDescripcion;
import dataTypes.DataIDDescripcion;
import dataTypes.DataIDDescripcionList;
import dataTypes.StockDeposito;
import logica.LogicaAPI;

public class ClientePPG
{
 public static void main(String[] args) 
 {
	 	
	 
	 	
	 	ClientePPG cli = new ClientePPG();
	 	int idEmpresa = 5;
	 	
	 	
	 	List<DataIDDescripcionList> listaFamiliasSubFamilias = cli.darFamilias();
	 	
	 	List<DataIDDescripcion> listaFamilias = new ArrayList<DataIDDescripcion>();
	 	List<DataIDDescripcion> listaSubFamilias = new ArrayList<DataIDDescripcion>();
	 	
	 	for (DataIDDescripcionList ddl : listaFamiliasSubFamilias) 
	 	{
	 		listaFamilias.add(new DataIDDescripcion(ddl.getId(), ddl.getDescripcion()));
	 		for (DataIDDescripcion dd : ddl.getLista()) 
	 		{
				listaSubFamilias.add(dd);
			}
		}
	 	
	 	String[] nombresMetodos = {"categorias","marcas","temporadas","generos","productos"};
	 	
		
		Call_WS_APIENCUENTRA cwa = new Call_WS_APIENCUENTRA();
		LogicaAPI logica = new LogicaAPI();
		List<DataIDDescripcion> datos = null;
		List<DTO_Articulo> datosArt = null;
		
		String token = logica.darToken(5,5000);
		for (String tabla : nombresMetodos) {
			switch (tabla) {
				case "categorias"://familias
					
					cwa.putMaestros(token, listaFamilias, "art_categoria");
					break;

				case "marcas":
					datos = cli.darMarcas();
					cwa.putMaestros(token, datos, "art_marca");
					break;

				
				case "temporadas"://zafras
					datos = cli.darCategorias();
					cwa.putMaestros(token, datos, "art_temporadas");
					break;

				case "generos"://subfamilias
					
					cwa.putMaestros(token, listaSubFamilias, "art_genero");
					break;
			
				case "productos":
					try {
						 
						datosArt = cli.darArticulos();
						cwa.putArticulos(token, datosArt);
						List<StockDeposito> stock = new ArrayList<StockDeposito>();
						for (DTO_Articulo a : datosArt) 
						{
							StockDeposito s = new StockDeposito("5",a.getIdArticulo(),a.getStock());
							stock.add(s);
						}
						
						cwa.putStk(token, stock);
						
					} catch (Exception e) {}
					break;
			}
		}
	 	
	 	
	 	
	 	
	 	DataDeposOrdenes depositos_ordenes = cli.darOrdenes();
	 	cwa.putDeposM(token, depositos_ordenes.getDepositos());
	 	
	 	
	 	
	 	Hashtable<Integer, String> parametrosE =cwa.darParametros(token);
	 	int depositoCentral = Integer.parseInt(parametrosE.get(4));
	 	
	 	Hashtable<Integer, ArticuloRepoFromLoad> pickingDestinos = new Hashtable<Integer, ArticuloRepoFromLoad>();
	 	Hashtable<Integer, Integer> depositos = new Hashtable<Integer, Integer>();
	 	
	 	for (ArticuloReposicion a : depositos_ordenes.getArticulos()) 
	 	{
			
	 		depositos.put(a.getDestino(),a.getDestino());
	 		DataIDDescripcion d = new  DataIDDescripcion();
	 		//
	 		//idArticulo,cantidad,pedido,solicitud,idEmpresa,NotaArticulo) VALUES 
	 		//('"+ar.getDescripcion()+"',"+ar.getId()+","+ar.getIdLong()+","+ar.getIdB()+","+idE+",'"+ar.getDescripcionB()+"')
	 		
	 		d.setDescripcion(a.getArticulo());
	 		d.setId(a.getVenta());
	 		d.setIdLong(a.getSeccion());
	 		d.setIdB(a.getSolicitud());
	 		d.setDescripcionB("");
	 		
	 		if(pickingDestinos.get(a.getSucursal())==null)
			{
				List<DataIDDescripcion> articulosCantidad = new ArrayList<DataIDDescripcion>();
				articulosCantidad.add(d);
				ArticuloRepoFromLoad ar = new ArticuloRepoFromLoad(a.getSucursal(), true, 5, depositoCentral, 3, articulosCantidad);
				
				pickingDestinos.put(a.getSucursal(),ar);
			}
	 		else
	 		{
	 			ArticuloRepoFromLoad ar = pickingDestinos.get(a.getSucursal());
	 			ar.getArticulosCantidad().add(d);
				pickingDestinos.put(a.getSucursal(),ar);
	 		}
			
		}
	 	
	 	List<ArticuloRepoFromLoad> lista = new ArrayList<ArticuloRepoFromLoad>(pickingDestinos.values());
	 	
	 	cwa.savePickingOrder(token,lista);
	 	
	 
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	
 }

 
 
 	public String accionOrden(int idPedido, String serie, String accion, short cantBultos,String tipoDoc) 
	{
			 	
		AccionesEncuentra  serviceC = new AccionesEncuentra();
		AccionesEncuentraSoapPort portC = serviceC.getAccionesEncuentraSoapPort();
		AccionesEncuentraExecute careC = new AccionesEncuentraExecute();
		SDTAccionEncuentra accE = new SDTAccionEncuentra();
		accE.setSerie(serie);
		accE.setNro(0);
		accE.setAccion(accion);
		accE.setCantidadBultos(cantBultos);
		accE.setTipoDeDocumento(tipoDoc);
		
		careC.setConssdtaccionencuentra(accE);
		
		
		AccionesEncuentraExecuteResponse respC =  portC.execute(careC);
		
		String msj = respC.getConssdtaccionencuentra().getRespuestaMsg();
		 
			 	
		return msj;
			 	
	}
 

 	public String confirmarOrden(int idPedido, String serie, String tipoDoc, List<DataIDDescripcion> lista) 
	{
		
			 	
		CargaPreparacionPedidoEncuentra  serviceC = new CargaPreparacionPedidoEncuentra();
		CargaPreparacionPedidoEncuentraSoapPort portC = serviceC.getCargaPreparacionPedidoEncuentraSoapPort();
		CargaPreparacionPedidoEncuentraExecute careC = new CargaPreparacionPedidoEncuentraExecute();
		SDTCabezalPreparacionPedidoEncuentra accE = new SDTCabezalPreparacionPedidoEncuentra();
		accE.setSerie(serie);
		accE.setNro(0);
		accE.setTipoDeDocumento(tipoDoc);
		
		ArrayOfSDTRenglonesPreparacionPedidoEncuentraSDTRenglonPreparacionPedidoEncuentra arreglo = new ArrayOfSDTRenglonesPreparacionPedidoEncuentraSDTRenglonPreparacionPedidoEncuentra();
		
		
		for (DataIDDescripcion di : lista) 
		{
			SDTRenglonesPreparacionPedidoEncuentraSDTRenglonPreparacionPedidoEncuentra r = new SDTRenglonesPreparacionPedidoEncuentraSDTRenglonPreparacionPedidoEncuentra();
			
			
			r.setId((short)di.getId());
			r.setCantidad(Double.parseDouble(di.getIdB()+""));
			
			arreglo.sdtRenglonesPreparacionPedidoEncuentraSDTRenglonPreparacionPedidoEncuentra.add(r);
		}
		
		
		careC.setConssdtcabezalpreparacionpedidoencuentra(accE);
		careC.setConssdtrenglonespreparacionpedidoencuentra(arreglo);
		
		
		
		
		CargaPreparacionPedidoEncuentraExecuteResponse respC =  portC.execute(careC);
		
		String msj = respC.getConssdtcabezalpreparacionpedidoencuentra().getRespuestaMsg();
		 
			 
		 
			 	
			 	
		return msj;
			 	
	}
 
 
 	private DataDeposOrdenes darOrdenes() 
 	{
 		
 				
 			 
 		DataDeposOrdenes retorno = new DataDeposOrdenes();
 		List<ArticuloReposicion> articulos = new ArrayList<ArticuloReposicion>();
 		
 		Hashtable<String, DepositoMayorista> depositos = new Hashtable<String, DepositoMayorista>();
 		
 			 	
 		CargaListaPedidosEncuentra  serviceC = new CargaListaPedidosEncuentra();
 		CargaListaPedidosEncuentraSoapPort portC = serviceC.getCargaListaPedidosEncuentraSoapPort();
 		CargaListaPedidosEncuentraExecute careC = new CargaListaPedidosEncuentraExecute();
 		CargaListaPedidosEncuentraExecuteResponse respC =  portC.execute(careC);
 		 
 			 
 		 
 		for (SDTPedidosEncuentraListaSDTPedidosEncuentraListaItem aConsulta : respC.getSdtpedidos().getSDTPedidosEncuentraListaSDTPedidosEncuentraListaItem()) 
 		{
 			CargaPedidoEncuentra  serviceCA = new CargaPedidoEncuentra();
			CargaPedidoEncuentraSoapPort portCA = serviceCA.getCargaPedidoEncuentraSoapPort();
			CargaPedidoEncuentraExecute careCA = new CargaPedidoEncuentraExecute();
			SDTPedidoEncuentra cab = new SDTPedidoEncuentra();
			 	
			cab.setNro(aConsulta.getNro());
			cab.setSerie(aConsulta.getSerie());
			cab.setTipoDeDocumento(aConsulta.getTipoDeDocumento());
			cab.setRespuestaOk("");
			 	
			careCA.setSdtpedidocabezal(cab);
			 	
			 	
			CargaPedidoEncuentraExecuteResponse respCA = portCA.execute(careCA);
			
			 
			
			 int idDepositoDestino = new HashCodeBuilder(1, 1).
		       append(respCA.getSdtpedidocabezal().getClienteNombre()).
		        toHashCode();
			if(idDepositoDestino<0)
			{
				idDepositoDestino=idDepositoDestino*-1;
			}
			
			String nombreDepoDestino = respCA.getSdtpedidocabezal().getClienteNombre();
			
			DepositoMayorista dp = new DepositoMayorista(idDepositoDestino+"", nombreDepoDestino.replaceAll(";", ""), respCA.getSdtpedidocabezal().getDireccion(), "100");
			
			
			
			depositos.put(idDepositoDestino+"",dp);
			
			 	
			 	
			 	System.out.println("Pedido "+respCA.getSdtpedidocabezal().getNro()); 
			 	System.out.println("Lineas ");
			 	for (SDTPedidoEncuentraRenglonesSDTPedidoEncuentraRenglon l : respCA.getSdtpedidoencuentrarenglones().getSDTPedidoEncuentraRenglonesSDTPedidoEncuentraRenglon()) 
			 	
			 	{
			 		
			 		Double d = l.getCantidad();
			 		int cantidad = d.intValue();
			 		ArticuloReposicion ar = new ArticuloReposicion(l.getArtId(), l.getArtId(), l.getArtId(), 0, Long.parseLong(respCA.getSdtpedidocabezal().getNro()+""), 0, cantidad, 0, 0, 0, 0, idDepositoDestino, 0, 0, 0, 3);
			 		ar.setSolicitud(respCA.getSdtpedidocabezal().getNro());
			 		ar.setIdLineaSAP(l.getId());
			 		
			 		articulos.add(ar);
			 		
				}
 		}
 			 	
 		
 		retorno.setArticulos(articulos);
 		retorno.setDepositos(new ArrayList<DepositoMayorista>(depositos.values()));
 			 	
 			 	
 		return retorno;
 			 	
 	}


	public ClientePPG() {}
 	
	public List<DTO_Articulo> darArticulos() 
	{
		
		List<DTO_Articulo> retorno = new ArrayList<DTO_Articulo>();
		
		CargaArticulosPPyK serviceA = new CargaArticulosPPyK();
		
		CargaArticulosPPyKSoapPort portA = serviceA.getCargaArticulosPPyKSoapPort();
		
		CargaArticulosPPyKExecute careA = new CargaArticulosPPyKExecute();
		SDTArticulosWebxGrupo sdta;
	 	
	 	
	 	boolean hayMas = true;
	 	short pagina = 1;
	 	int cantidadporPagina = 300;
	 	
	 	while (hayMas) 
		{
	 		sdta = new SDTArticulosWebxGrupo();
	 		sdta.setCantidad(cantidadporPagina);
	 		sdta.setParte(pagina);
	 		sdta.setConsumidor("Encuentra");
	 		sdta.setEmpresa("P");
	 		
	 		
	 		careA.setSdtarticuloswebxgrupo(sdta);
	 		CargaArticulosPPyKExecuteResponse  respA = portA.execute(careA);
	 		
	 		int largo = 0;
	 		
	 		
	 		for (SDTArticulosWebxGrupoArticulo a : respA.getSdtarticuloswebxgrupo().getArticulos().getArticulo()) 
		 	{
			
	 			try
	 			{	
	 				System.out.println(a.getArtId()+" - "+a.getArtDescripCatalogo());
	 				
	 				
	 				
	 				String idArticulo = a.getArtId();
	 				String descripcion = a.getArtDescripCatalogo();
	 				String talle = a.getTalle();
	 				String codProveedor = a.getArtCodPro();
	 				if(codProveedor==null || codProveedor.equals(""));
	 				{
	 					codProveedor="0";
	 				}
	 				int marca = a.getMarcaId();
	 				int familia =  a.getFamiliaId();
	 				int idCategoria =0;
	 				
	 				if(a.getSdtCategorias()!=null)
	 				{
	 					idCategoria = a.getSdtCategorias().getSdtCategoriasSdtCategoria().get(0).getCategoriaId();
	 				}
	 				
					DTO_Articulo ar = new DTO_Articulo(idArticulo, descripcion,talle ,"", "", "",codProveedor , marca+"",familia+"", idCategoria+"");
					
					ar.setIdGenero((a.getSubFamiliaId()+""));
					ar.setIdTemporada("0");
					ar.setStock(a.getStockActual());
					ar.setCodigoBarras(a.getArtCodBar());
					
					
					retorno.add(ar);
	 				
	 			}
	 			catch (Exception e) 
	 			{
					e.printStackTrace();
				}
	 			
				largo++;
			}
	 		if(largo==0)
	 		{
	 			hayMas=false;
	 		}
	 		pagina ++;
	 		
	 		
		}
	
		return retorno;
	}

	public List<DataIDDescripcion> darCategorias() 
	{
		List<DataIDDescripcion> retorno = new ArrayList<DataIDDescripcion>();
		CargaZafras serviceZ = new CargaZafras();
		
	 	CargaZafrasSoapPort portZ = serviceZ.getCargaZafrasSoapPort();
		
	 	CargaZafrasExecute careZ = new CargaZafrasExecute();
	 	careZ.setSdtcategorias(new ArrayOfSdtCategoriasSdtCategoria());
	 	
	 	CargaZafrasExecuteResponse respZ =  portZ.execute(careZ);
	 	
	 	
	 	for (SdtCategoriasSdtCategoria m : respZ.getSdtcategorias().getSdtCategoriasSdtCategoria()) 
	 	{
			System.out.println(m.getCategoriaId()+" - "+ m.getCategoriaDescrip());
			retorno.add(new DataIDDescripcion(m.getCategoriaId(),m.getCategoriaDescrip()));
		}
	 	
	 	return retorno;
	}

	public List<DataIDDescripcionList> darFamilias() 
	{
		
		List<DataIDDescripcionList> retorno = new ArrayList<DataIDDescripcionList>();
		
		
		CargaFamilias serviceFam = new CargaFamilias();
		
	 	CargaFamiliasSoapPort portFam = serviceFam.getCargaFamiliasSoapPort();
		
	 	CargaFamiliasExecute carexF = new CargaFamiliasExecute();
	 	carexF.setSdtlineassubflias(new ArrayOfSdtLineasSubFliasSdtLineaSubFlias());
	 	
	 	CargaFamiliasExecuteResponse respF =  portFam.execute(carexF);
	 	
	 	
	 	for (SdtLineasSubFliasSdtLineaSubFlias m : respF.getSdtlineassubflias().getSdtLineasSubFliasSdtLineaSubFlias()) 
	 	{
			System.out.println(m.getLinId()+" - "+ m.getLinDsc());
			
			DataIDDescripcionList familia = new DataIDDescripcionList(m.getLinId(), m.getLinDsc());
			List<DataIDDescripcion> subF = new ArrayList<DataIDDescripcion>();
			
			for (SdtSubFliasSdtSubFlia mi : m.getSdtSubFlias().getSdtSubFliasSdtSubFlia()) 
			{
				System.out.println("\t "+mi.getSubFliaId()+" - "+ mi.getSubFliaDsc());
				subF.add(new DataIDDescripcion(mi.getSubFliaId(), mi.getSubFliaDsc()));
				
			}
			
			familia.setLista(subF);
			retorno.add(familia);
		}
	 	
	 	return retorno;
	
	}

	public List<DataIDDescripcion> darMarcas() 
	{
		CargaMarcas service = new CargaMarcas();
		
		List<DataIDDescripcion> retorno = new ArrayList<DataIDDescripcion>();
		
	 	CargaMarcasSoapPort port = service.getCargaMarcasSoapPort();
		
	 	CargaMarcasExecute carex = new CargaMarcasExecute();
	 	carex.setSdtmarcas(new ArrayOfSdtMarcasSdtMarca());
	 	
	 	CargaMarcasExecuteResponse resp =  port.execute(carex);
	 	
	 	
	 	for (SdtMarcasSdtMarca m : resp.getSdtmarcas().getSdtMarcasSdtMarca()) 
	 	{
			System.out.println(m.getMarcaId()+" - "+ m.getMarcaDescrip());
			retorno.add(new DataIDDescripcion(m.getMarcaId(), m.getMarcaDescrip()));
		}
		return retorno;
	}
}
