package clienteLaIsla;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import beans.Usuario;
import beans.api.MovStock;
import beans.api.pedidoFactura;
import beans.encuentra.Cliente;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import clienteVisualObject.OrdenVenta;
import dataTypes.DataIDDescripcion;
import json_objects.SendMail;
import json_objects.SendMailSpooler;
import logica.LogicaAPI;
import persistencia._EncuentraConexionAPI2;

public class LaIsla {
	static LogicaAPI lo = new LogicaAPI();
	static String token = lo.darToken(6,6000);
	static Usuario u = LogicaAPI.loginEncuentraAPI2(token);
	static int idEmpresa = u.getIdEmpresa();
	static ClienteOdoo_LaIsla coli = new ClienteOdoo_LaIsla();
	static String msj, idMail;

	public static void main(String[] args) {
				
		while (true) {
			msj = "";
			idMail = "";
			
			try {
				putMovimientosStocksATransito(idEmpresa);
			} catch (Exception e) {System.out.println("Error grabando movimientos de stock");}
			try {
				putMovimientosStocksAEncuentra(idEmpresa);
				
			}catch (Exception e) {System.out.println("Error transfiriendo albaranes a encuentra");}
			try {
				Hashtable<Integer,pedidoFactura> pedidos = putFacturacion(idEmpresa);
				BuscarFacturas(pedidos, token);
			} catch (Exception e) {System.out.println("Error grabando facturas");}

			try {
				if(!msj.equals("")) {
					//MailErrores(idMail, msj);
				}				
			} catch (Exception e) {System.out.println("Error enviando mail de errores");}
			
			try {
				Thread.sleep(60000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public static void putMovimientosStocksATransito(int idEmpresa)
	{//verEstadoAlbaranesFiltrados(int filtro, ArrayList<Integer> ids)
		try {
			List<MovStock> movs = lo.queuePendingMovsStock(idEmpresa,0);
			
			for(MovStock mov:movs) {
				//try {
					int idAlbaran = 0;
					if(mov.getDoc() == 0) {
						List<ArticuloCantidadEncuentra> arts = new ArrayList<ArticuloCantidadEncuentra>();
						for(DataIDDescripcion det : mov.getDetalle()) {
							Cliente cli = new Cliente();
							String consulta = "SELECT clicedula FROM ecommerce_import_venta eiv WHERE eiv.idVenta = "+mov.getOrigenDoc()+" AND eiv.IdEmpresa = "+idEmpresa+";";
						
							String ci = _EncuentraConexionAPI2.obtenerCIPedido(consulta, idEmpresa);
							cli.setDocumentoNro(ci);
							ArticuloCantidadEncuentra ace = new ArticuloCantidadEncuentra(det.getId(), mov.getOrigen(), det.getDescripcion(), cli);
							arts.add(ace);
						}
						PedidoAlbaran pa = new PedidoAlbaran(arts, mov.getDestino());
						List<Integer> idsAlbaranes = coli.crearAlbaranInterno(pa);
						if(idsAlbaranes.size() == 0) {
							lo.RegistrarDocMovimientoStock(0,  mov.getId(), mov.getDoc(), "Fallo al generar albaran", idEmpresa,0, mov.getIntentos()+1);
							//notificacion de errores
							msj += "Fallo al generar albaran, id movimiento: "+ mov.getId() + " \r\n";
							idMail = mov.getOrigenDoc()+"";
						} else {
							idAlbaran = idsAlbaranes.get(0);
						}
					} else {
						idAlbaran = mov.getDoc();
					}
					//comprobar lo de la entrega = 1
					if(idAlbaran > 0) {
						EstadoAlbaranes estadoConfirmado = coli.verEstadoAlbaranesFiltrados(2, idAlbaran);
						if(estadoConfirmado != null) {
							//guardar como confirmado
							lo.RegistrarDocMovimientoStock(0,  mov.getId(), idAlbaran, "Listo para transferir",
									idEmpresa,0,mov.getIntentos());
							//transferir a transito
							int idNuevo = coli.transferir_aTransito_nuevo(idAlbaran);
							EstadoAlbaranes estado = coli.verEstadoAlbaranesFiltrados(3, idAlbaran);
							if(estado == null && idNuevo <=0) {
								lo.RegistrarDocMovimientoStock(0,  mov.getId(), idAlbaran, "Fallo al intentar transferir a transito", idEmpresa,0, mov.getIntentos()+1);
								//notificacion de errores
								msj += "Fallo al intentar transferir a transito, id movimiento: "+ mov.getId() + ", id del albaran: " + idAlbaran + " \r\n";
								idMail = mov.getOrigenDoc()+"";
							} else {
								lo.RegistrarDocMovimientoStock(1,  mov.getId(), idNuevo, "OK",
										idEmpresa,0,mov.getIntentos()+1);
								//insertar en la otra tabla con estado 0 si entrega es = 1
								if(mov.isEntrega()) {
									lo.RegistrarConfirmacionTransferencia(mov.getOrigen(), mov.getDestino(), mov.getIdUsuario(), mov.getDetalle(), idEmpresa, mov.getOrigenDoc(), 
											mov.getDocSolicitud(), mov.getRazon(), idAlbaran);
								}
								mov.setEstado(1);
							}
						} else {
							EstadoAlbaranes estadoSinConfirmar = coli.verEstadoAlbaranesFiltrados(1, idAlbaran);
							if(estadoSinConfirmar != null) {
								lo.RegistrarDocMovimientoStock(0,  mov.getId(), idAlbaran, "No se pudieron reservar los articulos",
										idEmpresa,0,mov.getIntentos()+1);
							}
						}
					}	
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
	}
	
	public static void putMovimientosStocksAEncuentra(int idEmpresa) 
	{
		List<MovStock> movs = lo.queueConfirmacionTransferencia(idEmpresa); 
		try {
			for(MovStock mov:movs) {
				int idAlbaran = mov.getDoc();
				int idAlbaranTransferido = coli.recibirAlbaran(idAlbaran);
				EstadoAlbaranes estadoREC = coli.verEstadoAlbaranesFiltrados(3, idAlbaranTransferido);
				if(estadoREC == null) {
					lo.RegistrarEstadoConfirmacionTransferencia(false, mov.getId(), "Fallo al intentar transferir a Encuentra", idEmpresa, 0, mov.getIntentos()+1);
					msj += "Fallo al intentar transferir a encuentra, id movimiento: "+ mov.getId() + ", id del albaran: " + idAlbaran + " \r\n";
					idMail = mov.getOrigenDoc()+"";
				} else {
					lo.RegistrarEstadoConfirmacionTransferencia(true, mov.getId(), "OK", idEmpresa, 0, mov.getIntentos()+1);
					System.out.println("Se hizo la transeferencia a Encuentra");
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private static Hashtable<Integer,pedidoFactura> putFacturacion(int idEmpresa) {
		Hashtable<Integer,pedidoFactura> pedidos = new Hashtable<Integer, pedidoFactura>();
		List<OrdenVenta> ordenes = lo.darOrdensSinFacturar(idEmpresa);
		List<pedidoFactura> facturas = new ArrayList<pedidoFactura>();
		DataIDDescripcion respLaIsla;
		for(OrdenVenta o:ordenes) {
			try {
				Cliente c= lo.darCliente(o.getIdCarrito(), idEmpresa);
				int idSession = Integer.parseInt(_EncuentraConexionAPI2.dartokenApi("SELECT token from apitoken_cliente where idCliente = 99 and idEmpresa = 6;")); // GUARDAR EN BD

				//mapear forma de pago fenicio-isla y setearsela
				int pagoIsla = _EncuentraConexionAPI2.darMapeoFormaPagoIsla(Integer.parseInt(o.getFormaPago()), idEmpresa);
				o.setFormaPago(pagoIsla+"");
				
				respLaIsla = coli.facturarPedido(o, idSession);
				
				
				lo.RegistrarFactura(o.getIdCarrito(), respLaIsla.getId(), idEmpresa,respLaIsla.getDescripcion());
				
				if(respLaIsla.getId()!=0) {
					lo.SincronizarCliente(c.getDocumentoNro(), idEmpresa);
					pedidoFactura pf = new pedidoFactura(o.getIdCarrito(), respLaIsla.getId());
					facturas.add(pf);
					pedidos.put(respLaIsla.getId(), pf);
				}
				else {
					/*
					if(respLaIsla.getDescripcion().contains("Cliente")){
						c = lo.darClienteProducteca(o.getIdCarrito());
						if(c != null) {
							lo.saveImport1Customer(c, idEmpresa);
						}
						
					}*/  //NO SE QUE TENDRIA QUE HACER ACA
					
					//notificacion de errores
					msj += respLaIsla.getDescripcion()+" \r\n"; //YO LE CARGO EL TICKET STR
					idMail = o.getIdCarrito()+"";
				}
				
				if(facturas.size() > 0) {
					Call_WS_APIENCUENTRA cwa = new Call_WS_APIENCUENTRA();
					cwa.putFacturas(token, facturas);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}			
		}
		
		return pedidos;
	}
	
	public static void BuscarFacturas(Hashtable<Integer,pedidoFactura> pedidos, String token) {
		
		//miro si hay facturas sin pdf
		//pedidos = lo.pedidosSinFactura(pedidos);
		
		//voy a buscar las facturas a visual
		//pedidos = lo.facturasVisual(pedidos);
		
		//persisto pdfs en bd
		List<pedidoFactura> listaPedidos= new ArrayList<pedidoFactura>(pedidos.values());
		//lo.guardarFacturas(listaPedidos);
		
		//envio facturas a WMS
		//api.putFacturas(token, listaPedidos);
	}

	public static void MailErrores(String idMail,String msj) {
		String bodyName = msj;
		SendMail mail = new SendMail("SMREY"+idMail, "mguerra@200.com.uy,onviera@200.com.uy,gmonzon@200.com.uy,andres@200.com.uy", "Error en sincro de pedidos - EL REY", bodyName, "encuentra@200.com.uy");
		SendMailSpooler mails = new SendMailSpooler();
		mails.setMails(new SendMail[]{mail});
		
		//LogicaAPI.PutMailSpooler(mails.getMails(), 4);
	}
}
