

package beans.api;





import com.google.gson.Gson;
import com.itextpdf.text.*;
import com.itextpdf.text.TabStop.Alignment;
import com.itextpdf.text.pdf.*;

import beans.datatypes.DataIDDescripcion;
import beans.encuentra.EncuentraPedido;
import beans.encuentra.EncuentraPedidoArticulo;
import beans.helper.PropertiesHelper;
import beans.helper.PropertiesHelperAPI;
import logica.LogicaAPI;

import java.awt.Graphics2D;
import java.io.*;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.util.*;
import java.util.List;




// Referenced classes of package logica:
//            LeerFicheroTexto

public class ImpresionesPDF_API
{
	private int idEmpresa;

	public ImpresionesPDF_API(int idEmpresa)
    {
		this.idEmpresa = idEmpresa;
    }
	
	

	
	public int getIdEmpresa() {
		return idEmpresa;
	}





	public void imprimirTicketMovStock(int origen, int destino, int idUsuario, String comentario,List<DataIDDescripcion> detalle, int idDoc, int destinoImpresion) 
	{

		String path = "";
        String pathHttp = "";
        
        int aNumber = (int)((Math.random() * 9000000)+1000000);
        
        try
        {
        	String ruta ="";
        	String rutaHttp ="";
        	
    		PropertiesHelperAPI pH=new PropertiesHelperAPI("paths");
    		try
    		{
    			pH.loadProperties();
    			ruta = pH.getValue("pdf");
    			rutaHttp = pH.getValue("HTTP_pdf");
    		}
    		catch (Exception e) 
    		{
				
			}
    		
    		pathHttp = rutaHttp+"/"+aNumber+".pdf";
           
            path = (new StringBuilder(String.valueOf(ruta))).append("/"+aNumber+".pdf").toString();
            FileOutputStream archivo = new FileOutputStream(path);
            Rectangle pageSize = new Rectangle(230F, 450F);
            Rectangle codeSize = new Rectangle(108F, 72F);
            Document documento = new Document(pageSize);
            Font fontSmall = FontFactory.getFont("Arial", 10F, Font.BOLD);
            Font font = FontFactory.getFont("Arial", 16F, 1);
            Font fontCod = FontFactory.getFont("Arial", 20F, 1);
            Font fontPedido = FontFactory.getFont("Arial", 33F,1);
            fontPedido.setStyle("bold");
            
            PdfWriter writer = PdfWriter.getInstance(documento, archivo);
            documento.open();
            documento.setMargins(5F, 5F, 0.0F, 0.0F);
            com.itextpdf.text.pdf.PdfContentByte cb = writer.getDirectContent();
            documento.newPage();
            
                
                PdfPTable table = new PdfPTable(2);
                table.setTotalWidth(220F);
                table.setLockedWidth(true);
                table.setWidths(new float[] {
                    5F, 3F
                });
                
                
                Phrase frase = new Phrase("Notificacion Encuentra");
                frase.setFont(font);
                PdfPCell cell = new PdfPCell(frase);
                
                                           
                PdfPCell cellcell = new PdfPCell(new Paragraph("MOV STOCK ", fontPedido) );
                cellcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cellcell.setColspan(2);
                table.addCell(cellcell);
                
                frase = new Phrase("Documento: "+idDoc+"");
                frase.setFont(fontCod);
                cell = new PdfPCell(frase);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(2);
                
                table.addCell(cell);
                
                cell = new PdfPCell(new Phrase("Usuario: "+idUsuario+""));
                cell.setColspan(2);
                table.addCell(cell);
                
                cell = new PdfPCell(new Phrase("Origen: "+origen+""));
                cell.setColspan(2);
                table.addCell(cell);
                
                cell = new PdfPCell(new Phrase("Destino: "+destino+""));
                cell.setColspan(2);
                table.addCell(cell);
                
                cell = new PdfPCell(new Phrase("Comentario: "+comentario+""));
                cell.setColspan(2);
                table.addCell(cell);
                
                
                frase = new Phrase("Detalle del movimiento");
                frase.setFont(font);
                cell = new PdfPCell(frase);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(2);
                table.addCell(cell);
                
                
                frase = new Phrase("Articulo");
                frase.setFont(font);
                cell = new PdfPCell(frase);
                table.addCell(cell);
                
                frase = new Phrase("Cantidad");
                frase.setFont(font);
                cell = new PdfPCell(frase);
                table.addCell(cell);
                
                int cant = 0;
                
                for (DataIDDescripcion ar : detalle) 
                { 
                	frase = new Phrase(ar.getDescripcion());
	                frase.setFont(font);
	                cell = new PdfPCell(frase);
	                table.addCell(cell);
	                
	                frase = new Phrase(ar.getId()+ "");
	                frase.setFont(font);
	                cell = new PdfPCell(frase);
	                table.addCell(cell);
	                
	                frase = new Phrase(ar.getDescripcionC() );
	                frase.setFont(fontSmall);
	                cell = new PdfPCell(frase);
	                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	                cell.setColspan(3);
	                table.addCell(cell);
	                
	                cant += ar.getId();
				}
                
                frase = new Phrase("Unidades totales: "+cant);
                frase.setFont(font);
                cell = new PdfPCell(frase);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setColspan(2);
                table.addCell(cell);
                
                
                documento.add(table);
            

            documento.close();
            
            beans.api.json.PrintObject p = new beans.api.json.PrintObject();
			p.setId(aNumber+"");
			p.setUrl(pathHttp);
			p.setPorait(0+"");
			p.setPrinterId(destinoImpresion+"");
			
			Gson gson = new Gson();
			String json = gson.toJson(p);
            
			LogicaAPI.PutPrintSpooler(p,this.getIdEmpresa());
        }
        catch(DocumentException e)
        {
            e.printStackTrace();
        }
        catch(FileNotFoundException e)
        {
            e.printStackTrace();
        }
        
	}
        
	public void ImprimirPedidosArticuloReq(List pedidos,int destinoImpresion) throws FileNotFoundException, DocumentException
	{
		String path = "";
		String pathHttp = "";

		int aNumber = (int)((Math.random() * 9000000)+1000000);

		try
		{

			String ruta ="";
			String rutaHttp ="";

			PropertiesHelperAPI pH=new PropertiesHelperAPI("paths");
			try
			{
				pH.loadProperties();
				ruta = pH.getValue("pdf");
				rutaHttp = pH.getValue("HTTP_pdf");
			}
			catch (Exception e) 
			{

			}

			pathHttp = rutaHttp+"/"+aNumber+".pdf";

			path = (new StringBuilder(String.valueOf(ruta))).append("/"+aNumber+".pdf").toString();
			FileOutputStream archivo = new FileOutputStream(path);
			Rectangle pageSize = new Rectangle(230F, 450F);
			Rectangle codeSize = new Rectangle(108F, 72F);
			Document documento = new Document(pageSize);
			Font font = FontFactory.getFont("Arial", 16F, 1);
			Font fontCod = FontFactory.getFont("Arial", 20F, 1);
			Font fontPedido = FontFactory.getFont("Arial", 43F,1);
			fontPedido.setStyle("bold");

			PdfWriter writer = PdfWriter.getInstance(documento, archivo);
			documento.open();
			documento.setMargins(5F, 5F, 0.0F, 0.0F);
			com.itextpdf.text.pdf.PdfContentByte cb = writer.getDirectContent();
			documento.newPage();
			for(Iterator iterator = pedidos.iterator(); iterator.hasNext(); documento.newPage())
			{
				EncuentraPedido pedido = (EncuentraPedido)iterator.next();
				Barcode39 code39 = new Barcode39();
				code39.setCode(pedido.getIdPedido()+"");
				code39.setBarHeight(80F);
				code39.setX(1.2F);

				PdfPTable table = new PdfPTable(2);
				table.setTotalWidth(220F);
				table.setLockedWidth(true);
				table.setWidths(new float[] {
						5F, 3F
				});


				Phrase frase = new Phrase("Notificacion de picking de pedido - encuentra");
				frase.setFont(font);
				PdfPCell cell = new PdfPCell(frase);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setColspan(2);
				table.addCell(cell);
				cell = new PdfPCell(code39.createImageWithBarcode(cb, null, null));
				cell.setPadding(5F);
				cell.setPaddingLeft(5F);
				cell.setRowspan(3);
				cell.setColspan(2);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				table.addCell(cell);


				String ped = pedido.getIdPedido()+"";
				String pedCorto = "";
				if(ped.length()>7)
				{
					pedCorto = "M.L"+ped.substring(ped.length()-4);
				}
				else
				{
					pedCorto = "WEB"+ped.substring(ped.length()-4);
				}




				PdfPCell cellcell = new PdfPCell(new Paragraph(pedCorto, fontPedido) );
				cellcell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cellcell.setColspan(2);
				table.addCell(cellcell);

				frase = new Phrase("Pedido: "+pedido.getIdPedido()+"");
				frase.setFont(fontCod);
				cell = new PdfPCell(frase);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setColspan(2);

				table.addCell(cell);


				cell = new PdfPCell(new Phrase("Cliente: "+pedido.getCliente().getNombre()+" "+pedido.getCliente().getApellido()));
				cell.setColspan(2);
				table.addCell(cell);

				cell = new PdfPCell(new Phrase("Fecha: "+pedido.getFecha()+""));
				cell.setColspan(2);
				table.addCell(cell);


				frase = new Phrase("Detalle del pedido");
				frase.setFont(font);
				cell = new PdfPCell(frase);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setColspan(2);
				table.addCell(cell);


				frase = new Phrase("Articulo");
				frase.setFont(font);
				cell = new PdfPCell(frase);
				table.addCell(cell);

				frase = new Phrase("Cantidad");
				frase.setFont(font);
				cell = new PdfPCell(frase);
				table.addCell(cell);

				for (EncuentraPedidoArticulo ar : pedido.getArticulosPedido()) 
				{ 
					frase = new Phrase(ar.getArticulo());
					frase.setFont(font);
					cell = new PdfPCell(frase);
					table.addCell(cell);

					frase = new Phrase(ar.getCantidad()+ "");
					frase.setFont(font);
					cell = new PdfPCell(frase);
					table.addCell(cell);
				}



				documento.add(table);
			}

			documento.close();
		}
		catch(DocumentException e)
		{
			e.printStackTrace();
		}
		catch(FileNotFoundException e)
		{
			e.printStackTrace();
		}



		beans.api.json.PrintObject p = new beans.api.json.PrintObject();
		p.setId(aNumber+"");
		p.setUrl(pathHttp);
		p.setPorait(0+"");
		p.setPrinterId(destinoImpresion+"");

		Gson gson = new Gson();
		String json = gson.toJson(p);

		LogicaAPI.PutPrintSpooler(p,this.getIdEmpresa()); 


	}




















}
