package marketPlaceIntegrations.Fenicio;

import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;

import com.google.gson.Gson;
import com.itextpdf.text.DocumentException;

import beans.Fecha;

import dataTypes.DataIDDescripcion;
import beans.encuentra.Compras;
import beans.encuentra.EncuentraPedido;
import beans.encuentra.Pedido;
import beans.encuentra.EncuentraPedidoArticulo;
import beans.encuentra.EncuentraPedidoArticuloReq;
import beans.encuentra.Items;
import marketPlaceIntegrations.UpdateStateResponse;
import marketPlaceIntegrations.marketPlace;
import marketPlaceIntegrations.marketPlaceInterface;


public class Fenicio extends marketPlace{
	
	
	//MAPEA ESTADOS DE WS A ESTADOS FENICIO
	public String statusMapper(String status) {
		String estado = "";
		try {
			switch (status) {
			case "preparado":
				estado = "Listo para enviar";
				break;
			case "listoretirar":
				estado = "Listo para retirar";
				break;
			case "despachado":
				estado = "En camino";
				break;
			case "entregado":
				estado = "Pedido entregado";
				break;	

			default:
				estado = status;
				break;
			}
		} catch (Exception e) {
			return status;
		}
		return estado;
	}
	
	//MAPEA ESTADOS DE ENCUENTRA AL ESTADO CORRESPONDIENTE DE FENICIO
	public String statusMapperEncuentra_Fenicio(int status) {
		String estado = "";
		try {
			switch (status) {
			case 1:
				estado = "preparando";
				break;
			case 2:
				estado = "preparando";
				break;
			case 3:
				estado = "preparado";
				break;
			case 5:
				estado = "listoretirar";
				break;
			case 4:
				estado = "despachado";
				break;
			case 6:
				estado = "entregado";
				break;	

			default:
				estado = "";
				break;
			}
		} catch (Exception e) {
			return "";
		}
		return estado;
	}
	
	//PREPARA EL JSON QUE SE DEBE ENVIAR PARA CAMBIO DE ESTADO
	public String JSONUpdateState (Long idPedido, String idEcommerce, String track, int estado) {
		String json = "";
			json=
					 "     { "+
					 "        \"id\":\""+idEcommerce+"\", "+
					 "        \"estado\":\""+statusMapperEncuentra_Fenicio(estado)+"\", "+
					 "     } "
					 ;
		
		return json;
	}
	
	//CAMBIO DE ESTADO
	public List<UpdateStateResponse> UpdateState(String json,int canal)
	{
		ColectionUpdateState salida = new ColectionUpdateState();
		try {
			String URLbase = this.canales.get(canal).getHost();
			
			String funcion = "set/compras";
			String retorno = this.callWSPOST_ParamJSON(URLbase, funcion, json,canal);
			Gson gson = new Gson();
			salida = gson.fromJson(retorno, ColectionUpdateState.class);
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return salida.getCompras();
	}
	
	//SINCRO PEDIDOS
	public void sincroFenicio() {
		Enumeration<Integer> canales = this.canales.keys();
		while (canales.hasMoreElements()) {
			int idCanal=canales.nextElement();
			getPedidos(idCanal);
		}
	}
	
	//GET PEDIDOS
	public Hashtable<Long, EncuentraPedido> getPedidos(int canal) 
	{					
		return null;
		
	}
	

	//GET ETIQUETAS
	public String getEtiqueta(int id, int canal,int idEmpresa){
		String url = this.canales.get(canal).getHost();
		String funcion2 = "/get/etiqueta?idCompra="+id+"";
		String retorno2 = callWSGET(url, funcion2,canal);
		return retorno2;
	}
	
	
	
	
	//POST
	private String callWSPOST_ParamJSON(String URLbase, String funcion, String jotason, int idCanal)
	{
		String usu = this.canales.get(idCanal).getUser();
		String pass = this.canales.get(idCanal).getPass();
		
		String retorno = "";
		HttpClient httpClient = new DefaultHttpClient();
		 ((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT),
				 new UsernamePasswordCredentials(usu,pass));//"std_comuy", "STD#Tck_%$774$3"));
	    try 
		{
	    	System.out.println("llamando a "+URLbase+funcion);
	    	System.out.println("Parametros JSON "+jotason);
	    	System.out.println("Respuesta");
	    	HttpPost httpPostRequest = new HttpPost(URLbase+funcion);
	    	
	    	StringEntity params =new StringEntity(jotason);
	    	httpPostRequest.setHeader("Content-type", "application/x-www-form-urlencoded");
	    	
	    	//httpPostRequest.setEntity(params);
	    	
	    	ArrayList<NameValuePair> postParameters;
	    	postParameters = new ArrayList<NameValuePair>();
	        postParameters.add(new BasicNameValuePair("compras", jotason));
	        

	        httpPostRequest.setEntity(new UrlEncodedFormEntity(postParameters, "UTF-8"));
	    	
	    	
		  	HttpResponse httpResponse = httpClient.execute(httpPostRequest);
		  	int code=httpResponse.getStatusLine().getStatusCode();
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }
		          System.out.println(strFileContents);
		          return strFileContents;
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          httpPostRequest.abort();
		          runtimeException.printStackTrace();
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		return retorno;
		
	}
	
	//GET CLIENT
	private static HttpClient getHttpClient(String u, String p) 
	{

	    try {
	        //SSLContext sslContext = SSLContext.getInstance("SSL");

	       
	        //SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext,SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

	        HttpClientBuilder construct = HttpClientBuilder.create();//.setSSLSocketFactory(socketFactory); 
	        
	        CredentialsProvider provider = new BasicCredentialsProvider();
			UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(u, p);
			provider.setCredentials(AuthScope.ANY, credentials);
			
			construct.setDefaultCredentialsProvider(provider);
			

	        HttpClient httpClient = construct.build();

	        return httpClient;

	    } catch (Exception e) {
	        e.printStackTrace();
	        return HttpClientBuilder.create().build();
	    }
	}
	
	//GET
	public String callWSGET(String URLbase, String funcion, int canal)
	{
		String usu = this.canales.get(canal).getUser();
		String pass = this.canales.get(canal).getPass();
		
		String retorno = "";
		//HttpClient httpClient = new DefaultHttpClient();
		
		HttpClient httpClient = getHttpClient(usu, pass);
		
	    //((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT),new UsernamePasswordCredentials(usu,pass));//"std_comuy", "STD#Tck_%$774$3"));
	    try 
		{
	    	HttpGet httpGetRequest = new HttpGet(URLbase+funcion);
	    	
		  	HttpResponse httpResponse = httpClient.execute(httpGetRequest);
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          return strFileContents;
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          httpGetRequest.abort();
		          runtimeException.printStackTrace();
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		return retorno;
		
	}
	
}
