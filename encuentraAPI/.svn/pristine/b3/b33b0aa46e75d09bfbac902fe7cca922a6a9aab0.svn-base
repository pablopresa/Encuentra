package elRey;

import java.util.List;


import beans.Usuario;
import beans.api.MovStock;
import clienteVisualObject.OrdenVenta;
import logica.LogicaAPI;
import beans.encuentra.Cliente;

import clientesVisual_Store.elRey.ClienteWSELREY;
import clientesVisual_Store.elReyEC.ClienteWS;
import clientesVisual_Store.elReycomercioelectronico.ClienteWSfacturacion;
import dataTypes.DataIDDescripcion;



public class SincMovimientosEC 
{
	static LogicaAPI lo = new LogicaAPI();
	static ClienteWSELREY ws = new ClienteWSELREY();
	static ClienteWS wsEC = new ClienteWS();
	static ClienteWSfacturacion wsF = new ClienteWSfacturacion();
	
	public static void main(String[] args) 
	{	
		LogicaAPI logica = new LogicaAPI();
		String token = logica.darToken(4,4000);
		Usuario u = LogicaAPI.loginEncuentraAPI2(token);
		int idEmpresa = u.getIdEmpresa();
		
		while (true) {
			//putClientes(idEmpresa);
			try {
				putMovimientosStocks(idEmpresa);
			} catch (Exception e) {System.out.println("Error grabando movimientos de stock");}
			
			try {
				putFacturacion(idEmpresa);		
			} catch (Exception e) {System.out.println("Error grabando facturas");}
			
			
			try {
				Thread.sleep(60000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
				 
	}
	private static void putMovimientosStocks(int idEmpresa)
	{
		List<MovStock> movs = lo.queueMovsStock(idEmpresa);
		
		DataIDDescripcion respVisual;
		for(MovStock mov:movs) {
			try {
				respVisual = wsEC.GrabarTransferencia(mov.getOrigen(), mov.getDestino(), 0, mov.getDetalle(),
						"Transferencia realizada desde encuentra");
				
				if(respVisual.getId()==0) {
					lo.RegistrarDocMovimientoStock(0,  mov.getId(), mov.getDoc(), respVisual.getDescripcion(),
							idEmpresa,0,respVisual.getIdB());
				}
				else {
					lo.RegistrarDocMovimientoStock(1,  mov.getId(), respVisual.getId(), respVisual.getDescripcion(),
							idEmpresa,0,respVisual.getIdB());
				}
			} catch (Exception e) {
				e.printStackTrace();
			}			
		}
	}

	private static void putFacturacion(int idEmpresa) {
		List<OrdenVenta> ordenes = lo.darOrdensSinFacturar(idEmpresa);
		
		DataIDDescripcion respVisual;
		for(OrdenVenta o:ordenes) {
			try {
				Cliente c= lo.darCliente(o.getIdCarrito(), idEmpresa);
				respVisual = wsF.GrabarFactura(o, c);
				
				lo.RegistrarFactura(o.getIdCarrito(), respVisual.getId(), idEmpresa,respVisual.getDescripcion());
				if(respVisual.getId()!=0) {
					lo.SincronizarCliente(c.getDocumentoNro(), idEmpresa);
				}
			} catch (Exception e) {
				// TODO: handle exception
			}			
		}
	}
	
	private static void putClientes(int idEmpresa) {
		List<Cliente> clientes = lo.darClientesSinGrabar(idEmpresa);
		
		for(Cliente c:clientes) {
			ws.AltaCliente(c);
			lo.SincronizarCliente(c.getDocumentoNro(), idEmpresa);
		}
	}

}
