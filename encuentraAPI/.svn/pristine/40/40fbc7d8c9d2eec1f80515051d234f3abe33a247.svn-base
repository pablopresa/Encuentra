package integraciones.erp.sapBO.garrido;

import java.io.BufferedInputStream;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import com.google.gson.Gson;

import beans.datatypes.DTO_Articulo;
import beans.datatypes.DataIDDescripcion;
import integraciones.erp.sapBO.beansSL.BarCode;
import integraciones.erp.sapBO.beansSL.ITMSResponse;
import integraciones.erp.sapBO.beansSL.Login;
import integraciones.erp.sapBO.beansSL.Value;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class ClienteGarrido {
	
	
		private static final String URL_BASE = "https://190.64.140.140:50000//b1s/v1/";
		
		private static final String URL_GET_ARTICULOS = URL_BASE + "Items?"
				+ "$select=ItemCode, ItemName, ItemsGroupCode, Manufacturer, "
				+ "SalesUnit, Mainsupplier, U_SEI_SubGrupos, U_SEI_Grupo, ItemBarCodeCollection";
		
		private static final String URL_GET_GENEROS = URL_BASE + "ItemGroups?"
				+ "$select=";
		
		private static final String URL_GET_UNIDADES_MEDIDA = URL_BASE + "UnitOfMeasurements?"
				+ "$select=";
		
		private static final String URL_GET_CATEGORIAS = URL_BASE + "U_SEI_GRUPOSINV?"
				+ "$select=";
		
		private static final String URL_GET_CLASES = URL_BASE + "U_SEI_SUBGRUPOSINV?"
				+ "$select=";

		private static final String URL_GET_SECCIONES = null;

		private Integer iSkip = 0;
		private String sSkip = "&$skip=";
		private Gson gson = new Gson();
		private static String sessionId;
		
		public ClienteGarrido(){
			sessionId = new Login("SPOLLERO", "4321", "GARRIDO_PRD").doLogin();
		}
		
		public List<Value> consultaGenerica(String url)
		{
			ITMSResponse items = new ITMSResponse();
			List<Value> ret = new ArrayList<>();
			try
			{
				do{
					OkHttpClient client = getUnsafeOkHttpClient();
					
					Request request = new Request.Builder()
							.url(url + getSkip())
							.method("GET", null)
							.addHeader("Content-Type", "application/json")
							.addHeader("Cookie", "B1SESSION="+sessionId+"; CompanyDB=GARRIDO_PRD")
							.build();
					
					Response response = client.newCall(request).execute();
					
					int bytesRead = 0;
			        BufferedInputStream bis = new BufferedInputStream(response.body().byteStream());
			        byte[] contents = new byte[1024];
			        StringBuilder strFileContents= new StringBuilder(); 
			        while((bytesRead = bis.read(contents)) != -1) 
			        { 
			            strFileContents.append(new String(contents, 0, bytesRead));              
			        }
			        response.close();
			        
			        items = this.gson.fromJson(strFileContents.toString(), ITMSResponse.class);       
					
			        ret.addAll(items.getValue());
			        
			        if(items.getValue().size() != 20) {
			        	int cantItems = iSkip + items.getValue().size() - 20;
			        	System.out.println("Se procesaron "+cantItems+" items.");
			        }
			        else 
			        	System.out.println("Se procesaron "+iSkip+" items.");
			        
				} 
				while(items.getValue().size() == 20);
				return ret;
			}
			catch (Exception e) 
			{
				e.printStackTrace();
				return new ArrayList<>();
			}
	}
		private String getSkip() {
			String ret = sSkip + iSkip;
			iSkip += 20;
			return ret;
		}
		
		public List<DataIDDescripcion> obtenerDatos(String nombreMetodo){
			switch (nombreMetodo) {
			case "generos":
				return obtenerGeneros();
			case "categorias":
				return obtenerCategorias();
			case "secciones":
				return obtenerSecciones();
			case "clases":
				return obtenerClases();
			case "unidades medida":
				return obtenerUnidadesMedida();
			default:
				return new ArrayList<>();
			}
		}

		private List<DataIDDescripcion> obtenerGeneros() {
			List<Value> values = consultaGenerica(URL_GET_GENEROS);
			List<DataIDDescripcion> ret = new ArrayList<>();
			DataIDDescripcion item;
			for(Value g : values) {
				item = new DataIDDescripcion();
				item.setId(0);
				item.setDescripcion("");
				}
			return null;
		}

		private List<DataIDDescripcion> obtenerClases() {
			String url = URL_GET_CLASES;
			return null;
		}

		private List<DataIDDescripcion> obtenerSecciones() {
			String url = URL_GET_SECCIONES;
			return null;
		}

		private List<DataIDDescripcion> obtenerCategorias() {
			String url = URL_GET_CATEGORIAS;
			return null;
		}
		
		private List<DataIDDescripcion> obtenerUnidadesMedida() {
			String url = URL_GET_UNIDADES_MEDIDA;
			return null;
		}
		
		private OkHttpClient getUnsafeOkHttpClient() {
			   try {
			       final TrustManager[] trustAllCerts = new TrustManager[]{
			               new X509TrustManager() {

			                   @Override
			                   public void checkClientTrusted(java.security.cert.X509Certificate[] chain,
			                                                  String authType) throws
			                           CertificateException {
			                   }

			                   @Override
			                   public void checkServerTrusted(java.security.cert.X509Certificate[] chain,
			                                                  String authType) throws
			                           CertificateException {
			                   }
			                   @Override
			                   public java.security.cert.X509Certificate[] getAcceptedIssuers() {
			                       return new java.security.cert.X509Certificate[]{};
			                   }
			               }
			       };

			       final SSLContext sslContext = SSLContext.getInstance("TLS");
			       sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

			       final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

			       OkHttpClient.Builder builder = new OkHttpClient.Builder();
			       builder.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0]);

			       builder.hostnameVerifier(new HostnameVerifier() {
			           @Override
			           public boolean verify(String hostname, SSLSession session) {
			               return true;
			           }
			       });

			       return builder.build();
			   } catch (Exception e) {
			       throw new RuntimeException(e);
			   }
			}

		public List<DTO_Articulo> obtenerArticulos() {
			List<Value> values = consultaGenerica(URL_GET_ARTICULOS);
			List<DTO_Articulo> articulos = new ArrayList<>();
			for(Value val : values) {
				DTO_Articulo art =  new DTO_Articulo(val.getItemCode() ,val.getItemName(), "talle", "color", "temporada",
						"coleccion", val.getMainsupplier(), val.getManufacturer()+"", "", "");
				if(val.getItemBarCodeCollection()!=null && val.getItemBarCodeCollection().length!=0) {
					List<String> codigos = new ArrayList<>();
					for(BarCode b : val.getItemBarCodeCollection()) 
						codigos.add(b.getBarcode());
					art.setCodigoBarras(codigos);
				}
				articulos.add(art);
			}
			return articulos;
		}
		
//		public String obtenerMarcas() {
//			String marcasJson = "";
//			try {
////				int uid = devolverUID();
//
//				final XmlRpcClient models = getModels();
//
//				@SuppressWarnings("unchecked")
//				final List<Object> arts = Arrays.asList((Object[]) models.execute("execute_kw", Arrays.asList(ccls.getDb(),
//						uid, ccls.getPassword(), "product.marca", "search_read", Collections.emptyList(), new HashMap() {
//							{
//								put("fields", Arrays.asList("name"));
//							}
//						})));
//
//				Gson gson = new Gson();
//				marcasJson = gson.toJson(arts);
//
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//			return marcasJson;
//		}


	
}
