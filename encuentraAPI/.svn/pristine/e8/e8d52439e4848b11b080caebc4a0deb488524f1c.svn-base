package ws;

import java.io.IOException;

import javax.ws.rs.Consumes;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import json_objects.Credenciales;
import json_objects.Shipping;
import logica.LogicaAPI;
import logica.Util;

import com.google.gson.Gson;

import Couriers.Call_WS_DAC;
import Couriers.Call_WS_UES;
import beans.Usuario;
import beans.encuentra.EncuentraPedido;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import clienteDISTRICAD.Call_WS_DISTRICAD;
import clienteMIRTRANS.Call_WS_MIRTRANS;
import clienteMIRTRANS.despachoMIRTRANS;
import clienteMIRTRANS.trackingMIRTRANS;
import clientePedidosYA.CallBackPeYA;
import clientePedidosYA.Call_WS_PedidosYA;
import clientePedidosYA.OutputDespachoPeya;
import clienteSOYDELIVERY.Call_WS_SOYDELIVERY;
import clienteSOYDELIVERY.OutputDespachoSDL;
import clienteSOYDELIVERY.trackingSDL;
import clienteUES.trackingUES;
import dataTypes.DataDescDescripcion;


@Path("/Couriers")
public class Couriers 
{
	
	@POST
	@Path("/MirtransShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String MirtransShipping(String data,@QueryParam ("token") String a) throws IOException
	{
	   
		System.out.println(data);
		
		String json = "";
		despachoMIRTRANS despacho = null;
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{		
				Gson gson = new Gson();
				Shipping shipp = gson.fromJson(data, Shipping.class);				
				
				if(shipp==null)
				{
					System.out.println("No se ha recibido ningun envio");
					json = "No se ha recibido ningun envio";
				}
				else
				{
					Call_WS_MIRTRANS call = new Call_WS_MIRTRANS();
					despacho = call.altaEnvio(shipp.getCliente(), shipp.getCredenciales());
					json = gson.toJson(despacho);
				}
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
	   }
	
	@POST
	@Path("/DistricadShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String DistricadShipping(String data,@QueryParam ("token") String a) throws IOException
	{

		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{		
				Gson gson = new Gson();
				Shipping shipp = gson.fromJson(data, Shipping.class);				
				
				if(shipp==null)
				{
					System.out.println("No se ha recibido ningun envio");
					json = "No se ha recibido ningun envio";
				}
				else
				{
					Call_WS_DISTRICAD call = new Call_WS_DISTRICAD();
					DataDescDescripcion despacho = call.setEnvio(shipp.getCliente(), shipp.getCredenciales());
					json = gson.toJson(despacho);
				}
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
		
	}
		
	@POST
	@Path("/UESShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String UESShipping(String data,@QueryParam ("token") String a,@QueryParam ("fecha") String fecha,
			@QueryParam ("hora") String hora) throws IOException
	{
		Util ul = new Util();
		data = ul.removerTildes(data);
		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{
				Gson gson = new Gson();
				Shipping shipp = gson.fromJson(data, Shipping.class);				
				
				if(shipp==null)
				{
					System.out.println("No se ha recibido ningun envio");
					json = "No se ha recibido ningun envio";
				}
				else
				{
					Call_WS_UES call = new Call_WS_UES();
					
					DataDescDescripcion despacho = call.generarEtiqueta(shipp.getCredenciales().getIdCliente(), shipp.getCredenciales().getToken(), shipp.getCredenciales().getTipoEnvio() , 
							shipp.getCliente().getNombre() + " "+shipp.getCliente().getApellido(), shipp.getCliente().getCalle() , shipp.getCliente().getNroPuerta() , 
							shipp.getCliente().getNroApto() , shipp.getCliente().getLocalidad() ,shipp.getCliente().getDepartamento() , shipp.getCliente().getTelefono(), shipp.getCliente().getEmail(), shipp.getCliente().getObs() , shipp.getCredenciales().getPedido(), shipp.getCliente().getLatitud(), shipp.getCliente().getLongitud());
					
					
					
					json = gson.toJson(despacho);
				}
			}
				
				
			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
		
	}
	
	@POST
	@Path("/DACShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String DacShipping(String data,@QueryParam ("token") String a,@QueryParam ("fecha") String fecha,
			@QueryParam ("hora") String hora) throws IOException
	{
		Util ul = new Util();
		data = ul.removerTildes(data);
		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{
				Gson gson = new Gson();
				Shipping shipp = gson.fromJson(data, Shipping.class);				
				
				if(shipp==null)
				{
					System.out.println("No se ha recibido ningun envio");
					json = "No se ha recibido ningun envio";
				}
				else
				{
					Call_WS_DAC call = new Call_WS_DAC();
					
					DataDescDescripcion despacho = call.generarEtiqueta
							(
									shipp.getCliente().getNombre() + " "+shipp.getCliente().getApellido(),
									shipp.getCliente().getNombre() + " "+shipp.getCliente().getApellido(),
									shipp.getCliente().getCalle() , 
									shipp.getCliente().getNroPuerta() , 
									shipp.getCliente().getNroApto() , 
									shipp.getCliente().getCiudad() ,
									shipp.getCliente().getDepartamento() , 
									shipp.getCliente().getTelefono(), 
									shipp.getCliente().getEmail(), 
									shipp.getCliente().getObs() , 
									shipp.getCredenciales().getPedido(), 
									shipp.getCliente().getLatitud(), 
									shipp.getCliente().getLongitud(),
									u.getIdEmpresa(),
									shipp.getCredenciales().getUser(),
									shipp.getCredenciales().getPass(),
									shipp.getNombreRemite(),
									shipp.getCliente().getDocumentoNro()+"",
									shipp.getCantidadPaquetes(),
									shipp.getxGrandes(),
									shipp.getGrandes(),
									shipp.getMedianos(),
									shipp.getChicos(),
									shipp.getTipoShipping()
									
									);
					
					
					
					json = gson.toJson(despacho);
				}
			}
				
				
			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
		
	}
	
	@POST
	@Path("/SDLShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String SDLShipping(String data,@QueryParam ("token") String a,@QueryParam ("fecha") String fecha,
			@QueryParam ("hora") String hora) throws IOException
	{
		Util ul = new Util();
		data = ul.removerTildes(data);
		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{
				Gson gson = new Gson();
				Shipping shipp = gson.fromJson(data, Shipping.class);				
				
				if(shipp==null)
				{
					System.out.println("No se ha recibido ningun envio");
					json = "No se ha recibido ningun envio";
				}
				else
				{
					Call_WS_SOYDELIVERY call = new Call_WS_SOYDELIVERY();
					OutputDespachoSDL despacho = call.setEnvio(shipp.getCliente(), shipp.getCredenciales());
					if(despacho.getPedido_id()!=0) {
						DataDescDescripcion trackEti = call.getEtiqueta(despacho.getPedido_id(),shipp.getCredenciales());
						json = gson.toJson(trackEti);
					}
					else {
						json = gson.toJson(new DataDescDescripcion());
					}
					
				}
			}			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}		
		
		return json;		
	}
	
	
	@POST
	@Path("/getTrackingMirtrans")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String getTrackingMirtrans(String data,@QueryParam ("token") String a) throws IOException
	{

		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{		
				Gson gson = new Gson();
				Credenciales c = gson.fromJson(data, Credenciales.class);				
				
				if(c==null)
				{
					System.out.println("No se ha recibido credenciales");
					json = "No se ha recibido credenciales";
				}
				else
				{
					Call_WS_MIRTRANS call = new Call_WS_MIRTRANS();
					trackingMIRTRANS tracking = call.getTracking(c);
					json = gson.toJson(tracking);
				}
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
		
	}
	
	@POST
	@Path("/getTrackingUES")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String getTrackingUES(String data,@QueryParam ("token") String a) throws IOException
	{

		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{		
				Gson gson = new Gson();
				Credenciales c = gson.fromJson(data, Credenciales.class);				
				
				if(c==null)
				{
					System.out.println("No se ha recibido credenciales");
					json = "No se ha recibido credenciales";
				}
				else
				{
					Call_WS_UES call = new Call_WS_UES();
					trackingUES tracking = call.getTracking(c);
					json = gson.toJson(tracking);
				}
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
		
	}
	
	
	@POST
	@Path("/getTrackingSDL")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String getTrackingSDL(String data,@QueryParam ("token") String a) throws IOException
	{

		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{		
				Gson gson = new Gson();
				Credenciales c = gson.fromJson(data, Credenciales.class);				
				
				if(c==null)
				{
					System.out.println("No se ha recibido credenciales");
					json = "No se ha recibido credenciales";
				}
				else
				{
					Call_WS_SOYDELIVERY call = new Call_WS_SOYDELIVERY();
					trackingSDL tracking = call.getTracking(c);
					json = gson.toJson(tracking);
				}
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
		
	}
	
	
	@POST
	@Path("/PeYaShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String PeYaShipping(String data,@QueryParam ("token") String a,@QueryParam ("fecha") String fecha,
			@QueryParam ("hora") String hora) throws IOException
	{
		Util ul = new Util();
		data = ul.removerTildes(data);
		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{
				Gson gson = new Gson();
				Shipping shipp = gson.fromJson(data, Shipping.class);				
				
				if(shipp==null)
				{
					System.out.println("No se ha recibido ningun envio");
					json = "No se ha recibido ningun envio";
				}
				else
				{
					Call_WS_PedidosYA call = new Call_WS_PedidosYA();
					OutputDespachoPeya despacho = call.setEnvio(shipp,u.getIdEmpresa());
					
					if(despacho.getId()!=null && !despacho.getId().equals("") ) 
					{
						json = gson.toJson(new DataDescDescripcion("OK",despacho.getId()));
						
					}
					else 
					{
						json = gson.toJson(new DataDescDescripcion("FAIL",despacho.getStatus() ));
					}
					
				}
			}			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}		
		
		return json;		
	}
	
	@POST
	@Path("/PeYaConfirmShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String PeYaConfirmShipping(String data,@QueryParam ("token") String a,@QueryParam ("tracking") String tracking) throws IOException
	{
		Util ul = new Util();
		data = ul.removerTildes(data);
		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{
				Gson gson = new Gson();
				Credenciales cre = gson.fromJson(data, Credenciales.class);				
				
				if(cre==null)
				{
					System.out.println("No se ha credenciales");
					json = "No se ha credenciales";
				}
				else
				{
					Call_WS_PedidosYA call = new Call_WS_PedidosYA();
					OutputDespachoPeya despacho = call. confirmarEnvio(cre, tracking, u.getIdEmpresa());
					if(despacho.getId()!=null && !despacho.getId().equals("") ) 
					{
						json = gson.toJson(new DataDescDescripcion("OK",despacho.getId()));
						
					}
					else 
					{
						json = gson.toJson(new DataDescDescripcion("FAIL",""));
					}
					
				}
			}			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}		
		
		return json;		
	}
	@POST
	@Path("/PeYaCallbackShipping")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String PeYaCallbackShipping(String data,@QueryParam ("tracking") String tracking,@HeaderParam("Authorization") String a) throws IOException
	{
		Util ul = new Util();
		data = ul.removerTildes(data);
		System.out.println(data);
		
		LogicaAPI.persistir("INSERT INTO `callbacklog` (`idEmpresa`, `json`) VALUES ('0', '"+data+"');");
		
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{
				Gson gson = new Gson();
				CallBackPeYA cb = gson.fromJson(data, CallBackPeYA.class);				
				
				if(cb==null)
				{
					System.out.println("No se ha credenciales");
					json = "No se ha credenciales";
				}
				else
				{
					/*hay que ver que hacemos con los estados*/
					String status =cb.getData().getStatus(); 
					
					if(status.equals("COMPLETED") || status.equals("PICKED_UP"))
					{
						Call_WS_APIENCUENTRA cen = new Call_WS_APIENCUENTRA();
						String track = cb.getId();
						EncuentraPedido p = cen.darIdPedido(a,track);
						String dataArticuloEcommerceVerifR ="";
						
						if(status.equals("COMPLETED"))
						{
							 dataArticuloEcommerceVerifR = "{   \"idPedido\":"+p.getIdPedido()+",   \"estadoEncuentra\":6}";
						}
						else
						{
							 dataArticuloEcommerceVerifR = "{   \"idPedido\":"+p.getIdPedido()+",   \"estadoEncuentra\":4}";
						}
						
						cen.updateOrdersStatus(a, dataArticuloEcommerceVerifR);
					}
					
					
					
					
					
					
					
				}
			}			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}		
		
		return json;		
	}
}
