package persistencia;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import beans.api.pedidoFactura;
import beans.datatypes.DataDescDescripcion;
import beans.datatypes.DataIDDescripcion;
import beans.helper.PropertiesHelperAPI;
import logica.Util;



public class MSSQL_API 
{
	private static Connection con = null;
	
	
	
	
	public static void closeFullConnection(Connection con,ResultSet rs,Statement s) throws SQLException{
		rs.close();
		s.close();
		con.close();
	}
	
	public static List <DataDescDescripcion> darIdDescripcionSAP(String consulta) 
	{	
		List <DataDescDescripcion> retorno = new ArrayList<>();
				
		// Create a variable for the connection string.
		String connectionUrl="jdbc:sqlserver://10.108.0.8:1433;databaseName=STADIUM_DEV2;";
        try(Statement s = con.createStatement();) {
        	
            // Establish the connection.
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(connectionUrl,"sa","sqlstadium");
            
            //
            	
	  		 ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			 DataDescDescripcion d = new DataDescDescripcion(rs.getString(1), rs.getString(2));
	  			 retorno.add(d);
	  			  
	  					
	  		   }
	  		
	  	
	  		closeFullConnection(con, rs, s);
          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return retorno;
      
	}
	
	
	private static void darConexion(int idEmpresa)
	{
		PropertiesHelperAPI pH = null;
		switch (idEmpresa) 
		{
			case 1:
				pH = new PropertiesHelperAPI("SQLSTADIUM");
			break;
			case 2:
				pH = new PropertiesHelperAPI("SQLFORUS");
				break;
			case 4:
				pH = new PropertiesHelperAPI("SQLELREY");
			break;
			default:
				pH = new PropertiesHelperAPI("");
			break;
		}
		
		try 
		{
			pH.loadProperties();
			
			String usuario = pH.getValue("u");
			String pass = pH.getValue("p");
			String connectionUrl = pH.getValue("connectionUrl");
			connectionUrl+=" sendStringParametersAsUnicode=false;";
					        
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			con = DriverManager.getConnection(connectionUrl,usuario,pass);
			
		} catch (Exception e) 
			        {
			System.out.println(e.getMessage());
		}
		
		
	}
	
	public static List <DataIDDescripcion> darIDDescripcion(String consulta, int idEmpresa) 
	{	
		List <DataIDDescripcion> retorno = new ArrayList<>();
				
		
        try(Statement s = con.createStatement();) {
        	
            // Establish the connection.
            darConexion(idEmpresa);
            
            //
            	
        		
	  		 ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			 DataIDDescripcion d = new DataIDDescripcion(rs.getInt(1), rs.getString(2));
	  			 try
	  			 {
	  				 d.setDescripcionB(rs.getString(4));
	  			 }
	  			 catch (Exception e) 
	  			 {
	  				 System.out.println(e.getMessage());
	  			 }
	  			try
	  			 {
	  				 d.setIdB(rs.getInt(3));
	  			 }
	  			 catch (Exception e) 
	  			 {
					System.out.println(e.getMessage());
	  			 }
	  			 retorno.add(d);
	  			  
	  					
	  		   }
	  		
	  	
	  		closeFullConnection(con, rs, s);
          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return retorno;
      
	}
	

	
	public static Map<Integer,pedidoFactura> darFacturasVisual(String consulta, Map<Integer,pedidoFactura> pedidos) 
	{	
				
		// Create a variable for the connection string.
		String connectionUrl="jdbc:sqlserver://200.40.45.126:1433;databaseName=VsReyEntreteDoc;";
        try (Statement s = con.createStatement();){
        	
            // Establish the connection.
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(connectionUrl,"encuentra","sqlencuentra");
            
	  		ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			try {
	  				//String base64 = rs.getString(2);
	  				 byte[] base64b = rs.getBytes(2);
		  			 String pdf = "";
		  			 pdf = Util.bytesToPdf(base64b, "VCO"+rs.getInt(1));
		  			 pedidos.get(rs.getInt(1)).setPdf(pdf);	
				} catch (Exception e) {e.printStackTrace();}
	  			 			
	  		   }		
	  		 
	  		closeFullConnection(con, rs, s);          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return pedidos;
      
	}
	
	
	public static List <DataIDDescripcion> darEcommerceDocumentosEntregas(String consulta, int idEmpresa) 
	{	
		List <DataIDDescripcion> retorno = new ArrayList<>();
				
		
        try (Statement s = con.createStatement();){
        	
            // Establish the connection.
            darConexion(idEmpresa);
            
            //
            	
        		
	  		 
	  		
	  		 
	  		 	  		 
	  		 ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			 DataIDDescripcion d = new DataIDDescripcion(rs.getInt(3), rs.getString(2));
	  		
	  			try
	  			 {
	  				 d.setDescripcionB(rs.getString(1));
	  			 }
	  			 catch (Exception e) 
	  			 {
					System.out.println(e.getMessage());
	  			 }
	  			 retorno.add(d);
	  			  
	  					
	  		   }
	  		
	  	
	  		closeFullConnection(con, rs, s);
          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return retorno;
      
	}
	

}