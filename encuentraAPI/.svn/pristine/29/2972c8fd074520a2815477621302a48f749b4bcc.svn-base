package clienteLaIsla;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.List;

import com.google.gson.Gson;

import beans.Usuario;
import beans.api.MovStock;
import beans.api.pedidoFactura;
import beans.encuentra.Cliente;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import clienteVisualObject.OrdenVenta;
import dataTypes.BillingEntities;
import dataTypes.DataIDDescripcion;
import dataTypes.MetodoPago;
import fenicioAPI.Descuento;
import fenicioAPI.Lineas;
import fenicioAPI.Orden;
import json_objects.SendMail;
import json_objects.SendMailSpooler;
import logica.LogicaAPI;
import persistencia._EncuentraConexionAPI2;

public class LaIsla 
{
	private final LogicaAPI lo = new LogicaAPI();
	private final String token = lo.darToken(6,6000);
	private final Usuario u = LogicaAPI.loginEncuentraAPI2(token);
	private final int idEmpresa = u.getIdEmpresa();
	private final ClienteOdoo_LaIsla coli = new ClienteOdoo_LaIsla(true);
	private String msj ="", idMail="";

	public LaIsla()
	{
		
	}
	
	public void mover ()
	{
		int idSession = -1;
		try {
			idSession = generarIDSession();
		} catch (Exception e) {System.out.println("Error al generar id session");}

		
		msj = "";
		idMail = "";
		try 
		{
			putMovimientosStocksATransito(idEmpresa);
		} 
		catch (Exception e) {System.out.println("Error grabando movimientos de stock");}
		try 
		{
			putMovimientosStocksAEncuentra(idEmpresa);

		}
		catch (Exception e) {System.out.println("Error transfiriendo albaranes a encuentra");}
		try 
		{
			
			Hashtable<Integer,pedidoFactura> pedidos = putFacturacion(idEmpresa, idSession);
			BuscarFacturas(pedidos);
		} 
		catch (Exception e) {System.out.println("Error grabando facturas");}

		try {
			if(!msj.equals("")) {
				//MailErrores(idMail, msj);
			}				
		} catch (Exception e) {System.out.println("Error enviando mail de errores");}
		
		try 
		{
			Thread.sleep(60000);
		} 
		catch (InterruptedException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	
	public void putMovimientosStocksATransito(int idEmpresa)
	{//verEstadoAlbaranesFiltrados(int filtro, ArrayList<Integer> ids)
		try {
			List<MovStock> movs = lo.queuePendingMovsStock(idEmpresa,0);
			
			for(MovStock mov:movs) {
				//try {
					int idAlbaran = 0;
					if(mov.getDoc() == 0) {
						List<ArticuloCantidadEncuentra> arts = new ArrayList<ArticuloCantidadEncuentra>();
						for(DataIDDescripcion det : mov.getDetalle()) {
							Cliente cli = new Cliente();
							String consulta = "SELECT clicedula FROM ecommerce_import_venta eiv WHERE eiv.idVenta = "+mov.getOrigenDoc()+" AND eiv.IdEmpresa = "+idEmpresa+";";
						
							String ci = _EncuentraConexionAPI2.obtenerCIPedido(consulta, idEmpresa);
							cli.setDocumentoNro(ci);
							ArticuloCantidadEncuentra ace = new ArticuloCantidadEncuentra(det.getId(), mov.getOrigen(), det.getDescripcion(), cli);
							arts.add(ace);
						}
						PedidoAlbaran pa = new PedidoAlbaran(arts, mov.getDestino());
						List<Integer> idsAlbaranes = coli.crearAlbaranInterno(pa);
						if(idsAlbaranes.size() == 0) {
							lo.RegistrarDocMovimientoStock(0,  mov.getId(), mov.getDoc(), "Fallo al generar albaran", idEmpresa,0, mov.getIntentos()+1);
							//notificacion de errores
							msj += "Fallo al generar albaran, id movimiento: "+ mov.getId() + " \r\n";
							idMail = mov.getOrigenDoc()+"";
						} else {
							idAlbaran = idsAlbaranes.get(0);
						}
					} else {
						idAlbaran = mov.getDoc();
					}
					//comprobar lo de la entrega = 1
					if(idAlbaran > 0) {
						EstadoAlbaranes estadoConfirmado = coli.verEstadoAlbaranesFiltrados(2, idAlbaran);
						if(estadoConfirmado != null) {
							//guardar como confirmado
							lo.RegistrarDocMovimientoStock(0,  mov.getId(), idAlbaran, "Listo para transferir",
									idEmpresa,0,mov.getIntentos());
							//transferir a transito
							int idNuevo = coli.transferir_aTransito_nuevo(idAlbaran);
							EstadoAlbaranes estado = coli.verEstadoAlbaranesFiltrados(3, idAlbaran);
							if(estado == null && idNuevo <=0) {
								lo.RegistrarDocMovimientoStock(0,  mov.getId(), idAlbaran, "Fallo al intentar transferir a transito", idEmpresa,0, mov.getIntentos()+1);
								//notificacion de errores
								msj += "Fallo al intentar transferir a transito, id movimiento: "+ mov.getId() + ", id del albaran: " + idAlbaran + " \r\n";
								idMail = mov.getOrigenDoc()+"";
							} else {
								lo.RegistrarDocMovimientoStock(1,  mov.getId(), idNuevo, "OK",
										idEmpresa,0,mov.getIntentos()+1);
								//insertar en la otra tabla con estado 0 si entrega es = 1
								if(mov.isEntrega()) {
									lo.RegistrarConfirmacionTransferencia(mov.getOrigen(), mov.getDestino(), mov.getIdUsuario(), mov.getDetalle(), idEmpresa, mov.getOrigenDoc(), 
											mov.getDocSolicitud(), mov.getRazon(), idAlbaran); //no iria idNuevo?
								}
								mov.setEstado(1);
							}
						} else {
							EstadoAlbaranes estadoSinConfirmar = coli.verEstadoAlbaranesFiltrados(1, idAlbaran);
							if(estadoSinConfirmar != null) {
								lo.RegistrarDocMovimientoStock(0,  mov.getId(), idAlbaran, "No se pudieron reservar los articulos",
										idEmpresa,0,mov.getIntentos()+1);
							}
						}
					}	
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
	}
	
	public void putMovimientosStocksAEncuentra(int idEmpresa) 
	{
		List<MovStock> movs = lo.queueConfirmacionTransferencia(idEmpresa); 
		try {
			for(MovStock mov:movs) {
				int idAlbaran = mov.getDoc();
				int idAlbaranTransferido = coli.recibirAlbaran(idAlbaran, false);
				if(idAlbaranTransferido > 0) {
					EstadoAlbaranes estadoREC = coli.verEstadoAlbaranesFiltrados(3, idAlbaranTransferido);
					if(estadoREC == null) {
						lo.RegistrarEstadoConfirmacionTransferencia(false, mov.getId(), "Fallo al intentar transferir a Encuentra", idEmpresa, 0, mov.getIntentos()+1);
						msj += "Fallo al intentar transferir a encuentra, id movimiento: "+ mov.getId() + ", id del albaran: " + idAlbaran + " \r\n";
						idMail = mov.getOrigenDoc()+"";
					} else {
						lo.RegistrarEstadoConfirmacionTransferencia(true, idAlbaranTransferido, "OK", idEmpresa, 0, mov.getIntentos()+1);
						System.out.println("Se hizo la transeferencia a Encuentra");
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public  Hashtable<Integer,pedidoFactura> putFacturacion(int idEmpresa, int idSession) 
	{
		Hashtable<Integer,pedidoFactura> pedidos = new Hashtable<Integer, pedidoFactura>();
		List<OrdenVenta> ordenes = lo.darOrdensSinFacturar(idEmpresa);
		//List<pedidoFactura> facturas = new ArrayList<pedidoFactura>();
		DataIDDescripcion respLaIsla;
		for(OrdenVenta o:ordenes) 
		{
			try 
			{
				Cliente c= lo.darCliente(o.getIdCarrito(), idEmpresa);
				
				if(idSession <= 0) 
				{
					idSession = generarIDSession();
				}
				
				if(idSession > 0) {
					//TRAIGO ORDEN DE FENICIO
					Orden of = OrdenVentaFenicio(o.getIdCarrito());
					try {
						if(of.getComprador().getDocumento().getTipo().equalsIgnoreCase("PASAPORTE")) {
							of.getComprador().getDocumento().setNumero(o.getCliCedula());
						}
					} catch (Exception e) {
						System.out.println("Cliente sin documento");
					}
					
					//BUSCO FORMAS DE PAGO Y DESCUENTOS
					BillingEntities billing_entities = obtenerPagoOdoo(of);			
					//MAPEO LOS ARTICULOS
					lo.getMapeoArticulosfenicio(of.getLineas(), idEmpresa);
					
					//FACTURO
					respLaIsla = coli.facturarPedido(of, billing_entities, idSession);					
					
					lo.RegistrarFactura(o.getIdCarrito(), respLaIsla.getId(), idEmpresa,respLaIsla.getDescripcion());
					if(respLaIsla.getId()!=0) {							
						lo.SincronizarCliente(c.getDocumentoNro(), idEmpresa);
						//pedidoFactura pf = new pedidoFactura(o.getIdCarrito(), respLaIsla.getId());
						pedidoFactura pf = new pedidoFactura(o.getIdCarrito(), respLaIsla.getId());
						pf.setPdf("https://laisla.quanam.com/report/pdf/point_of_sale_invoice.report_venta_document/"+
								respLaIsla.getId());
						//facturas.add(pf);
						pedidos.put(respLaIsla.getId(), pf);
					}
					else {						
						//notificacion de errores
						msj += respLaIsla.getDescripcion()+" \r\n"; //YO LE CARGO EL TICKET STR
						idMail = o.getIdCarrito()+"";
					}
					
					/*if(facturas.size() > 0) {
						Call_WS_APIENCUENTRA cwa = new Call_WS_APIENCUENTRA();
						cwa.putFacturas(token, facturas);
					}*/
					
					
				} else {
					break;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		return pedidos;
	}
	

	public void BuscarFacturas(Hashtable<Integer,pedidoFactura> pedidos) {
		
		//miro si hay facturas sin pdf
		//pedidos = lo.pedidosSinFactura(pedidos);
		
		//voy a buscar las facturas a visual
		//pedidos = lo.facturasVisual(pedidos);
		
		//persisto pdfs en bd
		List<pedidoFactura> listaPedidos= new ArrayList<pedidoFactura>(pedidos.values());
		//lo.guardarFacturas(listaPedidos);
		
		//envio facturas a WMS
		Call_WS_APIENCUENTRA api = new Call_WS_APIENCUENTRA();
		api.putFacturas(token, listaPedidos);
	}


	public void MailErrores(String idMail,String msj) {
		String bodyName = msj;
		SendMail mail = new SendMail("LA ISLA"+idMail, "onviera@200.com.uy,gmonzon@200.com.uy", "Error en sincro de pedidos - LA ISLA", bodyName, "encuentra@200.com.uy");
		SendMailSpooler mails = new SendMailSpooler();
		mails.setMails(new SendMail[]{mail});
		
		LogicaAPI.PutMailSpooler(mails.getMails(), 6);
	}
	
	public Orden OrdenVentaFenicio(Long idOrden){
		Orden of = null;
		try 
		{
			//PropertiesHelper ph = new PropertiesHelper("paths");
			LogicaAPI log = new LogicaAPI();
			Call_WS_APIENCUENTRA cwa = new Call_WS_APIENCUENTRA();
	    	//ph.loadProperties();
	    	//String api_host = ph.getValue("api");
			String token_API=log.darToken(6,6000);		
			//String host = api_host;
			//String jsonEP = cwa.callWSGET("http://"+host+"/encuentraAPI/Integraciones/another/getFenicioOrder?token="+token_API+"&orden="+idOrden+"&canal=0",false);
			String jsonEP = cwa.callWSGET("https://laisla.com.uy/API_V1/ordenes/"+idOrden, false);
			
			
			Gson gson = new Gson();
			
			String[] parts = jsonEP.split("\"orden\":");
			String orden = parts[1].substring(0, parts[1].length()-1);
		
			of = gson.fromJson(orden , Orden.class);				
		} 
		catch (Exception e) 
		{
			e.printStackTrace();				
		}
		return of;
	}
	
	public BillingEntities obtenerPagoOdoo(Orden of) 
	{
		try 
		{
			BillingEntities billing_entities = pagoFenicio(of);
			_EncuentraConexionAPI2.darMapeoFormaPago(billing_entities.getMetodos_pagos());
			if(!billing_entities.getDescuentos().isEmpty()) {
				_EncuentraConexionAPI2.darMapeoDescuento(billing_entities.getDescuentos());
			}			
			return billing_entities;			
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			return null;
		}
	}
	
	public BillingEntities pagoFenicio(Orden of) {
		String tarjetaUsa = "error";
		boolean esSantander = false;
		int descuento = 0;
		BillingEntities billing_entities = new BillingEntities();
		try {
			if(of != null && of.getPago() != null) {				
				
				
				String formaPago = of.getPago().getCodigo().toLowerCase();
				String conector = of.getPago().getConector().toLowerCase();
				int nroCuotas = Integer.parseInt(of.getPago().getCuotas());
				String origen = of.getOrigen().toLowerCase();
				String claveComp = formaPago+":"+conector;
				
				
				Lineas[] lineas = of.getLineas();
				//Descuento[] array_descuentos = (lineas[0].getDescuentos() != null ? lineas[0].getDescuentos() : null);
				/*List<Descuento> descuentos = Arrays.asList(array_descuentos);
				DataIDDescripcion salidaLambda = new DataIDDescripcion();
				
				descuentos.stream()
				.filter((x) -> x.getNombre().toLowerCase().contains("santander"))
				.forEach((n) -> 
				{
					salidaLambda.setIn(true);	// esSantander?
					try {
						salidaLambda.setId(Integer.parseInt(n.getNombre().split("%")[0]));	//descuento
					} catch (Exception e) {
						salidaLambda.setId(0);
					}					
				});
				
				esSantander = salidaLambda.isIn();
				descuento = salidaLambda.getId();*/
				Double amount = Double.parseDouble(of.getImporteTotal());
				Double amount_gift = 0.0;
				
				try {
					Hashtable<String, Descuento> descuentosHT = new Hashtable<String, Descuento>();
					for(Lineas l: lineas) {	
						if(l.getDescuentos( )!= null) {
							List<Descuento> descuentoProducto = new ArrayList<Descuento>();
							for(Descuento d: l.getDescuentos()) {
								if (d.getOrigen().equalsIgnoreCase("PRODUCTO")) {
									descuentoProducto.add(d);
								}
								else {
									if(descuentosHT.get(d.getNombre()) == null){
										descuentosHT.put(d.getNombre(), d);
									}
									else {						
										Double monto = Double.parseDouble(d.getMonto()) + Double.parseDouble(descuentosHT.get(d.getNombre()).getMonto());
										descuentosHT.get(d.getNombre()).setMonto(monto+"");
									}
								}								
							}
							l.setDescuentos(descuentoProducto.toArray(new Descuento[descuentoProducto.size()]));
						}						
					}	
					
					List<Descuento> descuentos = new ArrayList<Descuento>(descuentosHT.values());				
					for(Descuento d: descuentos) {
						if(d.getOrigen().equalsIgnoreCase("MEDIO_DE_PAGO")) {	//es un metodo de pago 
							if(d.getNombre().toLowerCase().contains("santander")) {
								esSantander = true;
								descuento = Integer.parseInt(d.getNombre().split("%")[0]);
								switch(claveComp) {
								case "master:plexo": 
									//esSantander = primera.getNombre().toLowerCase().contains("santander"); //Tengo que verificar que 
									if(esSantander && nroCuotas > 1) {								//tenga descuento santander ya que el mapeo es distinto
										tarjetaUsa = "MASTER SANTANDER CREDITO";
									} else if (esSantander && nroCuotas == 1) {
										tarjetaUsa = "MASTER SANTANDER DEBITO";
									}
									break;
								case "visa:plexo":
									//esSantander = primera.getNombre().toLowerCase().contains("santander");
									if(esSantander && nroCuotas > 1) {
										tarjetaUsa = "VISA SANTANDER CREDITO";
									} else if (esSantander && nroCuotas == 1) {
										tarjetaUsa = "VISA SANTANDER DEBITO";
									}
									break;
								}
								billing_entities.getMetodos_pagos().add(new MetodoPago(0, tarjetaUsa, null, amount));
								d.setCodigo(descuento+" - "+tarjetaUsa);
								billing_entities.getDescuentos().add(d);
							}
						}
						else if (d.getOrigen().equalsIgnoreCase("CUPON")){	//puede ser un cupon o una gift card (las gift card se computan como metodo de pago)
							if(d.getNombre().contains("%")) {	//es un cupon
								d.setCodigo("Diferencia de Precio");
								billing_entities.getDescuentos().add(d);
							}
							else {		//es una gift card
								billing_entities.getMetodos_pagos().add(new MetodoPago(0, "GIFT-CARD", d.getCodigo(), Double.parseDouble(d.getMonto())));
							}
						}
					}
				} catch (Exception e) {
					System.out.println("Error buscando metodos de pagos y descuentos");
				}
				
				
				tarjetaUsa = "";
				if(!esSantander) {
					switch(claveComp) { //Concateno la forma de pago con el conector, en base a esto filtro con el switch
					case "amex:amex": 
						tarjetaUsa = "AMEX";
						break;
					case "redpagos:cobrosya":  //No los hago genericos por si cambia con alguna otra forma de pago el conector
						tarjetaUsa = "COBROS YA";
						break;
					case "ebrou:cobrosya": 
						tarjetaUsa = "COBROS YA";
						break;
					case "bbvanet:cobrosya": 
						tarjetaUsa = "COBROS YA";
						break;
					case "master:plexo": 
						//esSantander = primera.getNombre().toLowerCase().contains("santander"); //Tengo que verificar que 
						if (nroCuotas > 1) { // De acuerdo a las cuotas cambia la forma de pago
							tarjetaUsa = "MASTER CREDITO";
						} else if (nroCuotas == 1) {
							tarjetaUsa = "MASTER DEBITO";
						}
						break;
					case "mercadopago:mercadopago": 
						tarjetaUsa = "MERCADOPAGO";
						break;
					case ":fenicio":
						tarjetaUsa = origen.contains("mercadolibre") ? "MERCADOLIBRE" : "error";
						break;
					case "oca:plexo":
						tarjetaUsa = "OCA";
						break;
					case "visa:plexo":
						//esSantander = primera.getNombre().toLowerCase().contains("santander");
						tarjetaUsa = "VISA";
						
						break;
					default:
						//mandar mail cuando entre aca
						tarjetaUsa = "PAGO WEB";
						break;
						
						
					//******** Faltan los mapeos de las ordenes viejas
					
					}
				}				
				
				if(tarjetaUsa.equalsIgnoreCase("error")) {
					System.out.println("No se encontro forma de pago para esta orden.");
					//persistir en bd en el comentario de la orden
				}
				if(!tarjetaUsa.equalsIgnoreCase("")) {
					billing_entities.getMetodos_pagos().add(new MetodoPago(0, tarjetaUsa, null,amount));
				}
			}
		} catch(Exception e) {
			tarjetaUsa = "PAGO WEB";
			e.printStackTrace();
		}
		
		return billing_entities;
	}
	
	public int generarIDSession() {
		int idSession = -1;
		String fecha = "";
		try {
			fecha = _EncuentraConexionAPI2.darFechatokenApi("SELECT obtenido from apitoken_cliente where idCliente = 99 and idEmpresa = 6 and token <> 0 and token <> -1;");
			
			if(fecha != null) {
				String[] fechaHora = fecha.split(" ");
				String[] fechas = fechaHora[0].split("-");
				LocalDate fechaCreado = LocalDate.of(Integer.parseInt(fechas[0]), Integer.parseInt(fechas[1]), Integer.parseInt(fechas[2]));
				String[] horas = fechaHora[1].split(":");
				LocalTime horaCreado = LocalTime.of(Integer.parseInt(horas[0]), Integer.parseInt(horas[1]));
				LocalDateTime seCreoToken = LocalDateTime.of(fechaCreado, horaCreado);
				
				int diaDespues = Integer.parseInt(fechas[2]) + 1;
				int mesDespues = Integer.parseInt(fechas[1]);
				int anioDespues = Integer.parseInt(fechas[0]);
				switch (mesDespues) {
				case 1:
				case 3:
				case 5:
				case 7:
				case 8:
				case 10:
				case 12:
					if(diaDespues > 31) {
						diaDespues = diaDespues - 31;
						mesDespues = mesDespues + 1;
					}
					if(mesDespues == 12) {
						mesDespues = 1;
						anioDespues = anioDespues +1;
					}
					
					break;
				case 4:				
				case 6:				
				case 9:				
				case 11:		
					if(diaDespues > 30) {
						diaDespues = diaDespues - 30;
						mesDespues = mesDespues + 1;
					}
					break;
				case 2:
					if(diaDespues > 28) {
						diaDespues = diaDespues -28;
						mesDespues = mesDespues + 1;
					}
					break;

				default:
					break;
				}
				LocalDate diaVencimiento = LocalDate.of(anioDespues, mesDespues, diaDespues);
				LocalTime horaVencimiento = LocalTime.of(1, 30);
				LocalDateTime vencimiento = LocalDateTime.of(diaVencimiento, horaVencimiento);
				
				System.out.println("diferencia minutos: "+ChronoUnit.MINUTES.between(vencimiento, LocalDateTime.now()));
				if(ChronoUnit.MINUTES.between(vencimiento, LocalDateTime.now()) > 0) {
					idSession = Integer.parseInt(_EncuentraConexionAPI2.dartokenApi("SELECT token from apitoken_cliente where idCliente = 99 and idEmpresa = 6;"));
					coli.cerrarSesion(idSession);
					_EncuentraConexionAPI2.persistir("DELETE FROM apitoken_cliente WHERE idCliente = 99 and idEmpresa = 6;");
					System.out.println("Cerre session");
				} else {
					idSession = Integer.parseInt(_EncuentraConexionAPI2.dartokenApi("SELECT token from apitoken_cliente where idCliente = 99 and idEmpresa = 6;"));
					System.out.println("Session valida");
				}
			} else {
				idSession = coli.abrirSession();
				if(idSession!=0 && idSession!=-1) {
					_EncuentraConexionAPI2.persistir("INSERT INTO apitoken_cliente (idCliente, token, idEmpresa) VALUES (99, '"+idSession+"', 6) ON DUPLICATE KEY UPDATE token = '"+idSession+"';");
					System.out.println("Abriendo session de pos");
				}
				else {
					System.out.println("No se pudo abrir session de pos");
				}
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return idSession;
	}
	
	/*public void LimpiarListaArticulos (Orden o) {
		for(Lineas l: o.getLineas())
		{
			System.out.println("OLD SKU ==> "+o.getLineas()[i].getSku());
			o.getLineas()[i].setSku(ov.getOrdenVentaLineas().get(i).getIdArticulo());
			System.out.println("NEW SKU ==> "+o.getLineas()[i].getSku());
		}
	}*/
}
