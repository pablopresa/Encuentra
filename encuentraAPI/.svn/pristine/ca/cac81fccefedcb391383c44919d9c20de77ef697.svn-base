package marketPlaceIntegrations.orderDerivation;



import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import beans.encuentra.EncuentraPedido;
import beans.encuentra.EncuentraPedidoArticulo;
import beans.encuentra.EncuentraPedidoArticuloReq;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import dataTypes.DataIDDescripcion;
import logica.LogicaAPI;
import marketPlaceIntegrations.Fenicio.FenicioLAISLA;

public class OrderDerivator 
{

	public OrderDerivator() {
	}




	public static void main(String[] args) 
	{
		FenicioLAISLA f = new FenicioLAISLA();
		LogicaAPI logica = new LogicaAPI();
		String token = logica.darToken(f.getIdEmpresa());
		
		Call_WS_APIENCUENTRA cen = new Call_WS_APIENCUENTRA();
		List<Deposito> depositos = cen.vistaDepositos(f.getIdEmpresa());
		
		//por cada venta me guardo los articulos en un hash
		//armo la consulta de stock
		
		
		Collections.sort(depositos);
		
		
		for (Deposito d : depositos) 
		{
			System.out.println(d.getId());
		}
		
		List<DataIDDescripcion> lista = new ArrayList<DataIDDescripcion>();
		DataIDDescripcion a = new DataIDDescripcion(1,"0A31J1BLK-U");
		DataIDDescripcion b = new DataIDDescripcion(1,"33531305-U");
		DataIDDescripcion c = new DataIDDescripcion(1,"A31J1Y28-U");
		
		lista.add(a);
		lista.add(b);
		lista.add(c);
		List<DepositoStock> stock = cen.darDepositos(lista,token);
		
		
		
		
		
	}
	
	
	public  List<EncuentraPedido> derivar (List<EncuentraPedido> retorno,Call_WS_APIENCUENTRA cen, String token,List<DepositoStock> stock)  
	{
		
		
		
		
		for (EncuentraPedido pe : retorno) 
		{
			
			if(derivaPickup(pe, stock))
			{
				for (DepositoStock ds : stock) 
				{
					if(ds.getIdDeposito()==pe.getIdDepositoEnvio())
					{
						
						for (EncuentraPedidoArticulo art : pe.getArticulosPedido()) 
						{
							for (DataIDDescripcion ar : ds.getArticulos()) 
							{
								if(ar.getDescripcion().equals(art.getArticulo()))
								{
									art.setOrigen(ds.getIdDeposito());
									art.setClickCollect(true);
									pe.setPreparaTienda(true);
									ar.setId(ar.getId()-art.getCantidad());
									
								}//if
							}//for art stock
							
						}//for art pedido
					}//for depo
				}//for stock
			}//if
			else
			{
				List<EncuentraPedidoArticulo> articulos = new ArrayList<EncuentraPedidoArticulo>();
				for (EncuentraPedidoArticulo art :pe.getArticulosPedido()) 
				{
					int cantidadReq=art.getCantidad();
					String a = art.getArticulo();
					int cantidadPendiente = art.getCantidad();
					
					for (DepositoStock ds : stock) 
					{
						if(ds.isPreparaEnvioCD())
						{
							for (DataIDDescripcion as :ds.getArticulos()) 
							{
								if(as.getDescripcion().equals(a))
								{
									if(as.getId()>=cantidadReq)
									{
										//messirve ;)
										art.setOrigen(ds.getIdDeposito());
										articulos.add(art);
										as.setId(as.getId()-cantidadReq);
										cantidadPendiente-=cantidadReq;
										break;
										
									}
									else if(as.getId()>0)
									{
										try
										{
											EncuentraPedidoArticulo n = (EncuentraPedidoArticulo) art.clone();
											n.setCantidad(as.getId());
											n.setOrigen(ds.getIdDeposito());
											
											as.setId(0);
											cantidadPendiente-=as.getId();
											break;
										}
										catch (Exception e) {
											// TODO: handle exception
										}
									}
								}
							}
						}
						
						
						if (cantidadPendiente==0)
						{
							break;
						}
							
					}
					
					if (cantidadPendiente>0)
					{
						try
						{
							EncuentraPedidoArticulo n = (EncuentraPedidoArticulo) art.clone();
							n.setOrigen(0);
						}
						catch (Exception e) {
							// TODO: handle exception
						}
						
					}
					
				}
				
				pe.setArticulosPedido(articulos);
			}
			
			
			System.out.println("");
		}
		return retorno;
	}
	
	private boolean derivaPickup (EncuentraPedido pe, List<DepositoStock> stock)
	{
		
		
		int idDestino = pe.getIdDepositoEnvio();
		String firma = "";
		String firmaB="";
		for (EncuentraPedidoArticulo a : pe.getArticulosPedido()) 
		{
			firma+=a.getCantidad()+a.getArticulo();
		}
		for (DepositoStock ds : stock) 
		{
			if(ds.getIdDeposito()==idDestino)
			{
				if(ds.isPreparaPickup() || ds.isPreparaDelivery())
				{
					for (EncuentraPedidoArticulo a : pe.getArticulosPedido()) 
					{
						for (DataIDDescripcion ar : ds.getArticulos()) 
						{
							
							if(ar.getDescripcion().equals(a.getArticulo()) && ar.getId()>=a.getCantidad())
							{
								firmaB+=a.getCantidad()+a.getArticulo();
							}
						}
					}
				}
			}
		}
		
		if(firma.equals(firmaB))
		{
			return true;
		}
		
		
		return false;
	}
		
		
	
	

}
