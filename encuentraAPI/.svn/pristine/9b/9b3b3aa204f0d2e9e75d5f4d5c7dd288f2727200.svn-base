package logica;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Base64;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.PDFTextStripperByArea;

import dataTypes.DataDescDescripcion;
import helper.PropertiesHelperAPI;

public class Util 
{
	public Util(){}
	

	public String removerTildes(String cadena) {
	    return cadena.replace("Á", "A")
	            .replace("É", "E")
	            .replace("Í", "I")
	            .replace("Ó", "O") 
	            .replace("Ú", "U")
	            .replace("á", "a")
	            .replace("é", "e")
	            .replace("í", "i")
	            .replace("ó", "o")
	            .replace("ú", "u");
	}
	
	public double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        long factor = (long) Math.pow(10, places);
        value = value * factor;
        long tmp = Math.round(value);
        return (double) tmp / factor;
    }
	
	public static String base64ToPdf(String base64, String name) {
		try
		{
			PropertiesHelperAPI pH=new PropertiesHelperAPI("paths");
			pH.loadProperties();
			String path = pH.getValue("pdf");
			String filePath = path+"/"+name+".pdf";
			path = pH.getValue("HTTP_pdf");
			String htmlPath = path+"/"+name+".pdf";
			
			 // Encode using basic encoder
	         //String base64encodedString = retorno.getPdfserializado();
	         
	         System.out.println("Base64 encoded string :" + base64);

	         // Decode
	         byte[] base64decodedBytes = Base64.getDecoder().decode(base64);

			 File file = new File(filePath);
	         file.delete();
	         
	         FileOutputStream fos = new FileOutputStream(new File(filePath));
	         
	         String str = base64;
	         
	         InputStream in = new ByteArrayInputStream(base64decodedBytes);
	         
	         int inByte;
	            while ((inByte = in.read()) != -1) {
	                fos.write(inByte);
	            }
	 
	            in.close();            
	         
	         fos.write(str.getBytes());	         
	         
	         fos.close();	         
	         
	         return htmlPath;				
		}
		catch (Exception e) 
		{
		 e.printStackTrace();
		 return "";
		}
	}
	
	public static String bytesToPdf(byte[] base, String name) {
		try
		{
			PropertiesHelperAPI pH=new PropertiesHelperAPI("paths");
			pH.loadProperties();
			String path = pH.getValue("pdf");
			String filePath = path+"/"+name+".pdf";
			path = pH.getValue("HTTP_pdf");
			String htmlPath = path+"/"+name+".pdf";
			
			 // Encode using basic encoder
	         //String base64encodedString = retorno.getPdfserializado();
	         
	         System.out.println("bytes[] :" + base);

	         // Decode
	         //byte[] base64decodedBytes = Base64.getDecoder().decode(base);

			 File file = new File(filePath);
	         file.delete();
	         
	         FileOutputStream fos = new FileOutputStream(new File(filePath));
	         
	         //String str = base64;
	         
	         InputStream in = new ByteArrayInputStream(base);
	         
	         int inByte;
	            while ((inByte = in.read()) != -1) {
	                fos.write(inByte);
	            }
	 
	            in.close();            
	         
	         //fos.write(str.getBytes());	         
	         
	         fos.close();	         
	         
	         return htmlPath;				
		}
		catch (Exception e) 
		{
		 e.printStackTrace();
		 return "";
		}
	}
	
	public static String saltoDeLinea(String texto, int tope) {
		String salida = "";
		
		try {
			String[] coleccion = texto.split(" ");
			if(coleccion.length>tope){						
				for(int i = 0; i < coleccion.length; i++){					
					salida += coleccion[i] + " ";
					if( (i+1) % tope == 0) {
						salida += "<br>";
					}
				}
			}
			else {
				salida = texto;
			}
		} catch (Exception e) {
			salida = texto;
		}
		
		return salida;
	}
	
	public String validarString(String texto) {
		if(texto.contains("\'")) {
			texto = texto.replace('\'',' ');
		}
		if(texto.contains("\"")) {
			texto = texto.replace('\"',' ');
		}
		if(texto.contains("\\")) {
			texto = texto.replace('\\',' ');
		}
		return texto;
	}
	
}
