package aTest;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;

import beans.api.ImpresionesPDF_API;
import beans.encuentra.Clientes;
import beans.encuentra.EncuentraPedido;
import beans.encuentra.EncuentraPedidoArticulo;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import clienteLaIsla.ArticuloCantidadEncuentra;
import clienteLaIsla.ClienteOdoo_LaIsla;
import clienteLaIsla.LaIsla;
import clienteLaIsla.StockArticulos;
import clienteLaIsla.mainLaisLa;
import dataTypes.DataIDDescripcion;
import dataTypes.StockDeposito;
import fenicioAPI.Orden;
import logica.LogicaAPI;
import marketPlaceIntegrations.CanalMarketPlace;
import marketPlaceIntegrations.Fenicio.FenicioLAISLA;
import marketPlaceIntegrations.orderDerivation.DepositoStock;
import marketPlaceIntegrations.orderDerivation.OrderDerivator;

public class ClienteLAISLAFenicio 
{
 
	public static void main(String[] args) 
	{
		FenicioLAISLA f = new FenicioLAISLA();
		Hashtable<Integer, Integer> mapeoTiendas = new Hashtable<Integer, Integer>();
		mapeoTiendas.put(3,91);
		mapeoTiendas.put(2,127);
		mapeoTiendas.put(4,133);
		mapeoTiendas.put(7,121);
		mapeoTiendas.put(6,115);
		mapeoTiendas.put(8,139);
		mapeoTiendas.put(5,103);
		mapeoTiendas.put(10,0);
		mapeoTiendas.put(9,0);
		
		
		
		
		
		 Hashtable<Integer, CanalMarketPlace> canales = f.getCanales();
		 
		 List<CanalMarketPlace> canalesL = new ArrayList<CanalMarketPlace> (canales.values());
		 
		 LogicaAPI logica = new LogicaAPI();
		 String token = logica.darToken(f.getIdEmpresa());
		 Call_WS_APIENCUENTRA cen = new Call_WS_APIENCUENTRA();
		 Hashtable<Integer, String> parametros = cen.darParametros(token);
		 
		 int id_de_Deposito_Ecommerce =  158;//Integer.parseInt(parametros.get(5));
		 int id_de_Deposito_Central = Integer.parseInt(parametros.get(4));
		 int diasBusqueda = 2;
		 
		 List<String> dirtySKUs = new ArrayList<String>();
		 
		 for (CanalMarketPlace canal : canalesL) 
		 {
			 
			 List<EncuentraPedido> pedidosALL = f.getPedidos(canal.getId(),"",diasBusqueda);
			 Hashtable<String, String> pedidosEncuentra = cen.PedidosID(token, diasBusqueda);
			 List<EncuentraPedido> pedidos = new ArrayList<EncuentraPedido>();
			 for (EncuentraPedido p : pedidosALL) 
			 {
				 if(!pedidosEncuentra.containsKey(p.getIdPedido()+""))
				 {
					 pedidos.add(p);
				 }
			 }
			 
			 
			 for (EncuentraPedido p : pedidos) 
			 {
				
				 
					 Clientes clien = p.getCliente().transformar(p.getCliente(), f.getIdEmpresa());
					 clien.setIdPedido(p.getIdFenicio());
					 clien.save();
					 for (EncuentraPedidoArticulo a : p.getArticulosPedido()) 
					 {
						 try
						 {
							 String [] arreglo = a.getCodFenicio().split(":");
							 //1:HOME-OLABAS:HOME-OLABAS:UNI:1
							 //0 1			 2			 3	 4
							 String sKU  = "";
							 String variacion = "";
							 
							 if(arreglo[2].equals(arreglo[1]))
							 {
								 sKU = arreglo[2];
								 variacion = arreglo[3];
								 
							 }
							 else
							 {
								 sKU = arreglo[1]+"-"+arreglo[2];
								 variacion = arreglo[3];
							 }
							 
							 dirtySKUs.add(sKU+":"+variacion);
						 }
						 catch (Exception e) 
						 {
							System.out.println(a.getCodFenicio());
						 }
					 }
				 
				 
			 }
			 
			 Hashtable<String, String> skuMapper = cen.searchSKU(token, dirtySKUs);
			 
			 
			 Hashtable<String, String> articulos = new Hashtable<String, String>();
			 for (EncuentraPedido p : pedidos) 
			 {
				 	 int contador = 0;
					 for (EncuentraPedidoArticulo a : p.getArticulosPedido()) 
					 {
						 
						 try
						 {
							 String [] arreglo = a.getCodFenicio().split(":");
							 
							 //1:HOME-OLABAS:HOME-OLABAS:UNI:1
							 //0 1			 2			 3	 4
							 //1:CPAAM9:	64:			34:	 1
							 
							 
							 String sKU  = "";
							 String variacion = "";
							 
							 if(arreglo[2].equals(arreglo[1]))
							 {
							 
								 sKU = arreglo[2];
								 variacion = arreglo[3];
								 
							 }
							 else
							 {
								 sKU = arreglo[1]+"-"+arreglo[2];
								 variacion = arreglo[3];
							 }
							 
							 
							 String arti = skuMapper.get(sKU+":"+variacion);
							 
							 articulos.put(arti, arti);
							 a.setOrigen(1);
							 
							 a.setArticulo(arti);
							 
							 //SETTEAR EL OVL con el valor del str nuevo del idArticulo
							 p.getOrden().getOrdenVentaLineas().get(contador).setIdArticulo(arti);
						 }
						 catch (Exception e){
							
						 }
						 
						 contador++;
					 }
			 	
			 }
			 List<DataIDDescripcion> listaOK = cen.SaveOrders(token, pedidos);
			 
			 List<EncuentraPedido> pedidos2 = new ArrayList<EncuentraPedido>();
			 for (DataIDDescripcion pl : listaOK) 
			 {
				 for (EncuentraPedido p : pedidos) 
				 {
					if(((p.getIdPedido())+"").equals(pl.getDescripcion()))
					{
						if(pl.getDescripcionB().equals("OK"))
						{
							logica.mapeoArticulosfenicio(p.getArticulosPedido(),f.getIdEmpresa());
							pedidos2.add(p);
						}
					}
				 }
			 }
			 
			 
			 pedidos = new ArrayList<EncuentraPedido>();
			 pedidos = pedidos2;
			 
			 
			 List<DataIDDescripcion> depositosDestino =cen.DarDatosPutOrders(token, 2);
			 articulos = new Hashtable<String, String>();
			 for (EncuentraPedido p : pedidos) 
			 {
				 Orden ovf = f.OrdenVentaFenicio(p.getIdPedido(), f.getIdEmpresa(), 1);

				 for (EncuentraPedidoArticulo a : p.getArticulosPedido()) 
				 {
					 articulos.put(a.getArticulo(), a.getArticulo());
				 }
				 
				 try
				 {
					 boolean found = false;
					 if(ovf.getOrigen().equals("MERCADOLIBRE"))
					 {
						 p.setShippingType(new DataIDDescripcion(1, ""));
						 p.setIdDepositoEnvio(60);
						found=true;
						
					 }
					 else if(!p.getSucursalPick().equals(""))
					 {
						 //es pickup
						 p.setShippingType(new DataIDDescripcion(2, ""));
						 int idDepositoEnvio = Integer.parseInt(p.getSucursalPick());
						 try 
						 {
							idDepositoEnvio = mapeoTiendas.get(idDepositoEnvio) ;
						 }
						 catch (Exception e) 
						 {
							 idDepositoEnvio = Integer.parseInt(p.getSucursalPick());
						 
						 }
							
						 p.setIdDepositoEnvio(idDepositoEnvio);
						 found=true;
					 }
					 else
					 {
						 p.setShippingType(new DataIDDescripcion(1, ""));
						for (DataIDDescripcion d : depositosDestino) 
						 {
							if(d.getDescripcion().equals(p.getEmpresaEnvio()))
							{
								p.setIdDepositoEnvio(d.getId());
								found=true;
								break;
							}
						 }
					 }
					 if(!found)
					 {
						 if(ovf.getEntrega().getServicioEntrega()!=null  && ovf.getEntrega().getServicioEntrega().getNombre().equals("Retiro Sucursal Agencia Central"))
						 {
							 p.setShippingType(new DataIDDescripcion(1, ""));
							 p.setIdDepositoEnvio(50);
						 }
						 else
						 {
							 p.setShippingType(new DataIDDescripcion(1, ""));
							 System.out.println("No encontre "+p.getEmpresaEnvio());
							 p.setIdDepositoEnvio(0);
						 }
						 
					 }
				 }
				 catch (Exception e) 
				 {
					 p.setShippingType(new DataIDDescripcion(1, ""));
					 e.printStackTrace();
					 p.setIdDepositoEnvio(0);
				 }
			 }
			 
			 
			 
			 List<String> articulosS = new ArrayList<String>(articulos.values());
			 List<DataIDDescripcion> arts = new ArrayList<DataIDDescripcion>();
			 List<ArticuloCantidadEncuentra> artCantEnc = new ArrayList<ArticuloCantidadEncuentra>();
			 for (String a : articulosS) 
			 {
				 arts.add(new DataIDDescripcion(1, a));
				 ArticuloCantidadEncuentra ace = new ArticuloCantidadEncuentra(1.0, 0, a);
				 
				 artCantEnc.add(ace);
				 
			 }
			 
			 ClienteOdoo_LaIsla cLIS = new ClienteOdoo_LaIsla(false);
			 
			
			 List<StockArticulos> stockOdoo = cLIS.buscarStockArticulo(artCantEnc);
			 List<StockDeposito> stockOdoD = new ArrayList<StockDeposito>();
			 for (StockArticulos s : stockOdoo) 
			{
				stockOdoD.add(new StockDeposito(""+s.getOrigen(), s.getIdArticulo(), Double.parseDouble(""+s.getStockDisponible())));
			}
			 cen.putStk(token,stockOdoD);
			 
			 
			 
			 List<DepositoStock> stock = cen.darDepositos(arts, token);
			 

			 System.out.println("");

			 OrderDerivator od = new OrderDerivator();
			 pedidos = od.derivar(pedidos, cen, token, stock);
			 
			 
			 
			 
			 
			 List<DataIDDescripcion> guardadas = cen.SaveOrdersArticulosReq(token, pedidos);
			 
			 
			 ImpresionesPDF_API ip = new ImpresionesPDF_API(f.getIdEmpresa());
			 Hashtable<Integer, List<EncuentraPedido>> pedidosTiendas = new Hashtable<Integer, List<EncuentraPedido>>();
			 
			
			 
			 for (EncuentraPedido p : pedidos) 
			 {
				 
				 
				 if(p.isPreparaTienda())
				 {
					 p.setShippingType(new DataIDDescripcion(3, ""));
				 }
				 cen.updateDestinoPedido(token, p, p.getIdDepositoEnvio(), p.getMontoEnvio());
				 
				 /************orden de venta************/
				 p.getOrden().save("", f.getIdEmpresa());
				 
				 
				 if(p.isPreparaTienda())
				 {
					 List<EncuentraPedido> lista = null;
					 if(pedidosTiendas.get(p.getArticulosPedido().get(0).getOrigen())==null)
					 {
						 lista = new  ArrayList<EncuentraPedido>();
						 
					 }
					 else
					 {
						lista = pedidosTiendas.get(p.getArticulosPedido().get(0).getOrigen()); 
					 }
					 lista.add(p);
					 pedidosTiendas.put(p.getArticulosPedido().get(0).getOrigen(),lista);
					 
				 }
				 else
				 {
					  /************movimiento de stock************/
					 boolean todosMismoOrigen=true;
					 boolean central = false;
					 int origenAnt=0;
					 boolean pri=true;
					 for (EncuentraPedidoArticulo arp : p.getArticulosPedido()) 
					 {
						 if(pri)
						 {
							 pri=false;
							 origenAnt=arp.getOrigen();
						 }
						 
						 
						 if(arp.getOrigen()!=id_de_Deposito_Central)
						 {
							 boolean confirmarMovimiento = false;
							 //158 deposito de transito
							 llamarMovimientoStock(arp, id_de_Deposito_Ecommerce, logica, ip, f.getIdEmpresa(), p.getIdPedido(), confirmarMovimiento );
						 }
						 else
						 {
							 central=true;
						 }
						
						 if(origenAnt!=arp.getOrigen())
						 {
							todosMismoOrigen=false;
						 }
						 
						origenAnt=arp.getOrigen();
					 }
					 
					 if(central && todosMismoOrigen)
					 {
						 for (EncuentraPedidoArticulo arp : p.getArticulosPedido()) 
						 {
							 boolean confirmarMovimiento = true;
							 llamarMovimientoStock(arp, id_de_Deposito_Ecommerce, logica, ip, f.getIdEmpresa(), p.getIdPedido(), confirmarMovimiento );
						 }
					 }
					 else if(central && !todosMismoOrigen)
					 {
						 for (EncuentraPedidoArticulo arp : p.getArticulosPedido()) 
						 {
							 
							 if(arp.getOrigen()==id_de_Deposito_Central)
							 {
								 boolean confirmarMovimiento = false;
								 llamarMovimientoStock(arp, id_de_Deposito_Ecommerce, logica, ip, f.getIdEmpresa(), p.getIdPedido(), confirmarMovimiento );
							 }
							 
						 }
					 } 
					 
					 
					 
						
				 }
			 }
			 
			 
			 	Set<Integer> keys = pedidosTiendas.keySet();
				for(Integer tienda: keys)
				{
					List<EncuentraPedido> pedidosTienda = pedidosTiendas.get(tienda);
					
					for (EncuentraPedido p : pedidosTienda) 
					{
						 /************movimiento de stock************/
						 List<DataIDDescripcion> movsStock = new ArrayList<DataIDDescripcion>();
						 for (EncuentraPedidoArticulo arp : p.getArticulosPedido()) 
						 {
							movsStock.add(new DataIDDescripcion(arp.getCantidad(), arp.getArticulo()));
						 }
						 
						//PERSISTO MOVIMIENTOS DE STOCK
						 boolean confirmarMovimiento = true;
						
						 int idMS = logica.RegistrarMovimientoStock(tienda, id_de_Deposito_Ecommerce, 0, movsStock, f.getIdEmpresa(), p.getIdPedido(), 0, 0, confirmarMovimiento);
						 ip.imprimirTicketMovStock(tienda, id_de_Deposito_Ecommerce, 0, "Para Venta WEB "+p.getIdPedido(), movsStock, idMS, tienda);
					}
					
					try 
					{
						ip.ImprimirPedidosArticuloReq(pedidosTienda, tienda);
					}
					catch (Exception e) 
					{
						e.printStackTrace();
					}
				}
			 
			 
			 
			 
			 
		 }
		 
		 
		 //LaIsla laisla = new LaIsla();
		 //laisla.mover();
		
		 
		 
		 
		 
	}
	
	static void llamarMovimientoStock(EncuentraPedidoArticulo arp, int id_de_Deposito_Ecommerce, LogicaAPI logica, ImpresionesPDF_API ip, int idEmpresa, Long idPedido, boolean confirmarMovimiento )
	{
		 List<DataIDDescripcion> movsStock = new ArrayList<DataIDDescripcion>();
		 movsStock.add(new DataIDDescripcion(arp.getCantidad(), arp.getArticulo()));
		 id_de_Deposito_Ecommerce = 158;
		 int idMS = logica.RegistrarMovimientoStock(arp.getOrigen(), id_de_Deposito_Ecommerce, 0, movsStock, idEmpresa, idPedido, 0, 0, confirmarMovimiento);
		 ip.imprimirTicketMovStock(arp.getOrigen(), id_de_Deposito_Ecommerce, 0, "Para Venta WEB "+idPedido, movsStock, idMS, arp.getOrigen());
	}
	
}

