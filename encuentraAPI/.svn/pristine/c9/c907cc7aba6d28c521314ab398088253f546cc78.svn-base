package integraciones.marketplaces.objetos;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;
import java.util.Hashtable;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;

import com.mashape.unirest.http.Unirest;

import beans.encuentra.EncuentraPedido;
import logica.LogicaAPI;
import okhttp3.FormBody;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class marketPlace implements marketPlaceInterface{
	protected int idEmpresa;
	protected int idMarketPlace; 
	protected Hashtable<Integer, CanalMarketPlace> canales;
	protected boolean etiquetaEnvios;
	protected boolean MovStocks;
	protected boolean ordenes;
	protected boolean matrizDisponibilidad;
	
	
	
	public int getIdMarketPlace() {
		return idMarketPlace;
	}



	public void setIdMarketPlace(int idMarketPlace) {
		this.idMarketPlace = idMarketPlace;
	}



	public int getIdEmpresa() {
		return idEmpresa;
	}



	public void setIdEmpresa(int idEmpresa) {
		this.idEmpresa = idEmpresa;
	}



	public Hashtable<Integer, CanalMarketPlace> getCanales() {
		return canales;
	}



	public void setCanales(Hashtable<Integer, CanalMarketPlace> canales) {
		this.canales = canales;
	}



	public boolean isEtiquetaEnvios() {
		return etiquetaEnvios;
	}



	public void setEtiquetaEnvios(boolean etiquetaEnvios) {
		this.etiquetaEnvios = etiquetaEnvios;
	}



	public boolean isMovStocks() {
		return MovStocks;
	}



	public void setMovStocks(boolean movStocks) {
		MovStocks = movStocks;
	}



	public boolean isOrdenes() {
		return ordenes;
	}



	public void setOrdenes(boolean ordenes) {
		this.ordenes = ordenes;
	}



	public boolean isMatrizDisponibilidad() {
		return matrizDisponibilidad;
	}



	public void setMatrizDisponibilidad(boolean matrizDisponibilidad) {
		this.matrizDisponibilidad = matrizDisponibilidad;
	}

	//SET DE CANALES
	protected void setCanales(){
		try {
			canales = LogicaAPI.canalesMarketPlace(this.idEmpresa, this.idMarketPlace);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}	

	//METODOS
	@Override
	public List<UpdateStateResponse> UpdateState(String json, int canal) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public List<EncuentraPedido> getPedidos(int canal) 
	{	
		return null;
	}
	
	//post unirest
	@Override
	public String callPostOKHttp(String urlFuncion, int canal, String json)
	{
		try
		{
			Unirest.setTimeouts(0, 0);
			
			String usu = this.canales.get(canal).getUser();
			String pass = this.canales.get(canal).getPass();

	       
	        String credencial = usu+ ":" + pass;
	        String base64 = new String(Base64.getEncoder().encode(credencial.getBytes()));
	        
	        
	        OkHttpClient client = new OkHttpClient().newBuilder()
	        		  .build();
	        MediaType mediaType = MediaType.parse("text/plain");
	        String cuerpo = "";
	        RequestBody body = null;
	        if(json != null) {
	        	body = new FormBody.Builder()
	                    .add("compras", json)
	                    .build();
	        }
	        else {
	        	body = RequestBody.create(mediaType, cuerpo);
	        }
	        		
	        		
	        		Request request = new Request.Builder()
	        		  .url(urlFuncion)
	        		  .method("POST", body)
	        		  .addHeader("Authorization", "Basic "+base64)
	        		  .addHeader("Cookie", "_FNID=vk4tmp9ibqnuta0uvc7erlpa90")
	        		  .build();
	        		Response response = client.newCall(request).execute();
	        
	        		
	        		int bytesRead = 0;
			          BufferedInputStream bis = new BufferedInputStream(response.body().byteStream());
			          byte[] contents = new byte[1024];
			          StringBuilder strFileContents = new StringBuilder(); 
			          while((bytesRead = bis.read(contents)) != -1) 
			          { 
			              strFileContents.append(new String(contents, 0, bytesRead));              
			          }
			          System.out.println(strFileContents);
			          response.close();
			          return strFileContents.toString();
			
		}
		catch (Exception e) 
		{
			return "";
		}
		
	}
	
	
	
}
