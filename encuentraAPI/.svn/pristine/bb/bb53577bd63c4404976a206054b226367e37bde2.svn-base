package endpoints;

import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import logica.LogicaAPI;


import com.google.gson.Gson;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;

import beans.Usuario;
import beans.api.EquiposPrintSpool;
import beans.api.json.PrintObject;
import beans.datatypes.DataIDDescripcion;

import integraciones.marketplaces.fenicio.RspFenicioAPI;
import integraciones.marketplaces.fenicio.apiComercios.ConsultaFenicio;
import integraciones.marketplaces.fenicio.apiComercios.Data;
import integraciones.marketplaces.fenicio.apiComercios.PrecioLista;
import integraciones.marketplaces.fenicio.apiComercios.PrecioVenta;
import integraciones.marketplaces.fenicio.apiComercios.Presentaciones;
import integraciones.marketplaces.fenicio.apiComercios.Productos;
import integraciones.marketplaces.fenicio.apiComercios.RespuestaFenicio;
import integraciones.marketplaces.fenicio.apiComercios.Variantes;
import integraciones.wms.Call_WS_APIENCUENTRA;


@Path("/Fenicio")
public class productosFenicio 
{	
	@GET
	@Path("/productos")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String put(String data,@QueryParam ("token") String a) throws IOException
	{	   
		System.out.println(data);
		
		String json = "";
		try
		{
			Usuario u = LogicaAPI.loginEncuentraAPI2(a);
			
			if (u.getNick() == null) 
			{
				System.out.println("access_token invalido");
				json = "access_token invalido";
			}
			else
			{		
				Gson gson = new Gson();
				ConsultaFenicio con = gson.fromJson(data, ConsultaFenicio.class);
				
				int desde = 0;
				int total = 0;
				String solicitud = "";
				try {
					solicitud = con.get_idSolicitud();
					desde = con.getDesde();
					total = con.getTotal();
					if(desde==0)
					{
						desde = 1;
					}					
					if(total==0)
					{
						total = 100000;
					}
				} catch (Exception e) {
					desde = 1;
					total = 100000;
				}
				
				
				
				String q = "";
				switch (u.getIdEmpresa()) 
				{
				case 8:
					
					q="SELECT IFNULL(if(t00.stk<0,0,t00.stk),0), id, descripcion \r\n"
							+ " FROM \r\n"
							+ " (\r\n"
							+ " 	SELECT AD.id,AD.descripcion\r\n"
							+ " FROM art_descripcion AD\r\n"
							+ " INNER JOIN \r\n"
							+ " (\r\n"
							+ " 	 SELECT SUBSTR(id,1,CHARACTER_LENGTH(a.id)-3) subid \r\n"
							+ " 	 from art_descripcion a WHERE idEmpresa = "+u.getIdEmpresa()+" GROUP BY SUBSTR(id,1,CHARACTER_LENGTH(a.id)-3) \r\n"
							+ " 	 ORDER BY id \r\n"
							+ " 	 LIMIT "+desde+","+total+"\r\n"
							+ " )\r\n"
							+ " TS\r\n"
							+ " ON TS.subid=SUBSTR(AD.id,1,CHARACTER_LENGTH(AD.id)-3) \r\n"
							+ " ) AD\r\n"
							+ " LEFT OUTER JOIN\r\n"
							+ " (\r\n"
							+ " SELECT SUM(t0.cant) stk,t0.idArticulo\r\n"
							+ " FROM (\r\n"
							+ " SELECT idArticulo, SUM(cantidadPedido)*-1 cant\r\n"
							+ " FROM ecommerce_pedido_articulos EPA\r\n"
							+ " WHERE EPA.idPedido IN (\r\n"
							+ " SELECT idPedido\r\n"
							+ " FROM ecommerce_pedido ep\r\n"
							+ " WHERE ep.idEmpresa= "+u.getIdEmpresa()+" AND ep.EstadoEncuentra IN (1,2)) AND EPA.idEmpresa= "+u.getIdEmpresa()+"\r\n"
							+ " GROUP BY EPA.idArticulo UNION ALL\r\n"
							+ " SELECT BC.idArticulo, SUM(BC.cantidad) cant\r\n"
							+ " FROM bulto B\r\n"
							+ " INNER JOIN bulto_contenido BC ON BC.idBulto = B.idBulto AND BC.IdEmpresa = B.idEmpresa\r\n"
							+ " INNER JOIN ojostienenarticulos OT ON B.idBulto=OT.idArticulo AND B.idEmpresa=OT.IdEmpresa\r\n"
							+ " INNER JOIN ojos O ON O.idOjo=OT.idOjo AND O.IdEmpresa = OT.IdEmpresa\r\n"
							+ " INNER JOIN estanterias ES ON ES.idEstanteria = O.idEstanteria AND ES.idEmpresa = O.IdEmpresa\r\n"
							+ " WHERE ES.idUso = 1 AND ES.idEmpresa= "+u.getIdEmpresa()+"\r\n"
							+ " GROUP BY BC.idArticulo UNION ALL\r\n"
							+ " SELECT OT.idArticulo, SUM(OT.cantidad) cant\r\n"
							+ " FROM ojostienenarticulos OT\r\n"
							+ " INNER JOIN ojos O ON O.idOjo=OT.idOjo AND O.IdEmpresa = OT.IdEmpresa\r\n"
							+ " INNER JOIN estanterias ES ON ES.idEstanteria = O.idEstanteria AND ES.idEmpresa = O.IdEmpresa\r\n"
							+ " WHERE ES.idUso = 1 AND ES.idEmpresa= "+u.getIdEmpresa()+"\r\n"
							+ " GROUP BY OT.idArticulo UNION ALL\r\n"
							+ " SELECT OT.idArticulo, SUM(OT.cantidad) cant\r\n"
							+ " FROM ojostienenarticulos OT\r\n"
							+ " INNER JOIN ojos O ON O.idOjo=OT.idOjo AND O.IdEmpresa = OT.IdEmpresa\r\n"
							+ " INNER JOIN estanterias ES ON ES.idEstanteria = O.idEstanteria AND ES.idEmpresa = O.IdEmpresa\r\n"
							+ " WHERE ES.idEstanteria IN (0,1,2) AND ES.idEmpresa= "+u.getIdEmpresa()+"\r\n"
							+ " GROUP BY OT.idArticulo) t0\r\n"
							+ " GROUP BY t0.idArticulo\r\n"
							+ " ) t00\r\n"
							+ " ON t00.idArticulo = AD.id\r\n"
							//+ " WHERE t00.stk > 0"
							+ " ORDER BY AD.id";
				 	System.out.println(q);
					break;

				default:
					break;
				}
				
				Call_WS_APIENCUENTRA call = new Call_WS_APIENCUENTRA();
				DataIDDescripcion consulta = new DataIDDescripcion(0, q);
				Hashtable<String,DataIDDescripcion> stock =  call.vistaStocksQ(consulta, a);
				
				
				
				 Enumeration<String> e = stock.keys();
				 String inns = "";
				 boolean pri = true;
				 while (e.hasMoreElements()) 
				 {
					 String key = e.nextElement();
					 if(pri)
					 {
						 pri=false;
						 inns+="'"+key+"'";
					 }
					 else
					 {
						 inns+=",'"+key+"'";
					 }
				}
				 
				 
				Hashtable<String, Double> artPrecios = LogicaAPI.darArtPrecio(inns,u.getIdEmpresa());
				
			
				
				Enumeration<String> ee = artPrecios.keys();
				
				while (ee.hasMoreElements()) 
				{
					try
					{
						String key = ee.nextElement();
						
						DataIDDescripcion artStk = stock.get(key);
						 
						artStk.setIdD(artPrecios.get(key));
						
						stock.put(key, artStk);
						
					}
					catch (Exception er) 
					{
						// TODO: handle exception
					} 
					 
					 
				}
				
				List <DataIDDescripcion> lista = new ArrayList<DataIDDescripcion>(stock.values());
				
				Hashtable<String, Productos> prodsHt = new Hashtable<String, Productos>();
				Productos [] arregloProductos = null;
				
				int salida =0;
				for (DataIDDescripcion ar : lista) 
				{
					String madre = ar.getDescripcion().substring(0, ar.getDescripcion().length()-3);
					String variante = ar.getDescripcion().substring(0, ar.getDescripcion().length()-3);
					String talle = ar.getDescripcion().substring(ar.getDescripcion().length()-3);
					Productos pr = null;
					if(prodsHt.containsKey(madre))
					{
						pr =  prodsHt.get(madre);
						Presentaciones pre = darPresentacion (madre,variante,talle,ar);
						
						boolean tieneVa = false;
						int posVa=0;
						for (int i = 0; i <  pr.getVariantes().length; i++) 
						{
							if(pr.getVariantes()[i].getCodigo().equals(variante))
							{
								tieneVa = true;
								posVa = i;
								break;
							}
							
						}
						if(tieneVa)
						{
							
							Variantes [] vars = pr.getVariantes();
							Variantes var = vars[posVa];
							var.setPresentaciones(addPresentaciones(var.getPresentaciones(), pre));
							vars[posVa]=var;
							
							pr.setVariantes(vars);
							
						}
						else
						{
							Presentaciones[] arregloPR = new Presentaciones []{pre};
							
							Variantes var = new Variantes();
							var.setCodigo(variante);
							var.setPresentaciones(arregloPR);
							
							Variantes[] arreglosVA = new Variantes[] {var};
							
							pr.setVariantes(arreglosVA);
						}
						
					}
					else
					{
						salida++;
						pr = new Productos();
						pr.setCodigo(madre);
						
						Presentaciones pre =darPresentacion(madre, variante, talle, ar);
						
						Presentaciones[] arregloPR = new Presentaciones []{pre};
						
						
						Variantes var = new Variantes();
						var.setCodigo(variante);
						var.setPresentaciones(arregloPR);
						
						Variantes[] arreglosVA = new Variantes[] {var};
						
						pr.setVariantes(arreglosVA);
						
						
						
					}
					
					arregloProductos =  addProductos(arregloProductos, pr);
					prodsHt.put(madre, pr);
				}
				
				RespuestaFenicio rsp = new RespuestaFenicio();
				rsp.setStatus("OK");
				rsp.setMensaje("");
				rsp.set_idSolicitud(solicitud);
				
				Data dat = new Data();
				dat.setDesde(desde);
				dat.setTotal(total);
				
				dat.setProductos(arregloProductos);
				rsp.setData(dat);
				System.out.println("CANTIDAD DE LINEAS "+salida);
				
				json = gson.toJson(rsp);
				
				
				
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
			return json;
	}
	
	
	private Presentaciones darPresentacion(String madre, String variante, String talle, DataIDDescripcion ar) 
	{
		Presentaciones pre = new Presentaciones();
		pre.setCodigo(talle);
		
		PrecioLista pl = new PrecioLista();
		pl.setUYU(ar.getIdD()+"");
		pre.setPrecioLista(pl);
		pre.setStock(ar.getId());
		pre.setNombre(talle);
		pre.setSku(madre+"-"+variante+"-"+talle);
		PrecioVenta pv = new PrecioVenta();
		pv.setUYU(ar.getIdD()+"");
		pre.setPrecioVenta(pv);
		pre.setIdentificador(null);
		
		return pre;
	}


	public  Variantes[] addVariantes(Variantes arr[], Variantes n)
    {
	 	System.out.println("");
        int leng = arr.length;
  
        // create a new array of size n+1
        
        Variantes newarr[] = new Variantes[leng + 1];
        if(leng>0)
        {
	        int i = 0;
	        for (i = 0; i < leng; i++)
	        {
	        	newarr[i] = arr[i];
	        }
	        newarr[i+1] = n;
        }
        else
        {
        	newarr[0] = n;
        }
  
        
  
        return newarr;
    }
	
	
	public  Presentaciones[] addPresentaciones(Presentaciones arr[], Presentaciones n)
    {
	 	System.out.println("");
        int leng = arr.length;
  
        // create a new array of size n+1
        
        Presentaciones newarr[] = new Presentaciones[leng + 1];
        if(leng>0)
        {
	        int i = 0;
	        for (i = 0; i < leng; i++)
	        {
	        	newarr[i] = arr[i];
	        }
	        newarr[i] = n;
        }
        else
        {
        	newarr[0] = n;
        }
  
        
  
        return newarr;
    }
	
	public  Productos[] addProductos(Productos arr[], Productos n)
    {
	 	try
	 	{
	 		System.out.println("");
		 	int leng =0;
		 	if(arr!=null)
		 	{
		 		leng = arr.length;
		 	}
		 	
	  
	        // create a new array of size n+1
	        
	        Productos newarr[] = new Productos[leng+1];
	        if(leng>0)
	        {
		        int i = 0;
		        for (i = 0; i < leng; i++)
		        {
		        	newarr[i] = arr[i];
		        }
		        newarr[i] = n;
	        }
	        else
	        {
	        	newarr[0] = n;
	        }
	  
	        
	  
	        return newarr;
	 		
	 	}
	 	catch (Exception e) 
	 	{
	 		e.printStackTrace();
			return null;
		}
		
    }

}

