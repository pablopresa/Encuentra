package clientesVisual_Store.elReycomercioelectronico;


import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Holder;
import javax.xml.ws.Response;

import beans.Fecha;
import beans.encuentra.Cliente;
import beans.encuentra.Clientes;
import dataTypes.DataBooleanDesc;
import dataTypes.DataIDDescripcion;
import persistencia.MSSQL;
import persistencia._EncuentraPersistir;
import clienteVisualObject.OrdenVenta;
import clienteVisualObject.OrdenVentaLinea;
import logica.Util;

public class ClienteWSfacturacion
{

	private short equipo = 1;
	private int empresa =  1;
	private short tienda = 1;
	private int deposito = 1;
	private Long usuario =(long) 200;
	
	SWComercioElectronico service = new SWComercioElectronico();
	SWComercioElectronicoSoap port = service.getSWComercioElectronicoSoap();
	
	public DataIDDescripcion GrabarFactura(OrdenVenta orden, Cliente cliente){
		
		Holder<Integer> tr = new Holder<Integer>();
		Holder<String> msj = new Holder<String>();
		String xml = "<NewDataSet>" + ArmarXMLVenta(orden) + ArmarXMLCliente(cliente) + "</NewDataSet>";
		
		DataIDDescripcion data = new DataIDDescripcion();
		data.setDescripcion("");
		int nvoDoc = 0;
		try 
	    {
			  int intentos = 0;
			  boolean ok = false;
				  while (intentos < 3 && !ok) 
				  {						  
					  intentos++;
					  port.grabarVenta(msj, equipo, empresa, xml, tr);
					  if(tr.value!=null && tr.value!=0) {
						  ok = true;
					  }
				  }
			
						
			try {
				if(tr.value!=null){
					System.out.println(tr.value);
					nvoDoc = tr.value;
					data.setId(nvoDoc);
				}
				if(msj.value!=null){
					System.out.println(msj.value);
					String menError = msj.value;
					menError = menError.substring(1,menError.length());
					data.setDescripcion(menError);
				}
			} catch (Exception e) {
				// TODO: handle exception
			}
			data.setIdB(intentos);
			
			
			return data;
		} 
	    catch (Exception e) 
		{
			e.printStackTrace();
			return data;
		}
	}
		
	public XMLGregorianCalendar getXMLGregorianCalendarNow() 
            throws DatatypeConfigurationException
    {
        GregorianCalendar gregorianCalendar = new GregorianCalendar();
        DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
        XMLGregorianCalendar now = 
            datatypeFactory.newXMLGregorianCalendar(gregorianCalendar);
        return now;
    }
	
	public String ArmarXMLDetalle(List<DataIDDescripcion>lista){
		String xml="<NewDataSet>";
		for(int i=0;i<lista.size();i++){
			  xml=xml+"<Detalle>";
			  xml=xml+"<IdArticulo>"+lista.get(i).getDescripcion()+"</IdArticulo>";
			  xml=xml+"<Cantidad>"+lista.get(i).getId()+"</Cantidad>";
			  xml=xml+"</Detalle>";
		}
		xml=xml+"</NewDataSet>";
		return xml;
	}
	
	public String ArmarXMLCliente (Cliente c) {
		String xml = "";
		try {
			Clientes cliente = c.transformar(c,4);
			String ciOrigen="";
		    String ci="";
		    String di="";
		    
		    if(cliente.getMail().length() > 50){
		    	cliente.setMail("");
		    }
		    if(cliente.getcIOrigen().equals(""))
		    {
		    	ci="    <Numero>"+cliente.getNumero()+"</Numero> ";
		    	di="	<NumeroDig>"+cliente.getNumeroDig()+"</NumeroDig> ";
		    	ciOrigen="    <CIOrigen /> ";
		    }
		    else
		    {
		    	ci="    <Numero>"+cliente.getcIOrigen()+"</Numero>";
		    	di="	<NumeroDig />";
		    	ciOrigen="    <CIOrigen>"+cliente.getcIOrigen()+"</CIOrigen> ";
		    	
		    }
		    
		    xml = 
					"  <PersonaCliente> "+
					"    <IdCliente>0</IdCliente> "+
					ci+
					di+
					"    <Nombre>"+cliente.getNombre()+"</Nombre> "+
					"    <Apellido>"+cliente.getApellido()+"</Apellido> "+
					"   <Empresa /> "+
					"    <Direccion>"+cliente.getDireccion()+"</Direccion> "+
					"    <Ciudad>"+cliente.getCiudad()+"</Ciudad> "+
					"    <Departamento>"+cliente.getDepartamento()+"</Departamento> "+
					"    <IdPais>1</IdPais> "+
					"    <CodigoPostal>"+cliente.getCodigoPostal()+"</CodigoPostal> "+
					"    <Telefono>"+cliente.getTelefono()+"</Telefono> "+
					"    <FechaNacimiento>1917-01-01T00:00:00-03:00</FechaNacimiento> "+
					"    <Mail>"+cliente.getMail()+"</Mail> "+
					"    <ClaveWeb /> "+
					"    <RecibirNoticiasWeb>false</RecibirNoticiasWeb> "+
					"    <RecibirOfertasWeb>false</RecibirOfertasWeb> "+
					"    <Sexo>"+cliente.getSexo()+"</Sexo> "+
					ciOrigen+
					"  </PersonaCliente> ";
		    
		    
		} catch (Exception e) {
			// TODO: handle exception
		}
		return xml;
	}
	
	public String ArmarXMLVenta (OrdenVenta orden) {
		Util u = new Util();
		String xml = "";
		try {		    
	    	
	    	for (OrdenVentaLinea ovl : orden.getOrdenVentaLineas()) 
	    	{
	    		if(!ovl.getIdArticulo().equals("0002000"))
	    		{
	    			String precioStr = "0";
	    			
	    			try {
	    				precioStr = MSSQL.darListaIdDescripcion("select 0, Precio from ArticuloLP where IdListaPrecio = 1 and IdArticulo = '"
	    						+ovl.getIdArticulo()+"'").get(0).getDescripcion();
					} catch (Exception e) {
						// TODO: handle exception
					}
	    			
	    		    ovl.setPrecioLista(Double.parseDouble(precioStr)*ovl.getCantidad());
	    		    
	    		}
	    		
			}
	    	
		    Fecha fecha = new Fecha();
		    
			int idVendedor = 0;
		    if(orden.getIdVendedor()==2000)//shopify
		    {
		    	idVendedor = 20064299;
		    }
		    if(orden.getIdVendedor()==2003)//mercado libre
		    {
		    	idVendedor = 99025986;
		    }		    
		    
			xml = "" +
					
					"  <DatosEquipo> "+
					"    <IdEquipo>"+equipo+"</IdEquipo> "+
					"    <IdTienda>"+tienda+"</IdTienda> "+
					"    <IdUsuario>"+usuario+"</IdUsuario> "+
					"    <IdEmpresa>"+empresa+"</IdEmpresa> "+
					"    <IdDeposito>"+deposito+"</IdDeposito> "+
					"  </DatosEquipo> "+
					"  <Venta>" +
					//"    <Solicitada>false</Solicitada>" +
					//"    <NroCliente>"+idPerSEmpresa+"</NroCliente>" + 
					"    <PorcDescuento>0</PorcDescuento>" +
					"    <IdMoneda>1</IdMoneda>" +
					"    <Comentario> Pedido Num.:"+orden.getIdCarrito()+" FP: "+orden.getFormaPago()+" Importe pago:"+orden.getImportePago()+
																					" Etc.:"+orden.getComentario()+"</Comentario>" +
					"    <NroVendedor>"+idVendedor+"</NroVendedor>" +
					//"    <CliDireccion>"+orden.getCliDireccion()+"</CliDireccion>" +
					"    <CliRuc>"+orden.getCliRuc()+"</CliRuc>" +
					"	 <RazonSocial>"+""+"</RazonSocial>"+
					//"    <CliCedula>"+orden.getCliCedula()+"</CliCedula>" +
					//"    <CliNombre>"+orden.getCliNombre()+"</CliNombre>" +
					//"    <CliTelefono>"+orden.getCliTelefono()+"</CliTelefono>" +
					//"    <IdPais>1</IdPais>" +
					"    <IdCarrito>"+orden.getIdCarrito()+"</IdCarrito>" +
					//"    <GrabarContado>true</GrabarContado>" +
					//"    <IdMotivo>42</IdMotivo>" +
					//"    <IdDepEntrega>71</IdDepEntrega>" +
					//" 	 variable"+ 	
					"  </Venta>";
					
			
					for (OrdenVentaLinea l : orden.getOrdenVentaLineas()) 
					{						
						Double porcentaje =0.0;
						if(!l.getIdArticulo().equals("0002000") &&  l.getPrecioImp()>=0)
						{
							Double difPrecio = (l.getPrecioImp()*l.getCantidad())-(l.getPrecioLista()*l.getCantidad());
					    	porcentaje = (difPrecio*100)/(l.getPrecioLista()*-1*l.getCantidad());
					    	
					    	if(porcentaje>0)
					    	{				    		
					    		porcentaje=u.round(porcentaje, 2);
					    		System.out.println("precio diferente "+porcentaje);				    		
					    	}
					    	else{
					    		porcentaje = 0.0;
					    	}
						}
						else
						{
							l.setPrecioLista(l.getPrecioImp());
						}
						l.setDescuento(porcentaje);
						
						if(l.getPrecioImp()>=0){
							xml +=""+
									"  <VentaLinea> "+
									"    <IdArticulo>"+l.getIdArticulo()+"</IdArticulo>" +
									"    <Cantidad>"+l.getCantidad()+"</Cantidad>" +
									"    <PrecioImp>"+String.valueOf(l.getPrecioLista()/l.getCantidad())+"</PrecioImp>" +
									"    <PorcDescuento>"+String.valueOf(porcentaje)+"</PorcDescuento>" +
									//"    <IdVendedor>"+idVendedor+"</IdVendedor>" +
									//"    <IdFormaPago>"+orden.getFormaPagoVisual()+"</IdFormaPago>" +
									"  </VentaLinea>";
						}
					
					}
										
					xml += 
					"  <VentaEntrega>" +
					"    <Direccion>"+orden.getCliDireccion()+"</Direccion>" +
					"    <Ciudad></Ciudad>" +
					"    <Departamento></Departamento>" +
					"    <CodigoPostal />" +
					"    <Comentario>"+orden.getComentario()+"</Comentario>" +
					"    <IdTransporte>1</IdTransporte>" +
					"    <IdPais>1</IdPais>" +
					"    <Fecha>"+fecha.darFechaAnio_Mes_Dia()+"T12:00:00.5613589-03:00</Fecha>" +
					"    <IdCiudad>0</IdCiudad>" +
					"    <IdDepartamento>0</IdDepartamento>" +
					"    <CliNombre>"+orden.getCliNombre()+"</CliNombre>" +
					"    <CliTelefono>"+orden.getCliTelefono()+"</CliTelefono>" +
					"  </VentaEntrega>";
					
					xml += 
					xml += "</NewDataSet>";
					
					
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		return xml;
		
	}
}
