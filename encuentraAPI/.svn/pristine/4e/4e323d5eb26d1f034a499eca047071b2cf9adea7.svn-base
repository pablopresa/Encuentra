package aTest;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import com.itextpdf.text.pdf.ArrayBasedStringTokenizer;

import beans.encuentra.Cliente;
import beans.encuentra.Clientes;
import beans.encuentra.EncuentraPedido;
import beans.encuentra.EncuentraPedidoArticulo;
import beans.encuentra.EncuentraPedidoArticuloReq;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import clienteVisualObject.OrdenVenta;
import clienteVisualObject.OrdenVentaLinea;
import dataTypes.DataIDDescripcion;
import fenicioAPI.Descuento;
import fenicioAPI.Lineas;
import fenicioAPI.Ordenes;
import logica.LogicaAPI;
import marketPlaceIntegrations.CanalMarketPlace;
import marketPlaceIntegrations.Fenicio.FenicioBAS;

public class ClienteBASFenicio 
{
 
	public static void main(String[] args) 
	{
		FenicioBAS f = new FenicioBAS();
		
		 Hashtable<Integer, CanalMarketPlace> canales = f.getCanales();
		 
		 List<CanalMarketPlace> canalesL = new ArrayList<CanalMarketPlace> (canales.values());
		 Call_WS_APIENCUENTRA cen = new Call_WS_APIENCUENTRA();
		 LogicaAPI logica = new LogicaAPI();
		 String token = logica.darToken(f.getIdEmpresa());
		 
		 Hashtable<Integer, String> parametros = cen.darParametros(token);
		 
		 
		 
		 int idDepoOrigen = Integer.parseInt(parametros.get(4));
		
		 
		 List<Cliente> clientes = new ArrayList<Cliente>();
		 int diasBusqueda = 2;
		 
		 for (CanalMarketPlace canal : canalesL) 
		 {
			 List<Ordenes> pedidosFenicio = f.getPedidosAPI(canal.getId(),diasBusqueda);
			 List<EncuentraPedido> pedidosALL = f.getPedidos(canal.getId(),"",diasBusqueda);
			 
			 Hashtable<String, Ordenes> ordenesF = new Hashtable<String, Ordenes>();
			 
			 for (Ordenes o : pedidosFenicio) 
			 {
				 ordenesF.put(o.getIdOrden(), o);
			 }
			 
			 
			 
			 Hashtable<String, String> pedidosEncuentra = cen.PedidosID(token, diasBusqueda);
			 
			 List<EncuentraPedido> pedidos = new ArrayList<EncuentraPedido>();
			 
			 int test = 0;
			 for (EncuentraPedido p : pedidosALL) 
			 {
				 
				 if(!pedidosEncuentra.containsKey(p.getIdPedido()+""))
				 {
					 pedidos.add(p);
					 test++;
				 }
				 
				 if(test==1)
				 {
					 break;
				 }
			 }
			 
			 
			 
			
			 
			 
			 for (EncuentraPedido p : pedidos) 
			 {
				 
				 
				 
				 
				 Ordenes ovf =  ordenesF.get(p.getIdPedido()+"");
				 if(ovf==null)
				 {
					 for (OrdenVentaLinea a : p.getOrden().getOrdenVentaLineas()) 
					 {
						a.setDescripcion("sku "+a.getIdArticulo());
					 }
				 }
				 else
				 {
					List<OrdenVentaLinea> ovls = new ArrayList<OrdenVentaLinea>();
					int linea = 0;
					 for (Lineas l : ovf.getLineas()) 
					 {
						linea++;
						if(l.getSku().equals(""))
						{
							/*/
							 * 800102000 -- "Envío Normal"
							   800103000 -- Envío Interior
							   800106000
							 */
							if(l.getNombre().equals("Envío Normal"))
							{
								l.setSku("800102000");
							}
							else if(l.getNombre().equals("Envío Interior"))
							{
								l.setSku("800103000");
							} 
							else if (l.getNombre().contains("Envío"))
							{
								l.setSku("800106000");
							}
						}
						
						
						if(l.getSku().startsWith("0"))
						{
							String articulo=l.getSku().substring(1, l.getSku().length());
							l.setSku(articulo);
						}
						
						
						
						OrdenVentaLinea li = new OrdenVentaLinea(Double.parseDouble(l.getPrecio()), l.getCantidad()+"", l.getSku());
						li.setDescripcion(l.getNombre());
						li.setLinea(linea);
						
						
						Double descuentoTotal = 0.0;
						if(l.getDescuentos()!=null)
						{
							for (Descuento d : l.getDescuentos()) 
							{
								/*
								linea++;
								OrdenVentaLinea lid = new OrdenVentaLinea(Double.parseDouble(d.getMonto())*-1, 1+"", d.getCodigo());
								lid.setDescripcion(d.getNombre());
								lid.setLinea(linea);
								ovls.add(lid); 
								 */
								descuentoTotal +=  Double.parseDouble(d.getMonto());
							}
						}
						
						li.setDescuento(descuentoTotal);
						ovls.add(li);
						
					 }
					 
					 p.getOrden().setOrdenVentaLineas(ovls);
				 }
				 
				 
				 
				 
				 
				 
				 
				 
				 p.setCanalAnaloga(canal.getId());
				 p.setCanalMercadoLibre(new DataIDDescripcion(canal.getId(),canal.getNombre()));
				 p.setIdPedidoSTR(p.getIdPedido()+"");
				 if(p.getSucursalPick().equals(""))
				 {
					 p.setIdDepositoEnvio(0);
				 }
				 else
				 {
					 try
					 {
						 p.setIdDepositoEnvio(Integer.parseInt(p.getSucursalPick()));
					 }
					 catch (Exception e) 
					 {
						 p.setIdDepositoEnvio(0);
					 }
					 
				 }
				 p.getCliente().setIdPedido(p.getIdPedido()+"");
				 clientes.add(p.getCliente());
				
				for (EncuentraPedidoArticulo ar : p.getArticulosPedido()) 
				{
					String articulo=ar.getArticulo().substring(1, ar.getArticulo().length());
					if(ar.getArticulo().startsWith("0"))
					{
						
						ar.setArticulo(articulo);
						ar.setOrigen(idDepoOrigen);
						
					}
					
					EncuentraPedidoArticuloReq are = new EncuentraPedidoArticuloReq();
					are.setArticulo(articulo);
					are.setCantReq(ar.getCantidad());
					are.setDeposito(idDepoOrigen);
					
					
					p.getArticulosPedidoReq().add(are);
					
					
				}
				
				
			 }
			 
			 
			
			 
			
			 //cen.SaveCustomers(token, clientes);
			 cen.SaveOrders(token, pedidos);
			 cen.SaveOrdersArticulosReq(token, pedidos);
			 
			
			 List<DataIDDescripcion> depositosDestino =cen.DarDatosPutOrders(token, 2);
			 
			 for (EncuentraPedido p : pedidos) 
			 {
				 
				 System.out.println(p.getIdPedido());
				 logica.saveImport1Customer(p.getCliente(),f.getIdEmpresa());
				 p.getOrden().save(token, f.getIdEmpresa());
			 }
			 
			 for (EncuentraPedido p : pedidos) 
			 {
				 try
				 {
					 boolean found = false;
					 if(!p.getSucursalPick().equals(""))
					 {
						 //es pickup
						 p.setIdDepositoEnvio(Integer.parseInt(p.getSucursalPick()));
						 p.setShippingType(new DataIDDescripcion(2, ""));
						 found=true;
					 }
					 else
					 {
						 
						 for (DataIDDescripcion d : depositosDestino) 
						 {
							if(d.getDescripcion().equals(p.getEmpresaEnvio()))
							{
								p.setShippingType(new DataIDDescripcion(1, ""));
								p.setIdDepositoEnvio(d.getId());
								found=true;
								break;
							}
						 }
					 }
					 
					 if(!found)
					 {
						 p.setShippingType(new DataIDDescripcion(1, ""));
						 System.out.println("No encontre "+p.getEmpresaEnvio());
						 p.setIdDepositoEnvio(0);
					 }
					 
					 
					 
					 
					 cen.updateDestinoPedido(token, p, p.getIdDepositoEnvio(), p.getMontoEnvio());
				 }
				 catch (Exception e) 
				 {
					 e.printStackTrace();
					 cen.updateDestinoPedido(token, p, 0, p.getMontoEnvio());
				 }
				 
			 }
			 
			 
		}
		 
		 
		 
		 
	}
	
}

