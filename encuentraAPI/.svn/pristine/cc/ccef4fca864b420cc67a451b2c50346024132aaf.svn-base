package persistencia;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import beans.api.pedidoFactura;
import beans.datatypes.DTO_Articulo;
import beans.datatypes.DataDescDescripcion;
import beans.datatypes.DataIDDescripcion;
import beans.encuentra.ArticuloRepoFromLoad;
import beans.encuentra.DepositoMayorista;
import beans.helper.PropertiesHelperAPI;
import logica.Util;



public class MSSQL_API 
{
	private static Connection con = null;
	
	
	
	
	public static void closeFullConnection(Connection con,ResultSet rs,Statement s) throws SQLException{
		rs.close();
		s.close();
		con.close();
	}
	
	public static List <DataDescDescripcion> darIdDescripcionSAP(String consulta) 
	{	
		List <DataDescDescripcion> retorno = new ArrayList<>();
				
		// Create a variable for the connection string.
		String connectionUrl="jdbc:sqlserver://10.108.0.8:1433;databaseName=STADIUM_DEV2;";
        try(Statement s = con.createStatement();) {
        	
            // Establish the connection.
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(connectionUrl,"sa","sqlstadium");
            
            //
            	
	  		 ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			 DataDescDescripcion d = new DataDescDescripcion(rs.getString(1), rs.getString(2));
	  			 retorno.add(d);
	  			  
	  					
	  		   }
	  		
	  	
	  		closeFullConnection(con, rs, s);
          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return retorno;
      
	}
	
	
	private static void darConexion(int idEmpresa)
	{
		PropertiesHelperAPI pH = null;
		switch (idEmpresa) 
		{
			case 1:
				pH = new PropertiesHelperAPI("SQLSTADIUM");
			break;
			case 2:
				pH = new PropertiesHelperAPI("SQLFORUS");
				break;
			case 4:
				pH = new PropertiesHelperAPI("SQLELREY");
			break;
			default:
				pH = new PropertiesHelperAPI("");
			break;
		}
		
		try 
		{
			pH.loadProperties();
			
			String usuario = pH.getValue("u");
			String pass = pH.getValue("p");
			String connectionUrl = pH.getValue("connectionUrl");
			connectionUrl+=" sendStringParametersAsUnicode=false;";
					        
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			con = DriverManager.getConnection(connectionUrl,usuario,pass);
			
		} catch (Exception e) 
			        {
			e.printStackTrace();
		}
		
		
	}
	
	public static List <DataIDDescripcion> darIDDescripcion(String consulta, int idEmpresa) 
	{	
		
		List <DataIDDescripcion> retorno = new ArrayList<>();
				
		
		darConexion(idEmpresa);

		try(Statement s = con.createStatement();) {
        	
            // Establish the connection.
            
            //
            	
	  		 ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			 DataIDDescripcion d = new DataIDDescripcion(rs.getInt(1), rs.getString(2));
	  			 try
	  			 {
	  				 d.setDescripcionB(rs.getString(4));
	  			 }
	  			 catch (Exception e) 
	  			 {
	  				
	  			 }
	  			try
	  			 {
	  				 d.setIdB(rs.getInt(3));
	  			 }
	  			 catch (Exception e) 
	  			 {
					
	  			 }
	  			try
	  			 {
	  				 d.setDescripcionC(rs.getString(5));
	  			 }
	  			 catch (Exception e) 
	  			 {
					
	  			 }
	  			 retorno.add(d);
	  			  
	  					
	  		   }
	  		
	  	
	  		closeFullConnection(con, rs, s);
          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return retorno;
      
	}
	
	
	public static List <DataDescDescripcion> darDescDescripcion(String consulta, int idEmpresa) 
	{	
		
		List <DataDescDescripcion> retorno = new ArrayList<>();
				
		
		darConexion(idEmpresa);

		try(Statement s = con.createStatement();) {
        	
            // Establish the connection.
            
            //
            	
	  		 ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			DataDescDescripcion d = new DataDescDescripcion(rs.getString(1), rs.getString(2));
	  			
	  			 retorno.add(d);
	  			  
	  					
	  		   }
	  		
	  	
	  		closeFullConnection(con, rs, s);
          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return retorno;
      
	}
	

	
	public static Map<Integer,pedidoFactura> darFacturasVisual(String consulta, Map<Integer,pedidoFactura> pedidos) 
	{	
				
		// Create a variable for the connection string.
		String connectionUrl="jdbc:sqlserver://200.40.45.126:1433;databaseName=VsReyEntreteDoc;";
        try (Statement s = con.createStatement();){
        	
            // Establish the connection.
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection(connectionUrl,"encuentra","sqlencuentra");
            
	  		ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			try {
	  				//String base64 = rs.getString(2);
	  				 byte[] base64b = rs.getBytes(2);
		  			 String pdf = "";
		  			 pdf = Util.bytesToPdf(base64b, "VCO"+rs.getInt(1));
		  			 pedidos.get(rs.getInt(1)).setPdf(pdf);	
				} catch (Exception e) {e.printStackTrace();}
	  			 			
	  		   }		
	  		 
	  		closeFullConnection(con, rs, s);          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return pedidos;
      
	}
	
	
	public static Hashtable<Integer,ArticuloRepoFromLoad> darPickingsOB() 
	{	
		Hashtable<Integer,ArticuloRepoFromLoad> retorno = new Hashtable<Integer, ArticuloRepoFromLoad>();
		
		try
		{
			String consulta = "select AR.skuName, TOR.idTienda,TI.idTienda, sum(cast (SL.replenishmentQuantity AS int)) CANTIDAD\r\n"
					+ "from Symphony_ReplenishmentDistributionLog SL\r\n"
					+ "inner join\r\n"
					+ "(\r\n"
					+ "	select  TRY_CAST([Stock Location Name] as INT) idTienda,[Stock Location ID],[SL Description] from BI_StockLocations where TRY_CAST([Stock Location Name] as INT)>0 \r\n"
					+ ") TI\r\n"
					+ "ON TI.[Stock Location ID]=SL.stockLocationID\r\n"
					+ "inner join\r\n"
					+ "(\r\n"
					+ "	select  TRY_CAST([Stock Location Name] as INT) idTienda,[Stock Location ID],[SL Description] from BI_StockLocations where TRY_CAST([Stock Location Name] as INT)>0 \r\n"
					+ ") TOR\r\n"
					+ "ON TOR.[Stock Location ID]=SL.originStockLocation\r\n"
					+ "INNER JOIN\r\n"
					+ "(\r\n"
					+ "	SELECT skuId, skuName FROM Symphony_SKUs\r\n"
					+ ") AR\r\n"
					+ "\r\n"
					+ "ON AR.skuID = SL.skuID\r\n"
					+ "GROUP BY AR.skuName, TOR.idTienda,TI.idTienda\r\n"
					+ "	\r\n"
					+ "";
			
			// Create a variable for the connection string.
			//String connectionUrl="jdbc:sqlserver://200.58.149.126:5435;databaseName=Stadium_OneBeat;";
			String connectionUrl="jdbc:sqlserver://10.108.0.111:1433;databaseName=Stadium_OneBeat;";
			 // Establish the connection.
	        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	        con = DriverManager.getConnection(connectionUrl,"sa","sqlstadium");
			
			
	        try (Statement s = con.createStatement();){
	        	
	           
	            
		  		ResultSet rs = s.executeQuery (consulta);
		  		 
		  		 
		  		 while (rs.next())
		  		   {   
		  			 int destino = rs.getInt(3);
		  			 int origen = rs.getInt(2);
		  			 int cantidad = rs.getInt(4);
		  			 String articulo = rs.getString(1);
		  				
		  			try 
		  			{
		  				if(retorno.containsKey(destino))
		  				{
		  					ArticuloRepoFromLoad ar = retorno.get(destino);
		  					ar.getArticulosCantidad().add(new DataIDDescripcion(cantidad, articulo));
		  					
		  					retorno.put(destino, ar);
		  				}
		  				else
		  				{
		  					ArticuloRepoFromLoad ar = new ArticuloRepoFromLoad(destino, false, 1, origen, 1, new ArrayList<DataIDDescripcion>());
		  					ar.getArticulosCantidad().add(new DataIDDescripcion(cantidad, articulo));
		  					
		  					retorno.put(destino, ar);
		  					
		  				}
		  				
					} 
		  			catch (Exception e) {e.printStackTrace();}
		  			 			
		  		   }		
		  		 
		  		closeFullConnection(con, rs, s);          
	      }
	      // Handle any errors that may have occurred.
	      catch (Exception e) {
	          e.printStackTrace();
	      }
		}
		catch (Exception e) 
		{
			
		}
		
     
      return retorno;
      
	}
	
	
	public static List <DataIDDescripcion> darEcommerceDocumentosEntregas(String consulta, int idEmpresa) 
	{	
		List <DataIDDescripcion> retorno = new ArrayList<>();
				
		 // Establish the connection.
        darConexion(idEmpresa);
        
        //
        try (Statement s = con.createStatement();){
        	            		 	  		 
	  		 ResultSet rs = s.executeQuery (consulta);
	  		 
	  		 
	  		 while (rs.next())
	  		   {   
	  			 DataIDDescripcion d = new DataIDDescripcion(rs.getInt(3), rs.getString(2));
	  		
	  			try
	  			 {
	  				 d.setDescripcionB(rs.getString(1));
	  			 }
	  			 catch (Exception e) 
	  			 {
					e.printStackTrace();
	  			 }
	  			 retorno.add(d);
	  			  
	  					
	  		   }
	  		
	  	
	  		closeFullConnection(con, rs, s);
          
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
          e.printStackTrace();
      }
     
      return retorno;
      
	}
	
	public static Map<String, Double> darArtPrecioVisual(String idArticulo, Integer idEmpresa) {
		Map<String, Double> retorno =  new HashMap<>();
		String consulta="SELECT idArticulo, isnull(Precio,0.0) FROM ArticuloLP WHERE idArticulo IN ('"+idArticulo+"')";
		
		darConexion(idEmpresa);
		
		try(Statement s = con.createStatement();)
		{
	  		ResultSet rs = s.executeQuery (consulta);
	  		
	  		while (rs.next())
	  		{   
	  			String sku = rs.getString(1);
	  			Double precio = rs.getDouble(2);
	  			try 
	  			{
	  				retorno.put(sku, precio);
				} 
	  			catch (Exception e) 
	  			{
					e.printStackTrace();
				}	  			
	  		}
	  			  		
      }
      catch (Exception e) 
		{
          e.printStackTrace();
		}
		return retorno;
	}

	public static List<DTO_Articulo> darArticulosVSS(String consultaArticulos, int idEmpresa) 
	{
		darConexion(idEmpresa);
		List<DTO_Articulo> retorno = new ArrayList<DTO_Articulo>();
		
		try(Statement s = con.createStatement();)
		{
	  		ResultSet rs = s.executeQuery (consultaArticulos);
	  		
	  		while (rs.next())
	  		{   
	  			DTO_Articulo art = new DTO_Articulo(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7),rs.getString(8), rs.getString(9), rs.getString(10));
	  			art.setIdGenero(rs.getString(11));
	  			art.setImagen(rs.getString(12));
	  			art.setCodigoBarras(new ArrayList<String>());
	  			retorno.add(art);
	  		}
	  			  		
      }
      catch (Exception e) 
		{
          e.printStackTrace();
		}
		return retorno;
	}

	public static List<DepositoMayorista> darDepositosVSS(String consultaDepositos, int idEmpresa) 
	{
		darConexion(idEmpresa);
		List<DepositoMayorista> retorno = new ArrayList<DepositoMayorista>();
		
		try(Statement s = con.createStatement();)
		{
	  		ResultSet rs = s.executeQuery (consultaDepositos);
	  		
	  		while (rs.next())
	  		{   
	  			
	  			DepositoMayorista dep = new DepositoMayorista(rs.getString(1), rs.getString(2), rs.getString(3), "100");
	  			dep.setDepartamento(rs.getString(4));
	  			dep.setCiudad(rs.getString(5));
	  			retorno.add(dep);
	  		}
	  			  		
      }
      catch (Exception e) 
		{
          e.printStackTrace();
		}
		return retorno;
	}
}