package clienteAPIEncuentra;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;

import com.google.gson.Gson;

import beans.api.ColeccionHasIntString;
import beans.api.ColeccionHasStringInt;
import beans.api.pedidoFactura;
import beans.encuentra.ArticuloRepoFromLoad;
import beans.encuentra.Cliente;
import beans.encuentra.ContenedorListaDTO_Articulo;
import beans.encuentra.ContenedorListaDataIdDesc;
import beans.encuentra.DepositoMayorista;
import beans.encuentra.EncuentraPedido;
import dataTypes.DTO_Articulo;
import dataTypes.DataIDDescripcion;
import dataTypes.StockDeposito;
import logica.LogicaAPI;


public class Call_WS_APIENCUENTRA 
{
	//final String host = "localhost:8080";
	final String host = "encuentra.200.com.uy";
	
	private String callWSPOST_ParamJSON(String URLbase, String jotason)
	{
		String retorno = "";
		HttpClient httpClient = HttpClientBuilder.create().build();
		try 
		{
	    	
	    	System.out.println("llamando a "+URLbase);
	    	System.out.println("Parametros JSON "+jotason);
	    	System.out.println("Respuesta");

	    	String payload = jotason;
	    	StringEntity entityI;
	    	
	    	entityI = new StringEntity(payload, ContentType.APPLICATION_JSON);
	    
	    	HttpPost request = new HttpPost(URLbase);
	    	request.setEntity(entityI);
	    	
		  	HttpResponse httpResponse = httpClient.execute(request);
		  	
		  	
		  	int code=httpResponse.getStatusLine().getStatusCode();
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          return strFileContents;
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          request.abort();
		          runtimeException.printStackTrace();
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		System.out.println(retorno);
		return retorno;
		
	}
	
	private String callWSGET(String URL)
	{
		String retorno = "";
		HttpClient httpClient = new DefaultHttpClient();
		
	    ((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT),new UsernamePasswordCredentials("produccion@200data.com", "200data2017"));
	    try 
		{
	    	HttpGet httpGetRequest = new HttpGet(URL);
	    	
		  	HttpResponse httpResponse = httpClient.execute(httpGetRequest);
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          
		          
		          return strFileContents;
		          
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          httpGetRequest.abort();
		          runtimeException.printStackTrace();
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		return retorno;
		
	}
	
	public String callWSPOSTparam(String URLbase, List<DataIDDescripcion> params)
	{
		
	
		String retorno = "";
		HttpClient httpClient = new DefaultHttpClient();
		
	    try 
		{
	    	
	    	System.out.println("Respuesta");
	    	HttpPost httpPostRequest = new HttpPost(URLbase);
	    	
	    	//StringEntity params =new StringEntity(jotason);
	    	httpPostRequest.setHeader("Content-type", "application/x-www-form-urlencoded");
	    	
	    	//httpPostRequest.setEntity(params);
	    	
	    	ArrayList<NameValuePair> postParameters;
	    	postParameters = new ArrayList<NameValuePair>();
	    	for(DataIDDescripcion p:params){
	    		postParameters.add(new BasicNameValuePair(p.getDescripcion(), p.getDescripcionB()));
	    	}
	        
	        httpPostRequest.setEntity(new UrlEncodedFormEntity(postParameters, "UTF-8"));    	
	    	
	    	
		  	HttpResponse httpResponse = httpClient.execute(httpPostRequest);
		  	int code=httpResponse.getStatusLine().getStatusCode();
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          System.out.println(strFileContents);
		          return strFileContents;
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          httpPostRequest.abort();
		          runtimeException.printStackTrace();
		          return "error";
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		      return "error";
		      
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		      return "error";
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		return retorno;
	
		
	}
	
	public List<DataIDDescripcion> DarDatosPutOrders(String token, int idTabla)
	{
		try {
			
			//String host = "encuentra.200.com.uy";
			
			String servicio = "http://"+host+"/WMS/Integraciones/DarDatosPutOrders/tablas?token="+token; 
						
			String json = "{ "+
						"	   \"id\":"+idTabla+", "+
						"	   \"descripcion\":\"\" "+
						"	}";
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			
			
			ContenedorListaDataIdDesc cont =  new ContenedorListaDataIdDesc(salida);
			return cont.getDatos();
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	
	public List<DataIDDescripcion> SaveOrders(String token, List<EncuentraPedido> listaPedidos)
	{
		try {
			
			//String host = "encuentra.200.com.uy";
		
			String servicio = "http://"+host+"/WMS/Integraciones/SaveOrders/save?token="+token; 
			Gson gson = new Gson();
			
			String json = gson.toJson(listaPedidos, ArrayList.class);
			System.out.println(json);
			String padre = "{ \"idTabla\":0,\"datos\": ";
			String salida =  callWSPOST_ParamJSON(servicio, padre+json+"}");
			
			
			
			ContenedorListaDataIdDesc cont =  new ContenedorListaDataIdDesc(salida);
			
			return cont.getDatos();
			
		} catch (Exception e) {
		
		}
		return null;
	}

	
	
	
	public List<DataIDDescripcion> SaveOrdersArticulosReq(String token, List<EncuentraPedido> listaPedidos)
	{
		try {
			
			//String host = "encuentra.200.com.uy";
		
			String servicio = "http://"+host+"/WMS/Integraciones/SaveOrders/saveArtReq?token="+token; 
			Gson gson = new Gson();
			
			String json = gson.toJson(listaPedidos, ArrayList.class);
			System.out.println(json);
			String padre = "{ \"idTabla\":0,\"datos\": ";
			String salida =  callWSPOST_ParamJSON(servicio, padre+json+"}");
			
			
			
			ContenedorListaDataIdDesc cont =  new ContenedorListaDataIdDesc(salida);
			
			return cont.getDatos();
			
		} catch (Exception e) {
		
		}
		return null;
	}
	
	public List<DataIDDescripcion> SaveCustomers(String token, List<Cliente> clientes) 
	{
		
		try {
			
			//String host = "encuentra.200.com.uy";
			
			String servicio = "http://"+host+"/WMS/Integraciones/SaveCustomers/save?token="+token; 
			Gson gson = new Gson();
			
			String json = gson.toJson(clientes, ArrayList.class);
			System.out.println(json);
			String padre = "{ \"idTabla\":0,\"datos\": ";
			String salida =  callWSPOST_ParamJSON(servicio, padre+json+"}");
			
			
			
			ContenedorListaDataIdDesc cont =  new ContenedorListaDataIdDesc(salida);
			
			return cont.getDatos();
			
		} catch (Exception e) {
		
		}
		return null;
	}
	
	public List<DataIDDescripcion> ordersNotDispatched(int canal,String token)
	{
		try {
			
			//String host = "encuentra.200.com.uy";
			////String host = "10.108.0.165:8080";
		
			String servicio = "http://"+host+"/WMS/Integraciones/OrderFunctions/ordersNotDispatched?token="+token+"&canal="+canal; 
			
			String salida =  callWSGET(servicio);
						
			ContenedorListaDataIdDesc cont =  new ContenedorListaDataIdDesc(salida);
			
			return cont.getDatos();
			
		} catch (Exception e) {
		
		}
		return null;
	}
	
	public void updateOrdersStatus(String token, List<DataIDDescripcion> pedidos)
	{
		try {
			
			//String host = "encuentra.200.com.uy";
			////String host = "10.108.0.165:8080";
		
			String servicio = "http://"+host+"/WMS/Integraciones/OrderFunctions/updateOrdersStatus?token="+token; 

			Gson gson = new Gson();
			String json = gson.toJson(pedidos);
			json = "{ \"coleccion\" : "+json+"}";
			
			String salida =  callWSPOST_ParamJSON(servicio,json);
						
			
		} catch (Exception e) {
		
		}
	}
	
	public void putFacturas(String token, List<pedidoFactura> facturas)
	{
		try {
			
			//String host = "encuentra.200.com.uy";
			////String host = "10.108.0.165:8080";
		
			String servicio = "http://"+host+"/WMS/Integraciones/OrderFunctions/putFacturas?token="+token; 

			Gson gson = new Gson();
			String json = gson.toJson(facturas);
			json = "{ \"coleccion\" : "+json+"}";
			
			String salida =  callWSPOST_ParamJSON(servicio,json);
						
			
		} catch (Exception e) {
		
		}
	}
	
	public Hashtable<String, Integer> vistaStocks(List<DataIDDescripcion> lista, int origen, int idEmpresa)
	{
		try {
			LogicaAPI logica = new LogicaAPI();
			String token = logica.darToken(2,2000);
			
			//String host = "encuentra.200.com.uy";
			////String host = "10.108.0.165:8080";
		
			String servicio = "http://"+host+"/WMS/Integraciones/Views/stocks?token="+token+"&origen="+origen; 
			
			Gson gson = new Gson();
			String json = gson.toJson(lista);
			json = "{ \"coleccion\" : "+json+"}";
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			/*String salida = "{" + 
					"    \"coleccion\": {" + 
					"        \"BRX9020211380\": 29," + 
					"        \"BBC7873VN0000\": 15" + 
					"    }" + 
					"}";*/
						
			ColeccionHasStringInt cont =  gson.fromJson(salida, ColeccionHasStringInt.class);
			
			return cont.getColeccion();
			
		} catch (Exception e) {
		
		}
		return null;
	}

	public void verificarRepoArticulos(String token) {
		try {
			
			//String host = "encuentra.200.com.uy";
			////String host = "10.108.0.165:8080";
		
			String servicio = "http://"+host+"/WMS/Integraciones/OrderFunctions/verificarRepoArticulos?token="+token; 

			
			
			callWSPOST_ParamJSON(servicio,"");						
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public List<DataIDDescripcion> putMaestros(String token, List<DataIDDescripcion> datos, String tabla)
	{
			
		try {
			
			//String host = "encuentra.200.com.uy";
			
			String servicio = "http://"+host+"/WMS/Integraciones/Synchronizer/putMasters?tabla="+tabla+"&token="+token; 
			Gson gson = new Gson();
			
			String jsonList = gson.toJson(datos);
			
			String salida =  callWSPOST_ParamJSON(servicio, jsonList);
			
			
			ContenedorListaDataIdDesc cont =  new ContenedorListaDataIdDesc(salida);
			return cont.getDatos();
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public List<DTO_Articulo> putArticulos(String token, List<DTO_Articulo> datos)
	{
			
		try {
			
			//String host = "encuentra.200.com.uy";
			
			String servicio = "http://"+host+"/WMS/Integraciones/Synchronizer/putItems?token="+token; 
			
			Gson gson = new Gson();
			
			String jsonList = gson.toJson(datos);
			
			String salida =  callWSPOST_ParamJSON(servicio, jsonList);
			
			
			ContenedorListaDTO_Articulo cont =  new ContenedorListaDTO_Articulo(salida);
			return cont.getDatos();
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	
	public String putStk(String token, List<StockDeposito> datos)
	{
			
		try {
			
			//String host = "encuentra.200.com.uy";
			
			String servicio = "http://"+host+"/WMS/Integraciones/Synchronizer/putStk?token="+token; 
			
			Gson gson = new Gson();
			
			String jsonList = gson.toJson(datos);
			
			String salida =  callWSPOST_ParamJSON(servicio, jsonList);
			
			
			
			return salida;
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public String putDeposM(String token, List<DepositoMayorista> datos)
	{
			
		try {
			
			//String host = "encuentra.200.com.uy";
			
			String servicio = "http://"+host+"/WMS/Integraciones/Synchronizer/putWhs?token="+token; 
			
			Gson gson = new Gson();
			
			String jsonList = gson.toJson(datos);
			
			String salida =  callWSPOST_ParamJSON(servicio, jsonList);
			
			
			
			return salida;
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		return null;
	}

	public void updateDestinoPedido(String token,EncuentraPedido p, int destino, double montoEnvio) 
	{
		
		try {
			
			
			
			String servicio = "http://"+host+"/WMS/Integraciones/SaveOrders/saveDestino?destino="+destino+"&costoEnvio="+montoEnvio+"&token="+token; 
			
			
			Gson gson = new Gson();
			
			String jsonP = gson.toJson(p);
			
			callWSPOST_ParamJSON(servicio, jsonP);
			
			
			
			
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		
	}

	public Hashtable<Integer, String> darParametros(String token) 
	{
		try 
		{
			
			String servicio = "http://"+host+"/WMS/Integraciones/Views/parametros?token="+token;
			Gson gson = new Gson();
			String json = "";
			json = "{ \"coleccion\" : "+json+"}";
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
						
			ColeccionHasIntString cont =  gson.fromJson(salida, ColeccionHasIntString.class);
			return cont.getColeccion();
			
		} 
		catch (Exception e) 
		{
		
		}
		return null;
	}

	public void savePickingOrder(String token, List<ArticuloRepoFromLoad> lista) 
	{
		
	try {
			
		
		
			String servicio = "http://"+host+"/WMS/Integraciones/SaveOrders/savePickingOrder?token="+token; 
			Gson gson = new Gson();
			
			String json = gson.toJson(lista, ArrayList.class);
			System.out.println(json);
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			
			
			
			System.out.println(salida);
			
			
			
		} catch (Exception e) {
		
		}
		
	}

	public EncuentraPedido darIdPedido(String token, String track) 
	{
		

		try {
			
			
			
			String servicio = "http://"+host+"/WMS/Integraciones/DarDatosPutOrders/pedidoFromTracking?tracking="+track+"&token="+token; 
			
			
			Gson gson = new Gson();
			
			
			
			String salida = callWSPOST_ParamJSON(servicio, "");
			
			EncuentraPedido p = gson.fromJson(salida, EncuentraPedido.class);
			
			return p;
			
			
			
			
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		return null;	
	}

	public void updateOrdersStatus(String token, String dataArticuloEcommerceVerifR)
	{
		
		try 
		{
			String servicio = "http://"+host+"/WMS/Integraciones/OrderFunctions/updateStatus?token="+token; 
			String salida = callWSPOST_ParamJSON(servicio, dataArticuloEcommerceVerifR);
			System.out.println(salida);
					
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
	}
	
	
}

