package aTest;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import com.itextpdf.text.pdf.ArrayBasedStringTokenizer;

import beans.encuentra.Cliente;
import beans.encuentra.Clientes;
import beans.encuentra.EncuentraPedido;
import beans.encuentra.EncuentraPedidoArticulo;
import beans.encuentra.EncuentraPedidoArticuloReq;
import clienteAPIEncuentra.Call_WS_APIENCUENTRA;
import dataTypes.DataIDDescripcion;
import logica.LogicaAPI;
import marketPlaceIntegrations.CanalMarketPlace;
import marketPlaceIntegrations.Fenicio.FenicioBAS;

public class ClienteBASFenicio 
{
 
	public static void main(String[] args) 
	{
		FenicioBAS f = new FenicioBAS();
		
		 Hashtable<Integer, CanalMarketPlace> canales = f.getCanales();
		 
		 List<CanalMarketPlace> canalesL = new ArrayList<CanalMarketPlace> (canales.values());
		 Call_WS_APIENCUENTRA cen = new Call_WS_APIENCUENTRA();
		 LogicaAPI logica = new LogicaAPI();
		 String token = logica.darToken(f.getIdEmpresa());
		 
		 Hashtable<Integer, String> parametros = cen.darParametros(token);
		 
		 int idDepoOrigen = Integer.parseInt(parametros.get(4));
		
		 
		 List<Cliente> clientes = new ArrayList<Cliente>();
		 
		 
		 for (CanalMarketPlace canal : canalesL) 
		 {
			 List<EncuentraPedido> pedidos = f.getPedidos(canal.getId());
			 
			 for (EncuentraPedido p : pedidos) 
			 {
				 p.setCanalAnaloga(canal.getId());
				 p.setCanalMercadoLibre(new DataIDDescripcion(canal.getId(),canal.getNombre()));
				 p.setIdPedidoSTR(p.getIdPedido()+"");
				 
				 p.getCliente().setIdPedido(p.getIdPedido()+"");
				 clientes.add(p.getCliente());
				
				for (EncuentraPedidoArticulo ar : p.getArticulosPedido()) 
				{
					String articulo=ar.getArticulo().substring(1, ar.getArticulo().length());
					if(ar.getArticulo().startsWith("0"))
					{
						
						ar.setArticulo(articulo);
						ar.setOrigen(idDepoOrigen);
						
					}
					
					EncuentraPedidoArticuloReq are = new EncuentraPedidoArticuloReq();
					are.setArticulo(articulo);
					are.setCantReq(ar.getCantidad());
					are.setDeposito(idDepoOrigen);
					
					
					p.getArticulosPedidoReq().add(are);
					
					
				}
				
			 }
			 
			// cen.SaveCustomers(token, clientes);
			 cen.SaveOrders(token, pedidos);
			 cen.SaveOrdersArticulosReq(token, pedidos);
			 
			 
			 for (EncuentraPedido p : pedidos) 
			 {
				 cen.updateDestinoPedido(token, p, p.getIdDepositoEnvio(), p.getMontoEnvio());
			 }
			 
			 
		}
		 
		 
		 
		 
	}
	
}

