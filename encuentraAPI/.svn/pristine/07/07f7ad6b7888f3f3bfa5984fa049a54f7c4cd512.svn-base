package Couriers;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.PDFTextStripperByArea;
import org.json.JSONObject;
import org.json.XML;

import com.google.gson.Gson;

import cliente_rest_Invoke.Call;
import dataTypes.DataDescDescripcion;
import dataTypes.DataIDDescripcion;
import helper.PropertiesHelperAPI;

import jsonObjects.JSONresultDAC;
import jsonObjects.JsonRespuestaDAC;
import json_objects.JSONbarriosDAC;
import json_objects.barriosDAC;
import logica.Logica;

public class Call_WS_DAC {

	private String getToken(){
		Gson gson = new Gson();
		JSONresultDAC result;
		String retorno = "";
		String token = "";
		String json = "{"+
						"\"Login\":\"3213\","+
						"\"Contrasenia\":\"3213\""+
					   "}";
		
		try{
			List<DataIDDescripcion> tokens = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT TIME_TO_SEC(timediff(CURRENT_TIMESTAMP(),Obtenido)) tiempo,token FROM apitoken_cliente WHERE idCliente = 1");
			if(!tokens.isEmpty())
			{
				DataIDDescripcion tokenDID = tokens.get(0);
				if(tokenDID.getId()<1800)//una hora de vida
				{
					return tokenDID.getDescripcion();
				}
				else
				{				
					retorno = callWSPOST_ParamJSON("http://altis-web.grupoagencia.com:8087/JAgencia.asmx/wsLogin",json); 
					result = new JSONresultDAC();
					result = gson.fromJson(retorno, JSONresultDAC.class);
					token = result.getData()[0].getID_Session();
					
					Logica.persistir("UPDATE apitoken_cliente SET token='"+token+"' WHERE  `idCliente`=1;");
					return token;
				}
			}
			else
			{
				retorno = callWSPOST_ParamJSON("http://altis-web.grupoagencia.com:8087/JAgencia.asmx/wsLogin",json); 
				result = new JSONresultDAC();
				result = gson.fromJson(retorno, JSONresultDAC.class);
				token = result.getData()[0].getID_Session();
				
				Logica.persistir("insert into apitoken_cliente (idCliente,token) values (1,'"+token+"') ;");
				return token;
			}
		}
		catch(Exception e){
			return "";
		}
	}
	
	private barriosDAC getBarrios(String session,String barrio){
		Gson gson = new Gson();
		barriosDAC br = new barriosDAC();
		JSONbarriosDAC result;
		String retorno = "";
		String token = "";
		String json = "{"+
						"\"Barrrio\":\""+barrio+"\","+
						"\"ID_Sesion\":\""+session+"\""+
					   "}";
		
		try{
			
			retorno = callWSPOST_ParamJSON("http://altis-web.grupoagencia.com:8087/JAgencia.asmx/wsBarrio",json); 
			result = new JSONbarriosDAC();
			result = gson.fromJson(retorno, JSONbarriosDAC.class);
			
			for(barriosDAC j:result.getBarrio()){
				if(barrio.toUpperCase().equals(j.getD_Barrio().toUpperCase())){
					br=j;
				}
			}
			
			return br;
			
		}
		catch(Exception e){
			return br;
		}
	}
	
	private barriosDAC postGuia(String session,String barrio){
		Gson gson = new Gson();
		barriosDAC br = new barriosDAC();
		JSONbarriosDAC result;
		String retorno = "";
		String token = "";
		String json = "{"+
						"\"Barrrio\":\""+barrio+"\","+
						"\"ID_Sesion\":\""+session+"\""+
					   "}";
		
		try{
			
			retorno = callWSPOST_ParamJSON("http://altis-web.grupoagencia.com:8087/JAgencia.asmx/wsBarrio",json); 
			result = new JSONbarriosDAC();
			result = gson.fromJson(retorno, JSONbarriosDAC.class);
			
			for(barriosDAC j:result.getBarrio()){
				if(barrio.toUpperCase().equals(j.getD_Barrio().toUpperCase())){
					br=j;
				}
			}
			
			return br;
			
		}
		catch(Exception e){
			return br;
		}
	}
	
	public DataDescDescripcion getEtiqueta (String oficina, String guia){
		
		Gson gson = new Gson();
		JsonRespuestaDAC pegote;
		String retorno = "";
		String token = "";
		String barra = "";
		
		try{
			token = getToken();
					
			/*String json = "{"+
					"\"K_Oficina\":\""+oficina+"\","+
					"\"K_Guia\":\""+guia+"\","+
					"\"CodigoPedido\":\"\","+
					"\"ID_Sesion\":\""+token+"\""+
				   "}";
			 */
			List<DataIDDescripcion> params = new ArrayList<DataIDDescripcion>();
			DataIDDescripcion p = new DataIDDescripcion();			
			p.setDescripcion("K_Oficina");
			p.setDescripcionB(oficina);
			params.add(p);
			p = new DataIDDescripcion();			
			p.setDescripcion("K_Guia");
			p.setDescripcionB(guia);
			params.add(p);
			p = new DataIDDescripcion();			
			p.setDescripcion("CodigoPedido");
			p.setDescripcionB("");
			params.add(p);
			p = new DataIDDescripcion();			
			p.setDescripcion("ID_Sesion");
			p.setDescripcionB(token);
			params.add(p);
			
			retorno = callWSPOSTparam("http://altis-web.grupoagencia.com:8089//GAgencia.asmx/wsGetPegote",params).replace("Nombre", "nombre").replace("Pegote", "pegote");
			JSONObject xmlJSONObj = XML.toJSONObject(retorno);
            String jsonRetorno = xmlJSONObj.toString(4);
            System.out.println(jsonRetorno);
			
			pegote = gson.fromJson(jsonRetorno, JsonRespuestaDAC.class);
			retorno = pegote.getPegoteResponse().getWS_pegote().getPegote();
			
			//PASO A PDF
			String path ="";
			try
			{
				PropertiesHelperAPI pH=new PropertiesHelperAPI("paths");
				pH.loadProperties();
				path = pH.getValue("pdf");
				String filePath = path+oficina+"-"+guia+".pdf";
				
				 // Encode using basic encoder
		         //String base64encodedString = retorno.getPdfserializado();
		         
		         System.out.println("Base64 encoded string :" + retorno);

		         // Decode
		         byte[] base64decodedBytes = Base64.getDecoder().decode(retorno);

				 File file = new File(filePath);
		         file.delete();
		         
		         FileOutputStream fos = new FileOutputStream(new File(filePath));
		         
		         String str = retorno;
		         
		         InputStream in = new ByteArrayInputStream(base64decodedBytes);
		         
		         int inByte;
		            while ((inByte = in.read()) != -1) {
		                fos.write(inByte);
		            }
		 
		            in.close();
		           
		            
		         
		         fos.write(str.getBytes());
		         
		         
		         fos.close();
		         
		         
		         File f = new File(filePath);
			     if(f.exists())
			     {
			    	 path = pH.getValue("HTTP_pdf");
			    	 
			    	 
			    	 
			    	
			    	 //es lo ultimo
			    	 try (PDDocument document = PDDocument.load(new File(filePath))) 
			    	 {

			             document.getClass();

			             if (!document.isEncrypted()) {
			 			
			                 PDFTextStripperByArea stripper = new PDFTextStripperByArea();
			                 stripper.setSortByPosition(true);

			                 PDFTextStripper tStripper = new PDFTextStripper();

			                 String pdfFileInText = tStripper.getText(document);
			                
			                 String lines[] = pdfFileInText.split("\\r?\\n");
			                 for (String line : lines) 
			                 {
			                     barra = line;
			                 }
			                 System.out.println(barra);

			             }

			         }
			    	 catch (Exception e) 
			    	 {
						// TODO: handle exception
					}
			    	 
			    	 
			    	 
			    	 
			        return  new DataDescDescripcion(barra, path+"/"+oficina+"-"+guia+".pdf");
			     }
			     else
			     {
			    	 return new DataDescDescripcion("","");
			     }
		         				
			}
			catch (Exception e) 
			{
			 e.printStackTrace();
			}
			
			return  new DataDescDescripcion(barra, path+"/"+oficina+"-"+guia+".pdf");
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new DataDescDescripcion("","");
		}
		
	}
	
	
	private String callWSPOST_ParamJSON(String URLbase, String jotason)
	{
		String retorno = "";
		HttpClient httpClient = HttpClientBuilder.create().build();
		try 
		{
	    	
	    	System.out.println("llamando a "+URLbase);
	    	System.out.println("Parametros JSON "+jotason);
	    	System.out.println("Respuesta");

	    	String payload = jotason;
	    	StringEntity entityI;
	    	
	    	entityI = new StringEntity(payload, ContentType.APPLICATION_JSON);
	    
	    	HttpPost request = new HttpPost(URLbase);
	    	request.setEntity(entityI);
	    	
		  	HttpResponse httpResponse = httpClient.execute(request);
		  	
		  	
		  	int code=httpResponse.getStatusLine().getStatusCode();
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          return strFileContents;
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          request.abort();
		          runtimeException.printStackTrace();
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		System.out.println(retorno);
		return retorno;
		
	}
	
	public String callWSPOSTparam(String URLbase, List<DataIDDescripcion> params)
	{
		
	
		String retorno = "";
		HttpClient httpClient = new DefaultHttpClient();
		
	    try 
		{
	    	
	    	System.out.println("Respuesta");
	    	HttpPost httpPostRequest = new HttpPost(URLbase);
	    	
	    	//StringEntity params =new StringEntity(jotason);
	    	httpPostRequest.setHeader("Content-type", "application/x-www-form-urlencoded");
	    	
	    	//httpPostRequest.setEntity(params);
	    	
	    	ArrayList<NameValuePair> postParameters;
	    	postParameters = new ArrayList<NameValuePair>();
	    	for(DataIDDescripcion p:params){
	    		postParameters.add(new BasicNameValuePair(p.getDescripcion(), p.getDescripcionB()));
	    	}
	        
	        httpPostRequest.setEntity(new UrlEncodedFormEntity(postParameters, "UTF-8"));    	
	    	
	    	
		  	HttpResponse httpResponse = httpClient.execute(httpPostRequest);
		  	int code=httpResponse.getStatusLine().getStatusCode();
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          System.out.println(strFileContents);
		          return strFileContents;
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          httpPostRequest.abort();
		          runtimeException.printStackTrace();
		          return "error";
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		      return "error";
		      
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		      return "error";
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		return retorno;
	
		
	}
	
}

