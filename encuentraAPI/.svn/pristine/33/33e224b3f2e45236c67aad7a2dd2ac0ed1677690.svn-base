package clientesVisual_Store.elRey;


import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Holder;
import javax.xml.ws.Response;

import clientesVisual_Store.elRey.GrabarPersonaCliente.DsDatos;
import clientesVisual_Store.elRey.GrabarPersonaClienteResponse.GrabarPersonaClienteResult;
import dataTypes.DataBooleanDesc;
import dataTypes.DataIDDescripcion;
import persistencia.MSSQL;
import persistencia._EncuentraPersistir;

public class ClienteWSVisualELREY 
{

	private short equipo = 1250;
	private Long empresa = (long) 1;
	private short tienda = 1;
	private Long usuario =(long) 1250;
	
	SWNadWeb service = new SWNadWeb();
	SWNadWebSoap port = service.getSWNadWebSoap();
	
	public void AltaCliente() {
		Holder<GrabarPersonaClienteResult> result = new Holder<GrabarPersonaClienteResult>();
		DsDatos dsDatos = new DsDatos();
		Holder<String> msj = new Holder<String>();
		
		port.grabarPersonaCliente(dsDatos, msj, result);
	}
	
	public void AltaOrdenVenta() {
		//port.grabarOrdenVenta(dsDatos, mensaje, dsArtSinStk, entregaDemorada, grabarOrdenVentaResult, dsArtSinStk0);
	}
	
	public void GrabarFactura() {
		
	}
	
	public DataIDDescripcion GrabarTransferencia(int origen, int destino, int razon,List<DataIDDescripcion>lista, String coments){
		
		
		String xmlDetalle=this.ArmarXMLDetalle(lista);
		Holder<Integer> tr = new Holder<Integer>();
		Holder<String> msj = new Holder<String>();
		
		DataIDDescripcion data = new DataIDDescripcion();
		data.setDescripcion("");
		int nvoDoc = 0;
		try 
	    {
			DataBooleanDesc comprobacion = ComprobacionStock(lista,origen);
			if(comprobacion.isBool()){
				Integer tiend = origen;
				  short tienda_s = tiend.shortValue();
				  System.out.println(tienda_s);
				  int intentos = 0;
				  boolean ok = false;
					  while (intentos < 3 && !ok) 
					  {
						  
						  String fecha = getXMLGregorianCalendarNow().toString();
					  intentos++;
					  //port.
					  if(tr.value!=null && tr.value!=0) {
						  ok = true;
					  }
				  }
				
							
				try {
					if(tr.value!=null){
						System.out.println(tr.value);
						nvoDoc = tr.value;
						data.setId(nvoDoc);
					}
					if(msj.value!=null){
						System.out.println(msj.value);
						String menError = msj.value;
						menError = menError.substring(1,menError.length());
						data.setDescripcion(menError);
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
				data.setIdB(intentos);
			}
			else{
				data.setDescripcion(comprobacion.getDescricpion());
				data.setId(0);
				data.setIdB(1);
			}
			
			return data;
		} 
	    catch (Exception e) 
		{
			e.printStackTrace();
			return data;
		}
	}
		
	
	public boolean ConfirmarTransferencia(int origen, int destino, int numeroDoc,List<DataIDDescripcion>lista, String coments,short idTienda){
		
		String xmlDetalle=this.ArmarXMLDetalle(lista);
		Holder<Boolean> tr = new Holder<Boolean>();
		Holder<String> msj = new Holder<String>();
		try 
	    {
			//port.confirmarTransferencia(msj, usuario, equipo, idTienda, empresa, (short)origen, (short)destino, numeroDoc, xmlDetalle, tr);
			
			return true;
		} 
	    catch (Exception e) 
		{
			e.printStackTrace();
			return false;
		}
	}
	
	
	public boolean GrabarArtBarra(String art, String barra){
		Holder<Boolean> tr = new Holder<Boolean>();
		Holder<String> msj = new Holder<String>();
		try 
	    {
			//port.grabarArtBarra(msj, tienda, empresa, art,barra, false, tr);
						
			return true;
		} 
	    catch (Exception e) 
		{
			e.printStackTrace();
			return false;
		}
	}
	
	public XMLGregorianCalendar getXMLGregorianCalendarNow() 
            throws DatatypeConfigurationException
    {
        GregorianCalendar gregorianCalendar = new GregorianCalendar();
        DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
        XMLGregorianCalendar now = 
            datatypeFactory.newXMLGregorianCalendar(gregorianCalendar);
        return now;
    }
	
	public String ArmarXMLTipoAfecta(List<DataIDDescripcion>lista){
		String xml="<NewDataSet>";
		for(int i=0;i<lista.size();i++)
		{
			  xml=xml+"<Detalle>";
			  xml=xml+"<OCC – Orden de Compra>"+lista.get(i).getDescripcion()+"</OCC – Orden de Compra>";
			  xml=xml+"<IMP - Importación>"+lista.get(i).getDescripcionB()+"</IMP - Importación>";
			  xml=xml+"</Detalle>";
		}
		xml=xml+"</NewDataSet>";
		return xml;
	}
	
	public String ArmarXMLDetalle(List<DataIDDescripcion>lista){
		String xml="<NewDataSet>";
		for(int i=0;i<lista.size();i++){
			  xml=xml+"<Detalle>";
			  xml=xml+"<IdArticulo>"+lista.get(i).getDescripcion()+"</IdArticulo>";
			  xml=xml+"<Cantidad>"+lista.get(i).getId()+"</Cantidad>";
			  xml=xml+"</Detalle>";
		}
		xml=xml+"</NewDataSet>";
		return xml;
	}
	
	public String ArmarXMLDetalleEntrega(List<DataIDDescripcion>lista){
		String xml="<NewDataSet>";
		for(int i=0;i<lista.size();i++){
			  xml=xml+"<Detalle>";
			  xml=xml+"<IdArticulo>"+lista.get(i).getDescripcion()+"</IdArticulo>";
			  xml=xml+"<IdDepEntrega>"+lista.get(i).getIdB()+"</IdDepEntrega>";
			  xml=xml+"<Cantidad>"+lista.get(i).getId()+"</Cantidad>";
			  xml=xml+"</Detalle>";
		}
		xml=xml+"</NewDataSet>";
		return xml;
	}

	public DataBooleanDesc ComprobacionStock(List<DataIDDescripcion>lista, int origen){
		DataBooleanDesc data = new DataBooleanDesc();
		boolean comprobacion = true;
		String msj = "";
		try {
			Hashtable<String, Integer> stocks = new Hashtable<String, Integer>();//MSSQL.darStocks(lista, origen);
			
			for(DataIDDescripcion l:lista){
				if(stocks.get(l.getDescripcion())!=null){
					if(stocks.get(l.getDescripcion())<l.getId()){
						msj += l.getDescripcion()+",";
						comprobacion = false;						
					}
				}
				else{
					msj += l.getDescripcion()+",";
					comprobacion = false;					
				}
			}
			
			if(!msj.equals("")){
				msj = msj.substring(0,msj.length()-1);
				msj = "No hay stock suficiente de los siguientes articulos: "+msj;
			}
			data.setBool(comprobacion);
			data.setDescricpion(msj);
			
		} catch (Exception e) {
			data.setBool(false);
			data.setDescricpion("No se pudo comprobar el stock");
		}
		
		return data;
		
	}
}
