package integraciones.mains.forusUY;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import com.itextpdf.text.DocumentException;
import beans.jsonEstadoMP;
import beans.api.Utilidades;
import beans.datatypes.DataIDDescripcion;
import beans.encuentra.DataArticuloEcommerceVerifR;
import beans.encuentra.DataEcommerce_canales_envio;
import beans.encuentra.EncuentraPedido;
import beans.encuentra.EncuentraPedidoArticulo;
import beans.encuentra.Fecha;
import beans.encuentra.IPrint;
import integraciones.marketplaces.fenicio.Ordenes;
import integraciones.marketplaces.fenicioTrack.FenicioForusUY;
import integraciones.marketplaces.forus.GetPedidosForusVS;
import integraciones.marketplaces.objetos.CanalMarketPlace;
import integraciones.wms.Call_WS_APIENCUENTRA;
import logica.LogicaAPI;

public class ClienteMArketplacesForusUY {

	public static void main(String[] args) {
		
		FenicioForusUY f = new FenicioForusUY();
		
		Map<Integer, CanalMarketPlace> canales = f.getCanales();

		List<CanalMarketPlace> canalesL = new ArrayList<>(canales.values());

		LogicaAPI logica = new LogicaAPI();
		String token = logica.darToken(f.getIdEmpresa());
		Call_WS_APIENCUENTRA wms = new Call_WS_APIENCUENTRA();
		Map<Integer, String> parametros = wms.darParametros(token, "");
		Map<Integer, String> integraciones = wms.darIntegraciones(token);
		
		String cambioEstado = integraciones.get(3) != null ? integraciones.get(3) : "0";

		int idDepositoEcommerce = Integer.parseInt(parametros.get(5));
		int idDepositoCentral = Integer.parseInt(parametros.get(4));
		int diasBusqueda = 4;
		
		
		
		
		
		
		
		
		
		Hashtable<String, DataIDDescripcion> destinoPedidos  = new Hashtable<String, DataIDDescripcion>();
		List<DataIDDescripcion> depositosDestino = wms.DarDatosPutOrders(token, 2);
		GetPedidosForusVS gp = new GetPedidosForusVS();
		
		for (CanalMarketPlace canal : canalesL) 
		{
			//0 buscamos los destinos de los pedidos
			destinoPedidos= f.DestinoPedidos(canal.getId(), diasBusqueda,destinoPedidos);
		}
		
		

		for (CanalMarketPlace canal : canalesL) 
		{
			
			try
			{
				// 1 - le pedimos los pedidos a fenicio API (son datos complementarios)
				List<Ordenes> pedidosFenicio = f.getPedidosAPI(canal.getId(), diasBusqueda);
				// 2 - le pedimos los pedidos a VISUAL STORE estructura del pedido
				Hashtable<Long, EncuentraPedido> pedidosVS = gp.getPedidos(f.getIdEmpresa(), destinoPedidos,canal.getId(),depositosDestino);
				List<EncuentraPedido> pedidosALL = new ArrayList<EncuentraPedido>(pedidosVS.values());
				// 3 - traemos los pedidos de encuentra para determinar cuales son los que debemos sincronizar y cuales no
				Map<String, String> pedidosEncuentra = wms.PedidosID(token, diasBusqueda, "");
				// 4 traemos los pedidos de la base de Visual de forus
				
				//esta es la lista de pedidos buenos, los que vamos a meter en encuentra
				List<EncuentraPedido> pedidos = new ArrayList<>();
				
				//
				for (EncuentraPedido p : pedidosALL) {
					if (!pedidosEncuentra.containsKey(p.getIdPedido() + "")) {
						p.setTrackingNumber(p.getIdPedido() + "");
						List<EncuentraPedidoArticulo> removes = new ArrayList<>();

						for (EncuentraPedidoArticulo a : p.getArticulosPedido()) {
							if (a.getImporte()!=null && a.getImporte() < 0.0) {
								p.setCantidad(p.getCantidad() - a.getCantidad());
								removes.add(a);
							}
						}

						if (!removes.isEmpty()) {
							for (EncuentraPedidoArticulo r : removes) {
								p.getArticulosPedido().remove(r);
							}
						}

						pedidos.add(p);

					}
				}

				List<DataIDDescripcion> listaOK = wms.SaveOrders(token, pedidos);

				List<EncuentraPedido> pedidos2 = new ArrayList<>();
				List<jsonEstadoMP> estadosMP = new ArrayList<>();

				for (DataIDDescripcion pl : listaOK) {
					for (EncuentraPedido p : pedidos) {
						if (((p.getIdPedido()) + "").equals(pl.getDescripcion()) && pl.getDescripcionB().equals("OK")) 
						{
							pedidos2.add(p);
							if (cambioEstado != null && cambioEstado.equals("1")) {
								jsonEstadoMP estado = new jsonEstadoMP(p.getIdPedido() + "", 0, p.getIdPedido(),
										f.JSONUpdateState(p.getIdPedido(), p.getIdPedido() + "", "", 1), canal.getId(),
										f.getIdEmpresa());
								estadosMP.add(estado);
							}
						}
					}
				}

				if (!estadosMP.isEmpty()) {
					LogicaAPI.putColaEstadoMarketPlace(estadosMP);
				}

				pedidos = pedidos2;

				
				Hashtable<String, DataIDDescripcion> pedidosHT =new  Hashtable<String, DataIDDescripcion>();
				for (EncuentraPedido p : pedidos) 
				{
					//Ordenes ovf = f.OrdenVentaFenicio(p.getIdPedido(), f.getIdEmpresa(), 1);
					try 
					{
						boolean found = false;

						
						for (DataIDDescripcion d : depositosDestino) 
						{
							if (d.getDescripcion().equals(p.getEmpresaEnvio())) 
							{
								p.setIdDepositoEnvio(d.getId());
								p.setShippingType(new DataIDDescripcion(1, ""));
								found = true;
								break;
							}
							
						}
						if (!found) 
						{
							
							p.setShippingType(new DataIDDescripcion(1, ""));
							System.out.println("No encontre " + p.getEmpresaEnvio());
							p.setIdDepositoEnvio(0);
							

						}
					} catch (Exception e) {
						p.setShippingType(new DataIDDescripcion(1, ""));
						e.printStackTrace();
						p.setIdDepositoEnvio(0);
					}
				
					DataIDDescripcion pdid = new DataIDDescripcion(0, p.getIdPedido()+"");
					pedidosHT.put(p.getIdFenicio()+"", pdid);
					
				}

				System.out.println("");
				wms.SaveOrdersArticulosReq(token, pedidos, canal.getId());

				pedidos = gp.setEtiquetas(pedidosHT, canal.getId(), token, diasBusqueda);
				
				
				
				for (EncuentraPedido p : pedidos) 
				 {
					wms.updateDestinoPedido(token, p, p.getIdDepositoEnvio(), p.getMontoEnvio());
					 
				 }
				
				
				
				/*
				for (EncuentraPedido p : pedidos) 
				{
					if (p.isPreparaTienda()) {
						p.setShippingType(new DataIDDescripcion(3, ""));
					}
					wms.updateDestinoPedido(token, p, p.getIdDepositoEnvio(), p.getMontoEnvio());
					/************ orden de venta ***********
					p.getOrden().save("", f.getIdEmpresa());
				}
				// CONSULTO ESTADO DE DESPACHADOS
				Map<String, String> pedidosDespachados = wms.PedidosID(token, 30, "4");
				List<DataIDDescripcion> entregados = f.tackPedidosDespachados(pedidosDespachados, canal.getId());
				if (!entregados.isEmpty()) {
					wms.updateOrdersStatus(token, entregados);
				}
				*/
			}
			catch (Exception e) 
			{
				
			}
			
		} // for de canales
	}



}
