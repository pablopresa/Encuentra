package beans;

import json_objects.SendMail;
import java.util.ArrayList;

import java.util.List;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;


import logica.LogicaAPI;


public class MailAS_Service 
{

	private int id;
	
	public MailAS_Service() 
	{
		
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	

  public static void main(String[] args) throws InterruptedException
  {  
	  String empresa = "2";
	  
	  
		  System.out.println("iniciando");
		  List <SendMail> mails = null;
		  List<String> mailDestinos = null;
		  int send = 0;
		  String[] destinos = null;
		while(true){
			try 
			{	
				send = 0;
				mails = LogicaAPI.darListaToSend(empresa);
				for(SendMail m: mails){
					try {
						if(!m.getBody().equals("") && !m.getDestino().equals("")){
							mailDestinos =new ArrayList<String>();
							destinos = m.getDestino().split(",");
							for (String d : destinos) {
								mailDestinos.add(d);
							}
							
							if(m.getOrigen().contains("encuentra")){
								send = enviarMailHTMLOD("encuentra@200.com.uy",mailDestinos, m.getAsunto(), m.getBody());
							}
							else{
								send = enviarMailHTMLOD_FORUS(mailDestinos, m.getAsunto(), m.getBody());
							}							
							
							LogicaAPI.persistir("update mail_spooler set send = "+send+" where id ='"+m.getId()+"' and idEmpresa ="+empresa);
							
						}
					} catch (Exception e) {
						// TODO: handle exception
					}
					
				}

			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}
			
			Thread.sleep(60000);
		}
		
  }
  
  public static int enviarMailHTMLOD_FORUS( List<String> mailDestinos, String asunto, List<String> body)
	{
	  	int send = -1;
		try
		 {
			String all_body = "";
			for(String b:body){
				all_body += b;
			}
			Authenticator auth = new Authenticator() {
		        @Override
		        protected PasswordAuthentication getPasswordAuthentication() {
		            // TODO Auto-generated method stub
		            return new PasswordAuthentication("no-responder@forusuruguay.com.uy", "!n0_r3plYHP!!");
		        }
		    };
			
			 String host = "smtp.forusuruguay.com.uy";
			    String from = "no-responder@forusuruguay.com.uy";
			    
			
			    // Get system properties
			    Properties props = System.getProperties();
			
			    // Setup mail server
			    props.put("mail.smtp.host", host);
			    props.put("mail.smtp.auth", "true");
			
			    // Get session
			    Session session = Session.getDefaultInstance(props, auth);
			
			    // Define message
			    MimeMessage message = new MimeMessage(session);
			    message.setFrom(new InternetAddress(from));
			    for (String to : mailDestinos) 
			    {
			    	message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
				}
			    
			    
			    message.setSubject(asunto);
			    			    
			    message.setText(all_body, "utf-8", "html");
			    session.setDebug(true);
			    // Send message
			    Transport.send(message);
			    send = 1;
			 
		 }
		 catch (Exception e) 
		 {
			 System.out.println(e.getMessage());
		 }
		
		return send;
	
	}
		
  public static int enviarMailHTMLOD(String mailOrigen, List<String> mailDestinos, String asunto, List<String> body)
	{
	  	int send = -1;
		try
		 {
			String all_body = "";
			for(String b:body){
				all_body += b;
			}
			Authenticator auth = new Authenticator() {
		        @Override
		        protected PasswordAuthentication getPasswordAuthentication() {
		            // TODO Auto-generated method stub
		            return new PasswordAuthentication("encuentra@200", "@encuentra");
		        }
		    };
			
			 String host = "correo.200.com.uy";
			    String from = mailOrigen;
			    
			
			    // Get system properties
			    Properties props = System.getProperties();
			
			    // Setup mail server
			    props.put("mail.smtp.host", host);
			    props.put("mail.smtp.auth", "true");
			
			    // Get session
			    Session session = Session.getDefaultInstance(props, auth);
			
			    // Define message
			    MimeMessage message = new MimeMessage(session);
			    message.setFrom(new InternetAddress(from));
			    for (String to : mailDestinos) 
			    {
			    	message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
				}
			    
			    
			    message.setSubject(asunto);
			    
			    message.setText(all_body, "utf-8", "html");
			    session.setDebug(true);
			    // Send message
			    Transport.send(message);
			    send = 1;
			 
		 }
		 catch (Exception e) 
		 {
			 System.out.println(e.getMessage());
		 }
		
		return send;
	
	}		
}