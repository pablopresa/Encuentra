package clienteLaIsla;

import java.net.MalformedURLException;
import java.net.URL;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.xmlrpc.XmlRpcException;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;

import com.google.gson.Gson;
import com.sun.xml.wss.saml.internal.saml11.jaxb10.X509DataType.X509Certificate;

public class Pruebas {
	final String url = "https://laisla.quanam.com",
            db = "laisla",
      username = "ws_encuentra",
      password = "1234";
	
	public static void main(String[] args) {
		Pruebas pruebas = new Pruebas();
		int uid = pruebas.devolverUID();
		try {
			pruebas.obtenerCategorias(uid);
			//pruebas.obtenerAtributosLinea(uid);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int devolverUID() {
		final XmlRpcClient client = new XmlRpcClient();
		final XmlRpcClientConfigImpl common_config = new XmlRpcClientConfigImpl();
		int uid = -1;
		try {
			
			// Create a trust manager that does not validate certificate chains
				TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
	               @Override
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
	                   return null;
	               }
	               public void checkClientTrusted(X509Certificate[] certs, String authType) {
	               }
	               public void checkServerTrusted(X509Certificate[] certs, String authType) {
	               }
					@Override
					public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
							throws CertificateException {
						// TODO Auto-generated method stub
						
					}
					@Override
					public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)
							throws CertificateException {
						// TODO Auto-generated method stub
						
					}
				}
				};

				// Install the all-trusting trust manager
				SSLContext sc = SSLContext.getInstance("SSL");
				sc.init(null, trustAllCerts, new java.security.SecureRandom());
				HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

				// 	Create all-trusting host name verifier
				HostnameVerifier allHostsValid = new HostnameVerifier() {
					@Override
					public boolean verify(String hostname, SSLSession session) {
						return true;
					}
				};

				// Install the all-trusting host verifier
				HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);  
			
			
			common_config.setServerURL(
				    new URL(String.format("%s/xmlrpc/2/common",url)));
			
			uid = (int)client.execute(
				    common_config, "authenticate", Arrays.asList(
				    		db, username, password, Collections.emptyList()));
			System.out.println(uid);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return uid;
	}
	
	public boolean callMethods(int uid) throws XmlRpcException, MalformedURLException {
		boolean retorno = false;
		final String url = "https://laisla.quanam.com",
	              db = "laisla",
	        username = "usr_encuentra",
	        password = "1234";
		List<String> miLista = new ArrayList<String>(Arrays.asList("read"));
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		retorno = (boolean) models.execute("execute_kw", Arrays.asList(
		    db, uid, password,
		    "res.partner", "check_access_rights",
		    miLista,
		    new HashMap() {{ put("raise_exception", false); }}
		));
		System.out.println(retorno);
		return retorno;
		}
	
	public HashMap<String, List<String>> obtenerCategorias(int uid) throws Exception {
		HashMap<String, List<String>> articulos = new HashMap<String, List<String>>();
		
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		
	 @SuppressWarnings("unchecked")
	final List<Object> arts = Arrays.asList((Object[])models.execute("execute_kw", Arrays.asList(
			    db, uid, password,
			    "product.category", "search_read",
			    Collections.emptyList(),
			    new HashMap() {{
			        put("fields", Arrays.asList("name"));
			    }}
			)));		
	 
		for (Object obj : arts) {
			System.out.println(obj.toString());
		}
		
		return articulos;
	}

	public HashMap<String, List<String>> obtenerMarcas(int uid) throws Exception {
		HashMap<String, List<String>> articulos = new HashMap<String, List<String>>();
		
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		
	 @SuppressWarnings("unchecked")
	final List<Object> arts = Arrays.asList((Object[])models.execute("execute_kw", Arrays.asList(
			    db, uid, password,
			    "product.marca", "search_read",
			    Collections.emptyList(),
			    new HashMap() {{
			        put("fields", Arrays.asList("name"));
			    }}
			)));		
	 
		for (Object obj : arts) {
			System.out.println(obj.toString());
		}
		
		return articulos;
	}
	
	public HashMap<String, List<String>> obtenerTemporadas(int uid) throws Exception {
		HashMap<String, List<String>> articulos = new HashMap<String, List<String>>();
		
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		
	 @SuppressWarnings("unchecked")
	final List<Object> arts = Arrays.asList((Object[])models.execute("execute_kw", Arrays.asList(
			    db, uid, password,
			    "product.temporada", "search_read",
			    Collections.emptyList(),
			    new HashMap() {{
			        put("fields", Arrays.asList("name"));
			    }}
			)));		
	 
		for (Object obj : arts) {
			System.out.println(obj.toString());
		}
		
		return articulos;
	}
	
	public HashMap<String, List<String>> obtenerTemplate(int uid) throws Exception {
		HashMap<String, List<String>> articulos = new HashMap<String, List<String>>();
		
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		
	 @SuppressWarnings("unchecked")
	final List<Object> arts = Arrays.asList((Object[])models.execute("execute_kw", Arrays.asList(
			    db, uid, password,
			    "product.template", "search_read",
			    Collections.emptyList(),
			    new HashMap() {{
			        put("fields", Arrays.asList("name", "sexo", "temporada", "ean13", "marca", "categoria", "default_code", "talle_proveedor", "color_proveedor"));  //, "attribute_line_ids"
			        put("limit", 1000);
			    }}
			)));		
	 
		for (Object obj : arts) {
			Gson gson = new Gson();
			String json = gson.toJson(obj);
			System.out.println(json);
		}
		
		return articulos;
	}
	
	/*public HashMap<String, List<String>> obtenerProveedores(int uid) throws Exception {
		HashMap<String, List<String>> articulos = new HashMap<String, List<String>>();
		
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		
	 @SuppressWarnings("unchecked")
	final List<Object> arts = Arrays.asList((Object[])models.execute("execute_kw", Arrays.asList(
			    db, uid, password,
			    "product.attribute.line", "search_read",
			    Collections.emptyList(),
			    new HashMap() {{
			        put("fields", Arrays.asList("name"));
			        put("limit", 100);
			    }}
			)));		
	 
		for (Object obj : arts) {
			Gson gson = new Gson();
			String json = gson.toJson(obj);
			System.out.println(json);
		}
		
		return articulos;
	}*/

	public HashMap<String, List<String>> obtenerAlmacenes(int uid) throws Exception {
		HashMap<String, List<String>> articulos = new HashMap<String, List<String>>();
		
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		
	 @SuppressWarnings("unchecked")
	final List<Object> arts = Arrays.asList((Object[])models.execute("execute_kw", Arrays.asList(
			    db, uid, password,
			    "stock.location", "search_read",
			    Collections.emptyList(),
			    new HashMap() {{
			        put("fields", Arrays.asList("name"));
			    }}
			)));		
	 
		for (Object obj : arts) {
			System.out.println(obj.toString());
		}
		
		return articulos;
	}
	
	public HashMap<String, List<String>> obtenerTallesColores(int uid) throws Exception {
		HashMap<String, List<String>> articulos = new HashMap<String, List<String>>();
		
		final XmlRpcClient models = new XmlRpcClient() {{
		    setConfig(new XmlRpcClientConfigImpl() {{
		        setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
		    }});
		}};
		
	 @SuppressWarnings("unchecked")
	final List<Object> arts = Arrays.asList((Object[])models.execute("execute_kw", Arrays.asList(
			    db, uid, password,
			    "product.attribute.value", "search_read",
			    Collections.emptyList(),
			    new HashMap() {{
			        put("fields", Arrays.asList("name", "attribute_id"));
			    }}
			)));		
	 
		for (Object obj : arts) {
			Gson gson = new Gson();
			String json = gson.toJson(obj);
			System.out.println(json);
		}
		
		return articulos;
	}
	
	
}
