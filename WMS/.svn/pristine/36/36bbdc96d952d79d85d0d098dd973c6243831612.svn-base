package webservices;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import com.google.gson.Gson;
import com.itextpdf.text.DocumentException;

import beans.Usuario;

import beans.encuentra.ContenedorListaPedidos;
import beans.encuentra.IPrint;
import cliente_rest_Invoke.Call_WS_analoga;
import dataTypes.DataArticuloEcommerceVerifR;
import dataTypes.DataIDDescripcion;
import eCommerce_jsonObjectsII.EncuentraPedido;
import eCommerce_jsonObjectsII.EncuentraPedidoArticulo;
import eCommerce_jsonObjectsII.Items;
import logica.Logica;
import logica.Utilidades;




@Path("/SaveOrders")
public class SaveOrders 
{
	@POST
	@Path("/save")

	//@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	//public String createUser(@FormParam("name") String name) throws IOException
	public String saveOrders(String data,@QueryParam ("token") String a) throws IOException
	{	   
		Logica l = new Logica();
		
		Gson gson = new Gson();
		String json = "";
		
		
		
		ContenedorListaPedidos cont =  new ContenedorListaPedidos(data);
		List<EncuentraPedido> listaPedidos = cont.getDatos();
		
		Usuario u = l.loginEncuentraAPI2(a);
		List<DataIDDescripcion> retorno = new ArrayList<DataIDDescripcion>();
		int idEmpresa = u.getIdEmpresa();
		String q = "";
		
		
		
		List<DataIDDescripcion> pedidoCentral = new ArrayList<DataIDDescripcion>();
		pedidoCentral = l.ArticulosECSinPedir(idEmpresa);
		
		for (EncuentraPedido p : listaPedidos) 
		{
			p.setIdFenicio(p.getIdEcommerce());
			DataIDDescripcion d = new DataIDDescripcion(0, p.getIdPedido()+"");
			d.setDescripcion(p.getIdPedido()+"");
			
			if(p.save(idEmpresa))
			{
				double montoEnvio = 0.0;
				if(p.getMontoEnvio()!=null)
				{
					montoEnvio =p.getMontoEnvio(); 
				}
				if(!p.updateDestino( Integer.parseInt(p.getSucursalPick()),p.getTrackingNumber(), idEmpresa,montoEnvio))
				{
					p.updateDestino(0,"", idEmpresa,montoEnvio);
				}
				d.setDescripcionB("OK");
				try
				{
					l.logPedido(p.getIdPedido(), 0, 0, "Pedido Sincronizado ",0,idEmpresa);
											
					DataIDDescripcion did;
					for (EncuentraPedidoArticulo it : p.getArticulosPedido())
					{
						if(it.getVariacion()==null)
						{
							it.setVariacion("");
						}
						did = new DataIDDescripcion(it.getCantidad(),it.getArticulo());
						did.setIdLong(p.getIdPedido());
						did.setDescripcionB(it.getVariacion());
						did.setIdB(0);
						pedidoCentral.add(did);							
						
						
						l.persistir("INSERT INTO `ecommerce_pedido_articulos_req` (`idPedido`, `idArticulo`, `Deposito`, `CantidadRequerida`,"+
								" `CantidadProcesasa`, `Confirmado`,cantConfirmada,docVisual, idEmpresa) " +
								" VALUES ('"+p.getIdPedido()+"', '"+it.getArticulo()+"', '"+it.getOrigen()+"', '"+it.getCantidad()+"', '0', '0',0,0,"+idEmpresa+");");
					
					
						l.logPedido(p.getIdPedido(), 0, 0, " Guardando pedido de articulo "+it.getArticulo()+
								" a deposito "+it.getOrigen(),0,idEmpresa);							
						
						
					}
					
				}
				catch (Exception e) 
				{
					System.out.println("error");
				}
				
				
			}
			else
			{
				d.setDescripcionB("FAIL");
			}
			
			
			
			
			
			
			
			
			
			
			retorno.add(d);
			
		}
		
		
		if(!pedidoCentral.isEmpty())
		{
			boolean manual = false;
			int idDepoCentral = 1;
			l.darArticuloRepoFromLoadForus(pedidoCentral,1200,manual,idEmpresa,idDepoCentral);
		}	
		
		
		
		
		json = gson.toJson(retorno);
		
		
		try
		{
			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		String padre = "{ \"idTabla\":0,\"datos\": ";
		return padre+json+"}";
	   }	

}
