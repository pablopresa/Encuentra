package web.picking;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import beans.Fecha;
import beans.Usuario;
import beans.bulto;
import beans.bultoContenido;
import beans.encuentra.DataPicking;
import logica.Logica;
import logica.Utilidades;

public class _EncuentraConfirmarDistPick extends Action 
{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		 HttpSession session = request.getSession();
		 Logica Logica = new Logica();
		 Usuario uLog = (Usuario) session.getAttribute("uLogeado");
		 session.removeAttribute("menError");
			Utilidades util = new Utilidades();
			int idEmpresa = util.darEmpresa(uLog);
			if(idEmpresa==0)
			{
				return mapping.findForward("LOGIN");
			}
			String redirect = (String) session.getAttribute("redirectVerificacion");
		 int equipo = 0;
		 
		 
		 if(uLog!=null){
			 equipo = uLog.getEquipo_trabajo();
			 ServletContext context = request.getSession().getServletContext();
			 Hashtable<String, bulto> cajasAbiertas = (Hashtable<String, bulto>) context.getAttribute(idEmpresa+"cajasAbiertas");
			try 
			{
				if(cajasAbiertas==null || cajasAbiertas.size()==0){
					cajasAbiertas = Logica.BultosAbiertos(idEmpresa);
				}

				int cantS = 0;
				List<DataPicking> pickings = (List<DataPicking>) session.getAttribute("pickings");
				String art = request.getParameter("art");
				String posicion = request.getParameter("posicion");
				int idPick = 0;
				//si es verificacion de un picking de un solo destino viene el destino vacio, me fijo el destino en la lista de picking
				if(posicion == null || posicion.equals("")) {
					if(pickings ==  null || pickings.isEmpty()){
						session.setAttribute("menError", "NO SE IDENTIFICO EL PICKING, CIERRE SESSION E INTENTELO NUEVAMENTE");
						return mapping.findForward(redirect);
					}
					else{
						posicion = pickings.get(0).getDestino().getId()+"";
					}
				}
				DataPicking pickingsSel = new DataPicking();
				
				for (DataPicking pi : pickings) 
				{
					if(pi.getArticulo().equals(art) && posicion.equals(pi.getDestino().getId()+""))
					{
						pi.setVerificada(1);
						//pickingsSel.add(pi);
						pickingsSel = pi;
						idPick = pi.getIdPicking();
						break;
					}
				}
				
				int idDepoWEB = util.darParametroEmpresaINT(idEmpresa,5);
				int cantidadLog = 0;
				if (idPick!=0){
					String enCaja = "";
					if(!posicion.equals(idDepoWEB+"")){
						bulto b = null;
						bultoContenido bc = null;
						if(cajasAbiertas.get(equipo+"-"+posicion)==null){
							Fecha fecha = new Fecha(0,0,0);
							b = new bulto(equipo+posicion+fecha.darFechaString(),"Caja distribucion lc."+posicion,false,0,0,0,0.0,false,"",
									uLog.getNumero(),posicion.replace(" ", ""),idEmpresa);
							b.setEquipo_trabajo(equipo);
							b.setRemision_al_cerrar(pickingsSel.getRemision_bulto()==1);
							bc = new bultoContenido();
							bc.setIdArticulo(art);
							bc.setCantidad(1);
							bc.setPicking(idPick);
							bc.setUsuario(uLog.getNumero());
							b.Crear_Bulto(idEmpresa);
							//b.Agregar_A_Bulto(bc);
							uLog.registrarEventoHilo(session.getId(), "ABRIENDO CAJA - cantidad: 0", pickings.get(0).getIdPicking(), 112);
							b = b.Agregar_A_Bulto_Reposicion(bc, pickingsSel);
							
							cajasAbiertas.put(equipo+"-"+posicion, b);
							
							Logica.encuentraMoverOjos(posicion+"P",b.getIdBulto(),1,uLog.getNumero(),idEmpresa);		//AGREGO BULTO A ZONA DE CLASIFICACION
							Logica.IngresarMovimientoArticuloTipo("", posicion+"P", b.getIdBulto(), 1,  uLog.getNumero(),"ADD",idEmpresa);	//REGISTRO LA UBICACION DEL BULTO
						}
						else{
							if(cajasAbiertas.get(equipo+"-"+posicion).isRemision_al_cerrar() != (pickingsSel.getRemision_bulto()==1)) {
								//VERIFICO COMO SE VA A REMITIR ESTA CAJA
								session.setAttribute("menError", "USTED ESTA TRABAJANDO CON 2 MODALIDADES DE REMISION DIFERENTES, DEBE CERRAR EL BULTO EXISTENTE PARA PODER VERIFICAR ESTE ARTICULO");
								return mapping.findForward(redirect);
							}
							bc = new bultoContenido();
							bc.setIdArticulo(art);
							bc.setCantidad(1);
							bc.setPicking(idPick);
							bc.setUsuario(uLog.getNumero());
							
							b = cajasAbiertas.get(equipo+"-"+posicion);
							try {
								cantidadLog = b.unidadesEnBulto();
							} catch (Exception e) {
								cantidadLog = 0;
							}
							uLog.registrarEventoHilo(session.getId(), "CAJA ABIERTA - cantidad antes de ingresar art: "+cantidadLog, pickings.get(0).getIdPicking(), 112);
							b = b.Agregar_A_Bulto_Reposicion(bc, pickingsSel);
							cajasAbiertas.put(equipo+"-"+posicion, b);
						}
						
						context.setAttribute(idEmpresa+"cajasAbiertas", cajasAbiertas);
						
						enCaja = ", ingresado en caja "+b.getIdBulto();
						uLog.registrarEventoHilo(session.getId(), "PERSISTIO: "+b.isPersistencia(), pickings.get(0).getIdPicking(), 112);
						
						try {
							cantidadLog = b.unidadesEnBulto();
						} catch (Exception e) {
							cantidadLog = 0;
						}
						uLog.registrarEventoHilo(session.getId(), "cantidad luego de ingresar art: "+cantidadLog, pickings.get(0).getIdPicking(), 112);
						
						if(!b.isPersistencia()) {	//SI NO LOGRO AGREGAR EL ARTICULO EN EL BULTO
							session.setAttribute("menError", "ESTE ARTICULO NO SE GUARDO EN LA CAJA, INTENTELO NUEVAMENTE");
							uLog.registrarEventoHilo(session.getId(), "Fallo al querer ingresar a bulto", pickings.get(0).getIdPicking(), 112);
							return mapping.findForward(redirect);
						}
						
						//Logica.encuentraUpdateClasifPicking(pickingsSel,idEmpresa);
						uLog.registrarEventoHilo(session.getId(), "encuentraBajaArticulosOjos(1,"+art+",1"+idEmpresa+")", pickings.get(0).getIdPicking(), 112);
						Logica.encuentraBajaArticulosOjos(1,art, "1",idEmpresa);	//BAJO DE ZONA DE PICKING
						
						uLog.registrarEventoHilo(session.getId(), "IngresarMovimientoArticuloTipo(1, "+b.getIdBulto()+", "+art+", 1,  "+uLog.getNumero()+",BUL,"+idEmpresa+")",
								pickings.get(0).getIdPicking(), 112);
						Logica.IngresarMovimientoArticuloTipo("1", b.getIdBulto(), art, 1,  uLog.getNumero(),"BUL",idEmpresa);	//REGISTRO EL MOVIMIENTO DE PICKING AL BULTO
						
					}
					
					if(posicion.equals(idDepoWEB+"")){	
						List<DataPicking> dp = new ArrayList<DataPicking>();
						dp.add(pickingsSel);
						Logica.encuentraUpdateVerifPicking(dp,false,idEmpresa);
					}
					
					//LOGUEAMOS EVENTO
					uLog.registrarEvento(idPick, 1,112,0,true, session.getId(), "Verificando articulo "+art+enCaja);
					
					pickings = Logica.encuentraDarPicking(idPick,idEmpresa);
					List <DataPicking> pickingsToVer = new ArrayList<DataPicking>();
					StringBuilder arregloArts = new StringBuilder();
					StringBuilder arregloDestino = new StringBuilder();
					
					for (DataPicking d : pickings) 
					{
						if(d.getSol()-d.getVerificada()>0)
						{
							arregloArts.append("'"+d.getArticulo()+"',");
							arregloDestino.append("'"+d.getPosSort()+"',");
							pickingsToVer.add(d);
							
						}
						
					}
					
					if(pickingsToVer.size()>0)
					{
						session.setAttribute("pickings", pickingsToVer);
						int corteA = arregloArts.toString().length()-1;
						int corteB = arregloDestino.toString().length()-1;
						
						session.setAttribute("arregloArticulos", arregloArts.toString().substring(0, corteA));
						session.setAttribute("arregloDestinos", arregloDestino.toString().substring(0, corteB));
						return mapping.findForward(redirect);
					}
					else
					{
						session.setAttribute("menError", "Ha clasificado todos los articulos del picking "+idPick);
						if(idPick>0){
							try {
								//CAMBIO ESTADO REPO SIEMPRE QUE NO SEA ECOMMERCE
								if(!posicion.equals(idDepoWEB+"") && pickings.get(0).getRemision_bulto()==1){
									Logica.UpdatePickingStatus(7, pickings.get(0).getIdPicking(),idEmpresa);
								}				
								//COMENTARIO LOG
								uLog.registrarEventoHilo(session.getId(), "Se finalizo la verificacion del picking", pickings.get(0).getIdPicking(), 112);
							} catch (Exception e) {
								// TODO: handle exception
							}
						}
						else{
							session.setAttribute("menError", "Ha clasificado todos los articulos del picking "+idPick+", pero no se pudo marcar como terminado");
						}
						
						
						return mapping.findForward("fin");
					}
				}
				else{
					session.setAttribute("menError", "ESTE ARTICULO NO SE GUARDO EN LA CAJA, CIERRE SESSION E INTENTELO NUEVAMENTE");
					return mapping.findForward(redirect);
				}
					
				
			}
			catch (Exception e) 
			{
				System.out.println("llegamos al catch");
				e.printStackTrace();
				session.setAttribute("mensaje", e.getMessage());
				return mapping.findForward(redirect);

			}	
		 }
		 else{
				return mapping.findForward("log");
			}
		 
		
		
	}
	
	
}















