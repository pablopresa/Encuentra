package web.tareas;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import beans.ArticuloLineaReposicion;
import beans.OrdenAlmacen;
import beans.Usuario;
import beans.encuentra.DataLineaRepo;
import beans.encuentra.Tarea;
import dataTypes.DataIDDescripcion;
import logica.Logica;
import logica.Utilidades;



public class _EncuentraAltaTareaII extends Action 
{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
		try 
		{
			

			Usuario uLog = (Usuario) session.getAttribute("uLogeado");
			Utilidades util = new Utilidades();
			int idEmpresa = util.darEmpresa(uLog);
			if(idEmpresa==0)
			{
				return mapping.findForward("LOGIN");
			}
			
			List<Usuario> operariosSelect = darListaOperarios(request);
			
			Tarea tarea = (Tarea) session.getAttribute("tarea");
			if (operariosSelect.isEmpty())
		     {
				request.setAttribute("menError", "Seleccione almenos un usuario para la tarea");
		        System.out.println("Seleccione almenos un usuario para la tarea");
		        return mapping.findForward("no");
		      }		
			
			
			if(tarea==null) {		//******TAREA DE PICKING******\\
				//VERIFICACION DEL PARAMETRO DE REMISION
				
				Boolean paramRemision = (Boolean) session.getAttribute("paramRemision");
				String tipoRe = (String) session.getAttribute("tipoRe");
				
				boolean repoDesdeBultos = util.darParametroEmpresaBool(idEmpresa, 27);
				int cantidadMinima = util.darParametroEmpresaINT(idEmpresa, 28);
				
				
				
				
				String thisPick = request.getParameter("checkParametro");
				boolean paramThisPick = false;
				try {
					paramThisPick = thisPick.equals("1");
				} catch (Exception e) {
					System.out.println("parametro de remision nulo");
					paramThisPick = paramRemision;
				}
				
				//EN CASO DE QUE SE MODIFIQUE EL PARAMETRO, LO PERSISTO EN BD
				//TODO: NICO ???? 
				if(paramRemision!=paramThisPick) {
					Logica.updateParametroEmpresa(idEmpresa, 22, paramThisPick);
				}
				
				if(tipoRe.equals("3"))
					paramThisPick = false;
				
				String singleTar = (String) session.getAttribute("singleTar");
				List<ArticuloLineaReposicion> articulosIn = (List<ArticuloLineaReposicion>) session.getAttribute("articulosIn");
				Boolean verifECauto = util.darParametroEmpresaBool(idEmpresa, 15);
				
				Hashtable<Integer, Integer> depositosHT = (Hashtable<Integer, Integer>) session.getAttribute("depositosHTinRepo");
				
				if(singleTar==null || singleTar.equals("1")) //******UN SOLO PICKING******\\
				{	
					tarea = TaskInit(uLog, operariosSelect);	
					if(tarea.getTipo().getId()==1 && session.getAttribute("dipick")!=null)
					{
						int cantidades = (int) session.getAttribute("cantiInRepo");
						String destinos = "";
						List<Integer> destinosLST = new ArrayList<Integer>(depositosHT.values());
						for (Integer integer : destinosLST) 
						{
							destinos+=" - "+integer;
						}						
						
						int idPicking = Logica.encuentraAltaPicking(articulosIn, cantidades, "Sin filtros aplicados",idEmpresa,verifECauto,paramThisPick);						
						tarea = CompleteTask(tarea, idPicking, "Picking "+destinos+" "+uLog.getNick(), articulosIn, cantidades);						
						guardarTarea(tarea, uLog, idEmpresa,session, Logica, idPicking, repoDesdeBultos, cantidadMinima); //Cambiar booleano 29/1
					}				
				}
				else										//******VARIOS PICKINGS******\\
				{
					Hashtable<String, List<ArticuloLineaReposicion>> htPickPedidos = new Hashtable<String, List<ArticuloLineaReposicion>>();
					
					for (ArticuloLineaReposicion ar : articulosIn) 
					{
						if(htPickPedidos.get(ar.getPedido()+"")!=null)
						{
							htPickPedidos.get(ar.getPedido()+"").add(ar);
						}
						else
						{
							List<ArticuloLineaReposicion> lista = new ArrayList<ArticuloLineaReposicion>();
							lista.add(ar);
							htPickPedidos.put(ar.getPedido()+"", lista);
						}
					}
					
					List<List<ArticuloLineaReposicion>> pickingsPedidos = null;
					pickingsPedidos = new ArrayList<List<ArticuloLineaReposicion>>(htPickPedidos.values());
								
					int cantidadTarea = 0;
					for (List<ArticuloLineaReposicion> articulosInL : pickingsPedidos) 
					{
						tarea = TaskInit(uLog, operariosSelect);
						cantidadTarea = 0;
						for(ArticuloLineaReposicion a:articulosInL) {
							cantidadTarea += a.getCantidad();
							depositosHT.put(a.getDestino().getId(), a.getDestino().getId());
						}					
						
						String destinos = "";
						List<Integer> destinosLST = new ArrayList<Integer>(depositosHT.values());
						for (Integer integer : destinosLST) 
						{
							destinos+=" - "+integer;
						}
						
						int idPicking = Logica.encuentraAltaPicking(articulosInL, cantidadTarea, "Sin filtros aplicados",idEmpresa,verifECauto,paramThisPick);											
						tarea = CompleteTask(tarea, idPicking, "Picking "+destinos+" "+uLog.getNick(), articulosIn, cantidadTarea);											
						guardarTarea(tarea, uLog, idEmpresa,session, Logica, idPicking, repoDesdeBultos, cantidadMinima);		 //Cambiar booleano 29/1			
					}
				}
				
				session.setAttribute("tarea", null);
				session.setAttribute("dipick", null);
				session.setAttribute("cantiInRepo", null);
				session.setAttribute("depositosHTinRepo", null);
				session.setAttribute("articulosIn", null);
				return mapping.findForward("ok");
			}
			else {
				tarea.setUsuarios(operariosSelect);
				if(tarea.getUsuarios().size()>1)
				{	
					tarea.setParcial(false);
				}
				else
				{
					tarea.setParcial(true);
				}
				
				switch (tarea.getId()) {
					case 5:	/*********tarea sort**********/
						session.setAttribute("tarea", tarea);
						return mapping.findForward("sorter");
				case 106:/*********tarea almacen**********/
						List<OrdenAlmacen> almacen = Logica.getOrdenesAlmacen(idEmpresa);
						session.setAttribute("tarea", tarea);
						session.setAttribute("almacen", almacen);
						return mapping.findForward("alm");
				default:
						break;
				}
			}			
			
		} catch (Exception e) {
			System.out.println("llegamos al catch");
			e.printStackTrace();
			session.setAttribute("mensaje", e.getMessage());
			return mapping.findForward("ok");

		}
		
		return mapping.findForward("ok");
	}

	
	private int guardarTarea(Tarea tarea, Usuario uLog, int idEmpresa, HttpSession session, Logica log, int idPicking, boolean repoDesdeBultos, int cantidadMinima) 
	{
		
		int idMain = log.encuentraAltaTarea(tarea, false, uLog.getNumero(),idEmpresa );
		
		
		List<DataLineaRepo> articulosInDLR = new ArrayList<DataLineaRepo>();
		for (ArticuloLineaReposicion art : tarea.getArticulosIn()) 
		{
			DataLineaRepo li = new DataLineaRepo();
			li.setIdArticulo(art.getIdArticulo());
			li.setIdDepDestino(art.getDestino().getId());
			li.setIdDepOrigen(art.getOrigen().getId());
			li.setSolicitada(art.getCantidad());
			li.setPedido(art.getPedido());
			articulosInDLR.add(li);
		}
		
		//articulosInDLR = Logica.encuentraReservaDaArtRepos(articulosInDLR,null);
		if(repoDesdeBultos) {
			int destino = tarea.getArticulosIn().get(0).getDestino().getIdB();
			log.pickingEficiente_DivisionBusquedas(cantidadMinima, articulosInDLR, idPicking, destino, idEmpresa);
		} else {
			log.encuentraUpdateEstadoArticulosPicking(articulosInDLR, tarea.getIdDocumento()+"", 3,null,idEmpresa);
		}
		
		log.encuentraDistribuirCargaPicking(tarea,articulosInDLR,idEmpresa);
		
		System.out.println("");

		
		
		for (Usuario ut :tarea.getUsuarios()) 
		{
			
			uLog.registrarEventoHilo(session.getId(), "Asignando picking a "+ut.getNumero(), tarea.getIdDocumento(), 101);
		}
		
		return idMain;
		
	}

	
	private List<Usuario> darListaOperarios(HttpServletRequest request) 
	{
		HttpSession session = request.getSession();
		List<DataIDDescripcion> operarios = (List<DataIDDescripcion>) session.getAttribute("operarios");
		List<Usuario> operariosSelect = new ArrayList<Usuario>();
		for (DataIDDescripcion da: operarios) 
		{
			String on = request.getParameter(String.valueOf(da.getId()));
			if(on!=null &&  on.equals("on"))
			{
				Usuario u = new Usuario();
				u.setNumero(da.getId());
				u.setNick(da.getDescripcion());
				operariosSelect.add(u);
			}
		}
		
		 return operariosSelect;
	}
	
	
	private Tarea TaskInit(Usuario uLog, List<Usuario> operariosSelect) {
		Tarea tarea = new Tarea();			
		
		DataIDDescripcion estado = new DataIDDescripcion();
		estado.setId(0);
		
		tarea.setEstado(estado);		
		tarea.setPorcentaje(0);
		tarea.setResponsable(new DataIDDescripcion(uLog.getNumero(),uLog.getNick()));
		tarea.setTipo(new DataIDDescripcion(1,"Picking"));
		tarea.setUsuarios(operariosSelect);
		if(tarea.getUsuarios().size()>1)
		{	
			tarea.setParcial(false);
		}
		else
		{
			tarea.setParcial(true);
		}
		
		return tarea;
	}
	
	
	private Tarea CompleteTask(Tarea tarea, int idPicking, String obs, List<ArticuloLineaReposicion> articulosIn, int cantidades) {
		tarea.setIdDocumento(idPicking);
		tarea.setObservacion(obs);
		tarea.setArticulosIn(articulosIn);	
		tarea.setCantidadPares(cantidades);
		
		return tarea;
	}
}
