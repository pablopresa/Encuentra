package web.picking;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import beans.MovStock;
import beans.Usuario;
import beans.encuentra.DataPicking;

import cliente_rest_Invoke.Call_WS_APIENCUENTRA;
import dataTypes.DataDescDescripcion;
import dataTypes.DataIDDescripcion;
import helper.PropertiesHelper;
import jsonObjects.SendMail;
import logica.EnviaMail;
import logica.ImpresionesPDF;
import logica.Logica;
import logica.Utilidades;
import main.EcommerceProcessOrders;



public class _EncuentraRemitirPicking extends Action 
{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
		String menError = "";
		try 
		{			
			System.out.println("-");
			
			List<DataPicking> pickings = (List<DataPicking>) session.getAttribute("pickings"); 
			Usuario uLog = (Usuario) session.getAttribute("uLogeado");
			Utilidades util = new Utilidades();			
			
			int idEmpresa = util.darEmpresa(uLog);
			if(idEmpresa==0)
			{
				return mapping.findForward("LOGIN");
			}
						
			//String tipoMov = util.darParametroEmpresaSTR(idEmpresa, 9);
			int idDepoWEB = util.darParametroEmpresaINT(idEmpresa,5);
			int idDepoCentral = util.darParametroEmpresaINT(idEmpresa,4);
			
			if(idDepoWEB==-1 || idDepoCentral==-1)
			{
				request.setAttribute("menError", "Atencion, falta parametrizar depositos");
				return mapping.findForward("LOGIN");
			}
			
			boolean integracionActiva = false;
			integracionActiva = Logica.darIntegracionProductiva(2, idEmpresa);
			
			Hashtable<Integer, List<DataPicking>> picksEcommerce = new Hashtable<Integer, List<DataPicking>>();
			Hashtable<Integer, List<DataPicking>> picksPedidoMayo = new Hashtable<Integer, List<DataPicking>>();
						
			for (DataPicking p : pickings) 
			{
				if(!p.isMayorista() )
				{
				}
				else
				{
					if(p.getDestino().getId()==idDepoWEB){
						clasificarOrdenes(p,picksEcommerce);
					}
					else{
						clasificarOrdenes(p,picksPedidoMayo);
					}					
				}				
			}
			
			System.out.println("llamando a la API");
			
			List<List<DataPicking>> listaEC = new ArrayList<List<DataPicking>>(picksEcommerce.values());
			List<List<DataPicking>> listaMayo = new ArrayList<List<DataPicking>>(picksPedidoMayo.values());
			List<DataPicking> noEncontrados = new ArrayList<DataPicking>();
			
			List<List<DataPicking>> allDataPickings = new ArrayList<List<DataPicking>>();
			allDataPickings.addAll(listaEC);
			allDataPickings.addAll(listaMayo);
			
			
			Call_WS_APIENCUENTRA api = new Call_WS_APIENCUENTRA();
			List<DataIDDescripcion> list;
			List<DataIDDescripcion> remitoEC = new ArrayList<DataIDDescripcion>();
			List<String> ArtsSinAfectar;
			DataIDDescripcion data;
			int destino = 0;
			
			if(!allDataPickings.isEmpty())
			{				
				list = null;
				ArtsSinAfectar = null;
				data = null;
				for (List<DataPicking> l : allDataPickings) 
				{
					list = new ArrayList<DataIDDescripcion>();
					ArtsSinAfectar = new ArrayList<String>();
					for (DataPicking p : l) 
						{
							destino = p.getDestino().getId();
							if(p.getVerificada()-p.getRemitida()>0)
							{
								data = new DataIDDescripcion(p.getVerificada()-p.getRemitida(),p.getArticulo());
								//data.setIdB(idDepoWEB);
								data.setIdB(destino);
								if(destino == idDepoWEB) {
									data.setDescripcionB(p.getIdPedido()+"");
								}else {
									data.setDescripcionB(p.getSolicitud()+"");
								}
								
								list.add(data);
							}
							else{
								ArtsSinAfectar.add(p.getArticulo());
							}							
							
							if(p.getVerificada()<p.getSol())
							{								
								noEncontrados.add(p);								
							}
							
						}
					try {
						System.out.println("");
						System.out.println("");
						System.out.println("Enviando info a visual");
						if(integracionActiva)
						{
							if(list.size()>0){
								DataIDDescripcion respVisual = null;								
								
								MovStock m = new MovStock();
								m.setOrigen(idDepoCentral);
								m.setDestino(destino);
								m.setIdUsuario(uLog.getNumero());
								m.setDetalle(list);
								m.setOrigenDoc(new Long(l.get(0).getIdPicking()));
								m.setDocSolicitud(l.get(0).getSolicitud());
								m.setDoc(0);
								m.setRazon(0);
								m.setObservacion("");
								m.setUsuario(uLog.getNombre()+" "+uLog.getApellido());
								if(destino!=idDepoWEB) { m.setEntrega(true);}
								
								//respVisual = new DataIDDescripcion(0,"");
								respVisual = api.movStock(m, false, idEmpresa);								
								
								if(respVisual!=null){
									if(!respVisual.getDescripcion().equals("")){
										menError += "DOC "+l.get(0).getSolicitud()+" - "+respVisual.getDescripcion() + " <br/>";
									}
									else {
										for(DataIDDescripcion d:list) {
											remitoEC.add(d);
											if(destino == idDepoWEB) {
												ConfirmoMovimientoEcommerce(d, idDepoCentral, idDepoWEB, idEmpresa, uLog, Logica);
											}
										}								
									}
									if(!respVisual.getDescripcionB().equals("")){
										//MODIFICO NUMERO DE DOCUMENTO EN ARTICULOS QUE NO SE AFECTARON EN ESTA DISTRIBUCION
										if(destino == idDepoWEB) {
											Logica.updateDocVisual(l.get(0).getSolicitud(), ArtsSinAfectar, 
												Integer.parseInt(respVisual.getDescripcionB()),idEmpresa);
										}
										menError +="Se genero un nuevo documento ("+respVisual.getDescripcionB()+") por la diferencia del documento "
										+l.get(0).getSolicitud()+" <br/>";
									}
									
								}
							}
						}
						
					} catch (Exception e) {
						System.out.println("*************************ERROR AL ENVIAR A VISUAL*************************");
					}					
					
					System.out.println("REMITIENDO");
					Logica.encuentraUpdateRemirPickinEC(l,idEmpresa);
				}
			}
			
			if(!remitoEC.isEmpty()){
				int tipoComanda = 3;
				String obsTicket = "Movimiento hacia cliente "+destino;
				if(destino == idDepoWEB) {
					tipoComanda = 1;
					obsTicket = "Remito del picking "+pickings.get(0).getIdPicking();
				}
				ImpresionesPDF.imprimirTicketMovStock(idDepoCentral, idDepoWEB, uLog.getNick(), obsTicket, 
						remitoEC, pickings.get(0).getIdPicking()+"",tipoComanda, uLog.getIdEquipo(),idEmpresa);
			}
						 
			
			if(!noEncontrados.isEmpty())
			{
				EnviarMailNoEncontrados(util, noEncontrados, idEmpresa, api);
			}
									
			session.setAttribute("mensajeVS", menError);
			return mapping.findForward("ok");		

		}
		catch (Exception e) 
		{
			System.out.println("llegamos al catch");
			request.setAttribute("mensaje", menError);
			return mapping.findForward("ok");
		}	
		
	}
	
	public static List<List<DataPicking>> max200(List<List<DataPicking>> in)
	{
		List<List<DataPicking>> out = new ArrayList<List<DataPicking>>();
		int largoMax = 199;
		
		for (List<DataPicking> list : in) 
		{
			if(list.size()>largoMax)
			{
				List<List<DataPicking>> outII = new ArrayList<List<DataPicking>>();
				int largo = list.size();
				int tope = largoMax;
				int desde = 0;
				while (tope<largo) 
				{
					outII.add(list.subList(desde, tope));
					desde +=largoMax;
					tope +=largoMax;
				}
				//agrega el resto
				outII.add(list.subList(desde, largo));
				
				for (List<DataPicking> list2 : outII) 
				{
					out.add(list2);
				}
				
			}
			else
			{
				out.add(list);
			}
		}
		
		return out;
	}
	
	public static void clasificarOrdenes(DataPicking p, Hashtable<Integer, List<DataPicking>> hash){
		try {
			p.getDestino().setDescripcionB("");
			if(hash.get(p.getSolicitud())==null)
			{
				List<DataPicking> picks = new ArrayList<DataPicking>();
				picks.add(p);
				hash.put(p.getSolicitud(), picks);
			}
			else
			{
				List<DataPicking> picks = hash.get(p.getSolicitud());
				picks.add(p);
				hash.put(p.getSolicitud(), picks);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void ConfirmoMovimientoEcommerce(DataIDDescripcion d, int idDepoCentral, int idDepoWEB, int idEmpresa, Usuario uLog , Logica Logica) {
		System.out.println("VERIFICANDO PEDIDOS WEB");
		EcommerceProcessOrders pro = new EcommerceProcessOrders();
		pro.confirmarSKUForus(d.getDescripcion(), idDepoCentral, d.getId(),new Long(d.getDescripcionB()),idEmpresa,uLog.getNumero());		
		
		Logica.encuentraBajaArticulosOjos(d.getId(),d.getDescripcion(), "1",idEmpresa);									//BAJAR DE LA ZONA DE PICKING
		Logica.encuentraMoverOjos(idDepoWEB+"P",d.getDescripcion(),d.getId(),uLog.getNumero(),idEmpresa);					//AGREGO ARTICULO A CLASIFICADOR ECOMMERCE
		Logica.IngresarMovimientoArticulo("1",idDepoWEB+"P", d.getDescripcion(), d.getId(), uLog.getNumero(),idEmpresa);	//REGISTRO EL MOVIMIENTO DE MERCADERIA 
	}
	
	public static void EnviarMailNoEncontrados(Utilidades util, List<DataPicking> noEncontrados, int idEmpresa, Call_WS_APIENCUENTRA api) {
		String mailsD = util.darParametroEmpresaSTR(idEmpresa, 6);
		
		String body1 = "<h2 style=\"text-align: center;\"><strong>Articulos <span style=\"color: #ff6600;\">no encontrados</span> en el picking</strong></h2> "+
					"	<table style=\"height: 36px; width: 100%; border-collapse: collapse; margin-left: auto; margin-right: auto;\" border=\"1\"> "+
					"	  <tbody> "+
					"	    <tr style=\"height: 18px; background-color: #a81865;\"> "+
					"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
					"	        <h3><strong><span style=\"color: #ffffff;\">Picking</span></strong></h3> "+
					"	      </td> "+
					"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
					"	        <h3><strong><span style=\"color: #ffffff;\">Usuario</span></strong></h3> "+
					"	      </td> "+
					"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
					"	        <h3><strong><span style=\"color: #ffffff;\">Articulo</span></strong></h3> "+
					"	      </td> "+
					"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
					"	        <h3><strong><span style=\"color: #ffffff;\">Cantidad</span></strong></h3> "+
					"	      </td> "+
					"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
					"	        <h3><strong><span style=\"color: #ffffff;\">Pedido</span></strong></h3> "+
					"	      </td> "+
					"	    </tr> ";
					
		String body2 = "";
		
		
		
		for (DataPicking n : noEncontrados) 
		{
			body2+=
		
					"	    <tr style=\"height: 18px; border-color: #000000; text-align: center;\"> "+
					"	      <td style=\"width: 20%; height: 18px;\">"+n.getIdPicking()+"</td> "+
					"	      <td style=\"width: 20%; height: 18px;\">"+n.getUsuario().getDescripcion()+"</td> "+
					"	      <td style=\"width: 20%; height: 18px;\">"+n.getArticulo()+"</td> "+
					"	      <td style=\"width: 20%; height: 18px;\">"+n.getSol()+"</td> "+
					"	      <td style=\"width: 20%; height: 18px;\">"+n.getIdPedido()+"</td> "+
					"	      </td> "+
					"	    </tr> ";
		}			
	
		String body3 = "	  </tbody> "+
					"	</table> "+
					"	<p>&nbsp;</p> "+
					"	<p>&nbsp;</p> "+
					"	<p>&nbsp;</p> "+
					"	<p>&nbsp;</p> "+
					"	<p style=\"text-align: center;\">Notificacion generada automaticamente por Encuentra</p>";
		
		List<String> mailDestinos = new ArrayList<String>();
		String[] arregloMails = mailsD.split(",");
		for (int i = 0; i < arregloMails.length; i++) 
		{
			mailDestinos.add(arregloMails[i]);
		}
		
		SendMail sm = new SendMail("P"+noEncontrados.get(0).getIdPicking(),mailsD,"Articulos no encontrados", body1+body2+body3,
				"encuentra@200.com.uy");
		List<SendMail> mails = new ArrayList<SendMail>();
		mails.add(sm);
		api.PutColaEnvioMails(mails, idEmpresa);
		//em.enviarMailHTMLOD("encuentra@200.com.uy", mailDestinos, "Articulos no encontrados", body1+body2+body3);
	}
}















