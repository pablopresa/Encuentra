package web.picking;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import logica.Logica;
import logica.Utilidades;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import beans.Usuario;
import beans.encuentra.DataLineaListaTareasMob;
import beans.encuentra.DataPicking;



public class _EncuentraDarPickingVC extends Action 
{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
		try 
		{

			
			Usuario uLog = (Usuario) session.getAttribute("uLogeado");
			Utilidades util = new Utilidades();
			int idEmpresa = util.darEmpresa(uLog);
			if(idEmpresa==0)
			{
				return mapping.findForward("LOGIN");
			}
			String destino = request.getParameter("accion");
			int idPick = Integer.parseInt(request.getParameter("idPick"));
			List<DataPicking> pickings = Logica.encuentraDarPicking(idPick,idEmpresa);
			int totalSol = 0;
			int totalEnc = 0;
			int totalVer = 0;
			
			Hashtable<String, Integer> stockOrigenSAP = new Hashtable<String, Integer>();// Logica.darStockOrigenSAP(pickings); 
			Hashtable<String, Integer> stockOrigen = new Hashtable<String, Integer>();//Logica.darStockOrigenSAP(pickings); 
			
			for (DataPicking p : pickings) 
			{
			
				totalSol+=p.getSol();
				totalEnc+=p.getPick();
				totalVer+=p.getVerificada();
				try
				{
					p.setStockOSAP(stockOrigenSAP.get(p.getArticulo()));
				}
				catch (Exception e)
				{
					p.setStockOSAP(0);
				}
				
				try
				{
					p.setStockOrigen(stockOrigen.get(p.getArticulo()));
				}
				catch (Exception e)
				{
					p.setStockOrigen(0);
				}
				
			}
		
			request.setAttribute("totSol",totalSol);
			request.setAttribute("totEnc",totalEnc);
			request.setAttribute("totVer",totalVer);
			
			session.setAttribute("pickings", pickings);
			
			
			/*if(destino.equals("verifica"))
			{
				List <DataPicking> pickingsToVer = new ArrayList<DataPicking>();
				for (DataPicking d : pickings) 
				{
					if(d.getSol()-d.getVerificada()>0)
					{
						pickingsToVer.add(d);						
					}
					
				}
				session.setAttribute("pickings", pickingsToVer);
				
				uLog.registrarEventoHilo(session.getId(), "Seleccionando picking para verificar",idPick,112);
				return mapping.findForward("Verif");
				
			}
			else*/ if (destino.equals("Diferencia"))
			{
				uLog.registrarEventoHilo(session.getId(), "Seleccionando picking para ver diferencias",idPick,112);
				return mapping.findForward("Direrencia");
			}
			else if(destino.equals("ver"))
			{
				uLog.registrarEventoHilo(session.getId(), "Seleccionando picking para ver diferencias en PC",idPick,112);
				return mapping.findForward("VerifDSKTP");
			}
			else if(destino.equals("rem"))
			{
				uLog.registrarEventoHilo(session.getId(), "Seleccionando picking para remitir",idPick,112);
				return mapping.findForward("RemitDSKTP");
			}
			else
			{
				String redirect = "Clasif";
				switch (destino) {
				case "verifica":
					redirect = "Verif";
					break;
				case "clasifica":
					redirect = "Clasif";
					break;	
				default:
					break;
				}
				StringBuilder arregloArts = new StringBuilder();
				StringBuilder arregloDestino = new StringBuilder();
				
				List <DataPicking> pickingsToVer = new ArrayList<DataPicking>();
				for (DataPicking d : pickings) 
				{
					if(d.getSol()-d.getVerificada()>0)
					{
						arregloArts.append("'"+d.getArticulo()+"',");
						arregloDestino.append("'"+d.getPosSort()+"',");
						pickingsToVer.add(d);
						
					}
					
				}
				if(pickingsToVer.size()>0)
				{
					session.setAttribute("pickings", pickingsToVer);
					int corteA = arregloArts.toString().length()-1;
					int corteB = arregloDestino.toString().length()-1;
					
					session.setAttribute("arregloArticulos", arregloArts.toString().substring(0, corteA));
					session.setAttribute("arregloDestinos", arregloDestino.toString().substring(0, corteB));
					session.setAttribute("redirectVerificacion", redirect);
					
					return mapping.findForward(redirect);
				}
				else
				{
					request.setAttribute("menError", "ya se clasificaron todos los articulos del picking "+idPick);
					//Si se termina la tarea, vuelve a pedir todas las tareas del usuario para cargarlas en la Session
					List<DataLineaListaTareasMob> tarMob = Logica.encuentraDarTareasMob(uLog.getNumero(),idEmpresa);
					session.setAttribute("tarMob", tarMob);
					return mapping.findForward("fin");
				}
			}
			

		} catch (Exception e) {
			System.out.println("llegamos al catch");
			session.setAttribute("mensaje", e.getMessage());
			return mapping.findForward("no");

		}

		
		
	}
}















