package cliente_rest_Invoke;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.PDFTextStripperByArea;
import com.google.gson.Gson;

import beans.MovStock;
import beans.api.ColeccionMovStock;
import beans.api.GrabarRecepcion;
import beans.api.Order;
import beans.api.articuloBarra;
import dataTypes.DataDescDescripcion;
import dataTypes.DataEcommerce_canales_envio;
import dataTypes.DataIDDescripcion;
import dataTypes.trackingPedido;
import eCommerce_jsonObjectsII.UESEnvio;
import helper.PropertiesHelper;
import jsonObjects.Credenciales;
import jsonObjects.DISTRIaltaEnvio;
import jsonObjects.PrintObject;
import jsonObjects.RespuestaMIR;
import jsonObjects.SendMail;
import jsonObjects.Shipping;
import jsonObjects.outputDespachoSDL;
import jsonObjects.trackingMIRTRANS;
import jsonObjects.trackingSDL;
import jsonObjects.trackingUES;
import logica.Logica;
import logica.Utilidades;

public class Call_WS_APIENCUENTRA {

	private String api_host;
	
	public Call_WS_APIENCUENTRA() {
		
		PropertiesHelper ph = new PropertiesHelper("paths");
		try
    	{
    		ph.loadProperties();
    		api_host = ph.getValue("api");
    	}
    	catch(Exception e)
    	{
    		System.out.println("No se encontro el path para direccionar a la API");
    		e.printStackTrace();
    	}
	}
	
	public void PutColaEnvioMails(List<SendMail> mails, int idEmpresa){
		try {
			Utilidades util = new Utilidades();
			String token_API = util.darParametroEmpresaSTR(idEmpresa, 10);
			String host = "encuentra.200.com.uy";
			//String host = "10.108.0.165:8080";
			String servicio = "http://"+host+"/encuentraAPI/Integraciones/MailSpooler/putMails?token="+token_API; 
						
			Gson gson = new Gson();
			String json = gson.toJson(mails);
			json = "{\"mails\":"+json+"}";
			System.out.println(json);
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public void PutColaImpresion(String id, String url, int porait, int printer, int idEquipo, int idEmpresa)
	{
		try 
		{
			
			Logica log = new Logica();
			
			
			
			String token_API=log.darParametroEmpresa(idEmpresa,10);
			
			
			
			String host = "encuentra.200.com.uy";
			String servicio = "http://"+host+"/encuentraAPI/Integraciones/PrintSpooler/put?token="+token_API; 
			
			PrintObject p = new PrintObject();
			p.setId(id);
			p.setUrl(url);
			p.setPorait(porait+"");
			p.setPrinterId(printer+"");
			p.setIdEquipo(idEquipo+"");
			
			Gson gson = new Gson();
			String json = gson.toJson(p);
			
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public void RePrint(String id, String url, int porait, int printer, int idEmpresa){
		try {
			Logica log = new Logica();
			String token_API=log.darParametroEmpresa(idEmpresa,10);
			String host = "encuentra.200.com.uy";
			String servicio = "http://"+host+"/encuentraAPI/Integraciones/PrintSpooler/reprint?token="+token_API; 
			
			PrintObject p = new PrintObject();
			p.setId(id);
			p.setUrl(url);
			p.setPorait(porait+"");
			p.setPrinterId(printer+"");
			
			Gson gson = new Gson();
			String json = gson.toJson(p);
			
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public DataDescDescripcion setEnvio(Shipping ship,DataEcommerce_canales_envio env,String pedido,String fecha,String hora,int idEmpresa){
		String url="";
		String track = "";
		String host ="encuentra.200.com.uy";
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		
		try {
			Credenciales c = new Credenciales();
			Gson gson = new Gson();
			String json="";
			String salida = "";			
			
			switch (env.getCourier()) 
			{
				case "DAC":
				{
					json = gson.toJson(ship);
					salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/DACShipping?token="+token_API, json);
					UESEnvio ues = gson.fromJson(salida, UESEnvio.class);
					
					if(ues.getDescripcion().contains("http"))
					{
						
						System.out.println("\r\n\r\n\r\n\r\n");
						System.out.println("Etiqueta DAC="+ues.getDescripcion());
						System.out.println("\r\n\r\n\r\n\r\n");
						
						return new DataDescDescripcion(ues.getId()+"", ues.getDescripcion());
					}
					else
					{
						
						System.out.println(ues.getId()+""+ ues.getDescripcion());
						return new DataDescDescripcion("","");
					}
				
				}
				case "UES":
				{
					c.setIdCliente(env.getUsuario());
					c.setPass(env.getPass());
					c.setPrestador("FORUS");
					c.setTipoEnvio(env.getTipoEnvio());
					c.setToken(env.getPass());
					c.setUser(env.getUsuario());
					c.setPedido("encuentra_"+pedido+"");
					c.setFecha("");
					c.setHora("");
					ship.setCredenciales(c);
									
					json = gson.toJson(ship);
					
					int intentos = 3;
					while (intentos>0) 
					{
						salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/UESShipping?token="+token_API, json);
						if(salida.contains("Barrio no encontrado"))
						{
							ship.getCliente().setLocalidad("Otro");
							json = gson.toJson(ship);
							salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/UESShipping?token="+token_API, json);
						}
						if(salida.contains("Etiqueta no generada"))
						{
							intentos--;
							salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/UESShipping?token="+token_API, json);
							if(!salida.contains("Etiqueta no generada"))
							{
								intentos =0;
							}
						}
						else
						{
							
							intentos=0;
						}
						
					}
					
					
					UESEnvio ues = gson.fromJson(salida, UESEnvio.class);
					
					if(ues.getDescripcion().contains("http"))
					{
						
						System.out.println("\r\n\r\n\r\n\r\n");
						System.out.println("Etiqueta UES="+ues.getDescripcion());
						System.out.println("\r\n\r\n\r\n\r\n");
						
						return new DataDescDescripcion(ues.getId()+"", ues.getDescripcion());
					}
					else
					{
						
						System.out.println(ues.getId()+""+ ues.getDescripcion());
						return new DataDescDescripcion("","");
					}
				}
				case "DISTRICAD":
				{
					c.setIdCliente("2576");
					c.setPass("pr56!!mntv345");
					c.setPrestador("FORUS");
					c.setTipoEnvio("EXPRESS");
					c.setToken("PbkF0XZX2UeBHw7agWvuow==");
					c.setUser("INTERFASEFORUS");
					c.setPedido("");
					c.setFecha(fecha);
					c.setHora(hora);
					
					ship.setCredenciales(c);
					
					json = gson.toJson(ship);
					salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/DistricadShipping?token="+token_API, json);
					DISTRIaltaEnvio distr = gson.fromJson(salida, DISTRIaltaEnvio.class);
					url = distr.getEtiqueta();
					track = distr.getSrvTrkNbr();
					break;	
				}
				case "MIRTRANS":
				{
						c.setIdCliente("");
						c.setPass(env.getPass());
						c.setPrestador("FORUS");
						c.setTipoEnvio("C");
						c.setToken("");
						c.setUser(env.getUsuario());
						c.setPedido(pedido+"");
						c.setFecha("");
						c.setHora("");
						ship.setCredenciales(c);
						
						json = gson.toJson(ship);
						
						
						salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/MirtransShipping?token="+token_API, json);
						
						RespuestaMIR mir = gson.fromJson(salida, RespuestaMIR.class);
						if(mir.getEtiqueta().contains("http"))
						{
							System.out.println("\r\n\r\n\r\n\r\n");
							System.out.println("Etiqueta MIRTRANS="+mir.getEtiqueta());
							System.out.println("\r\n\r\n\r\n\r\n");
							return new DataDescDescripcion(mir.getCodigoBarra(), mir.getEtiqueta());
						}
						else
						{
							if(mir.getEtiqueta().contains("Clave externa ya uilizada")) {
								c.setPedido(pedido+"_2");
								ship.setCredenciales(c);
								json = gson.toJson(ship);								
								salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/MirtransShipping?token="+token_API, json);
								mir = gson.fromJson(salida, RespuestaMIR.class);
								if(mir.getEtiqueta().contains("http"))
								{
									System.out.println("\r\n\r\n\r\n\r\n");
									System.out.println("Etiqueta MIRTRANS="+mir.getEtiqueta());
									System.out.println("\r\n\r\n\r\n\r\n");
									return new DataDescDescripcion(mir.getCodigoBarra(), mir.getEtiqueta());
								}
								else
								{
									System.out.println(mir.getCodigoBarra()+" "+ mir.getEtiqueta());
									return new DataDescDescripcion("","");
								}
							}else {
								System.out.println(mir.getCodigoBarra()+" "+ mir.getEtiqueta());
								return new DataDescDescripcion("","");
							}
							
						}
						
				}
				case "SOYDELIVERY":
				{
					/*	TESTING
					 * http://testing.soydelivery.com.uy/rest/awsnuevopedido1
					 * "Negocio_id": 2143,
						"Negocio_clave": 1081,
					 */
					
					/*	PROD
					 * https://soydelivery.com.uy/rest/awsnuevopedido1
					 * "Negocio_id": 3669,
						"Negocio_clave": 1081,
					 */
					c.setIdCliente(env.getUsuario());
					c.setPass(env.getPass());
					c.setPrestador("FORUS");
					c.setIdCliente(env.getIdTienda());
					c.setToken(env.getPass());
					c.setUser(env.getUsuario());
					c.setPedido(pedido+"");
					c.setFecha(env.getFechaEntrega());
					c.setHora("");
				
					ship.setCredenciales(c);
									
					json = gson.toJson(ship);
					
					salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/SDLShipping?token="+token_API, json);
					DataDescDescripcion despacho = gson.fromJson(salida, DataDescDescripcion.class);
					System.out.println(despacho);
					return despacho;						
				}
					
				default:
				break;
				
			}
		} catch (Exception e) 
		{
			return new DataDescDescripcion("","");
		}
		
		return new DataDescDescripcion("","");
	}
	
	public DataIDDescripcion getTracking(trackingPedido t,int idEmpresa) {


		String host ="encuentra.200.com.uy";
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		DataIDDescripcion tracking = new DataIDDescripcion(t.getIdPedido(),"");
		try {
			Credenciales c = new Credenciales();
			Gson gson = new Gson();
			String json="";
			String salida = "";			
			
			switch (t.getCourier()) 
			{
				case "DAC":
				{
					break;
				}
				case "UES":
				{
					c.setUser(t.getUser());
					c.setPass(t.getPass());
					c.setToken(t.getPass());
					c.setPedido(t.getIdEcommerce()+"");
					c.setTracking(t.getTracking());
					
					json = gson.toJson(c);
					if(json.contains("\\u0026")) {
						json = json.replace("\\u0026", "&");
					}
					
					salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/getTrackingUES?token="+token_API, json);
					trackingUES out = gson.fromJson(salida, trackingUES.class);
					tracking.setDescripcion(out.getEstado());
					try {
						String fecha = "";
						String dia = out.getFecha().split("/")[0];
						String mes = out.getFecha().split("/")[1];
						String anio = out.getFecha().split("/")[2].split(" ")[0];
						
						int hora = Integer.parseInt(out.getFecha().split(" ")[1].split(":")[0]);
						String min = out.getFecha().split(" ")[1].split(":")[1];
						String am_pm = out.getFecha().split(" ")[2];
						
						if (am_pm.equals("pm") && hora!= 12) {
							hora += 12;
						}
						
						String horaStr = hora+"";
						if(hora < 10) {
							horaStr = "0"+hora;
						}
						fecha = anio+"-"+mes+"-"+dia+" "+hora+":"+min+":00";
						tracking.setDescripcionB(fecha);
					} catch (Exception e) {
						// TODO: handle exception
					}
					
					break;
				}
				case "MIRTRANS":
				{
					c.setUser(t.getUser());
					c.setPass(t.getPass());
					c.setToken(t.getPass());
					c.setPedido(t.getIdEcommerce()+"");
					c.setTracking(t.getTracking());
					
					json = gson.toJson(c);
					salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/getTrackingMirtrans?token="+token_API, json);
					trackingMIRTRANS out = gson.fromJson(salida, trackingMIRTRANS.class);
					tracking.setDescripcion(out.getEstadoDescripcion());
					tracking.setDescripcionB(out.getFecha());
					break;
				}
				case "SOYDELIVERY":
				{
					c.setUser(t.getUser());
					c.setPass(t.getPass());
					c.setToken(t.getPass());
					c.setPedido(t.getIdEcommerce()+"");
					c.setTracking(t.getTracking());
					
					json = gson.toJson(c);
					salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/Couriers/getTrackingSDL?token="+token_API, json);
					trackingSDL out = gson.fromJson(salida, trackingSDL.class);
					tracking.setDescripcion(out.getPedido_estado_desc());
					tracking.setDescripcionB(out.getFecha_entrega()+" 00:00:00");
					break;
				}
			}
		}catch (Exception e) {
			// TODO: handle exception
		}
		return tracking;
	}
	
	public DataDescDescripcion BajarPDF(String eti, String trkNmb){
		try {
						//PASO A PDF
			String path ="";
			String barra = "";
			try
			{
				PropertiesHelper pH=new PropertiesHelper("paths");
				pH.loadProperties();
				path = pH.getValue("pdf");
				String filePath = path+"/"+trkNmb+".pdf";
				
				 // Encode using basic encoder
		         //String base64encodedString = retorno.getPdfserializado();
		         
		         System.out.println("Base64 encoded string :" + eti);

		         // Decode
		         byte[] base64decodedBytes = Base64.getDecoder().decode(eti);

				 File file = new File(filePath);
		         file.delete();
		         
		         FileOutputStream fos = new FileOutputStream(new File(filePath));
		         
		         String str = eti;
		         
		         InputStream in = new ByteArrayInputStream(base64decodedBytes);
		         
		         int inByte;
		            while ((inByte = in.read()) != -1) {
		                fos.write(inByte);
		            }
		 
		            in.close();
		           
		            
		         
		         fos.write(str.getBytes());
		         
		         
		         fos.close();
		         
		         
		         File f = new File(filePath);
			     if(f.exists())
			     {
			    	 path = pH.getValue("HTTP_pdf");
			    	 
			    	 
			    	 
			    	
			    	 //es lo ultimo
			    	 try (PDDocument document = PDDocument.load(new File(filePath))) 
			    	 {

			             document.getClass();

			             if (!document.isEncrypted()) {
			 			
			                 PDFTextStripperByArea stripper = new PDFTextStripperByArea();
			                 stripper.setSortByPosition(true);

			                 PDFTextStripper tStripper = new PDFTextStripper();

			                 String pdfFileInText = tStripper.getText(document);
			                
			                 String lines[] = pdfFileInText.split("\\r?\\n");
			                 for (String line : lines) 
			                 {
			                     barra = line;
			                     break;
			                 }
			                 barra = barra.replace("*", "");
			                 System.out.println(barra);

			             }

			         }
			    	 catch (Exception e) 
			    	 {
						// TODO: handle exception
					}
			    	 
			    	 
			    	 
			    	 
			        return  new DataDescDescripcion(barra, path+"/"+trkNmb+".pdf");
			     }
			     else
			     {
			    	 return new DataDescDescripcion("","");
			     }
		         				
			}
			catch (Exception e) 
			{
			 e.printStackTrace();
			}
			
			return  new DataDescDescripcion(barra, path+"/"+trkNmb+".pdf");
				
			
			
		} catch (Exception e) {
			return  new DataDescDescripcion("", "");
		}
		
	}
	
	public void PutTracking(Long id, String url, String tracking, int courier, int idEmpresa)
	{
		try 
		{
			if(tracking.contains("{")) {
				tracking = tracking.split("\"sender_id\":")[1].split(",")[0];
			}
			Logica log = new Logica();		
			
			String token_API=log.darParametroEmpresa(idEmpresa,10);			
			
			String host = "encuentra.200.com.uy";
			String servicio = "http://"+host+"/encuentraAPI/Integraciones/another/putTracking?token="+token_API; 
			
			Order o = new Order();
			o.setId(id);
			o.setTracking(tracking);
			o.setCourier(courier);
			o.setUrlTracking("");
			
			Gson gson = new Gson();
			String json = gson.toJson(o);
			
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			System.out.println(salida);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void updateOrder(Order order, int idEmpresa)
	{
		try 
		{
			
			Logica log = new Logica();		
			
			String token_API=log.darParametroEmpresa(idEmpresa,10);			
			
			String host = "encuentra.200.com.uy";
			String servicio = "http://"+host+"/encuentraAPI/Integraciones/another/updateOrder?token="+token_API; 
			
			Gson gson = new Gson();
			String json = gson.toJson(order);
			
			
			String salida =  callWSPOST_ParamJSON(servicio, json);
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public void CheckInOrder(Long order, int idEmpresa)
	{
		try 
		{
			
			Logica log = new Logica();		
			
			String token_API=log.darParametroEmpresa(idEmpresa,10);			
			
			String host = "encuentra.200.com.uy";
			String servicio = "http://"+host+"/encuentraAPI/Integraciones/another/CheckInOrder?token="+token_API+"&order="+order; 
			
			Gson gson = new Gson();
						
			String salida =  callWSPOST_ParamJSON(servicio, "");
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public DataIDDescripcion movStock(MovStock m,boolean resend, int idEmpresa){
		
		DataIDDescripcion data = new DataIDDescripcion(0,"");
		data.setDescripcionB("");
		String host =api_host;
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		
		try {
			Gson gson = new Gson();
			String json="";
			String salida = "";			
			
			json = gson.toJson(m);
			salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/ERPintegrations/stockMovement?token="+token_API+"&resend="+resend, json);
			data = gson.fromJson(salida, DataIDDescripcion.class);
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return data;
	}
	
	public List<MovStock> QueueMovStock(int idEmpresa){
		
		List<MovStock> m = null;
		String host =api_host;
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		
		try {
			Gson gson = new Gson();
			String salida = "";			
			
			salida = callWSGET("http://"+host+"/encuentraAPI/Integraciones/ApiEntities/queueStockMovement?token="+token_API);
			m = gson.fromJson(salida, ColeccionMovStock.class).getColeccion();
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return m;
	}
	
	public MovStock darMovStock(int id, int idEmpresa){
		
		MovStock m = null;
		String host =api_host;
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		
		try {
			Gson gson = new Gson();
			String salida = "";			
			
			salida = callWSGET("http://"+host+"/encuentraAPI/Integraciones/ApiEntities/queueStockMovement?idMov="+id+"&token="+token_API);
			m = gson.fromJson(salida, ColeccionMovStock.class).getColeccion().get(0);
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return m;
	}
	
	public boolean confirmarTransferencia(MovStock m, int idEmpresa){
		
		boolean grabo = false;
		String host =api_host;
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		
		try {
			Gson gson = new Gson();
			String json="";
			String salida = "";			
			
			json = gson.toJson(m);
			salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/ERPintegrations/confirmTransf?token="+token_API, json);
			grabo = gson.fromJson(salida, boolean.class);
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return grabo;
	}
	
	public boolean grabarRecepcion(GrabarRecepcion r, int idEmpresa){
		
		boolean grabo = false;
		String host =api_host;
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		
		try {
			Gson gson = new Gson();
			String json="";
			String salida = "";			
			
			json = gson.toJson(r);
			salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/ERPintegrations/grabarRecepcion?token="+token_API, json);
			grabo = gson.fromJson(salida, boolean.class);
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return grabo;
	}
	
	public boolean grabarBarra(articuloBarra ab, int idEmpresa){
		
		boolean grabo = false;
		String host =api_host;
		//String host ="localhost:8080";
		
		Logica log = new Logica();
		String token_API=log.darParametroEmpresa(idEmpresa,10);
		
		
		try {
			Gson gson = new Gson();
			String json="";
			String salida = "";			
			
			json = gson.toJson(ab);
			salida = callWSPOST_ParamJSON("http://"+host+"/encuentraAPI/Integraciones/ERPintegrations/grabarBarra?token="+token_API, json);
			grabo = gson.fromJson(salida, boolean.class);
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return grabo;
	}
	
	private String callWSPOST_ParamJSON(String URLbase, String jotason)
	{
		String retorno = "";
		HttpClient httpClient = HttpClientBuilder.create().build();
		try 
		{
	    	
	    	System.out.println("llamando a "+URLbase);
	    	System.out.println("Parametros JSON "+jotason);
	    	System.out.println("Respuesta");

	    	String payload = jotason;
	    	StringEntity entityI;
	    	
	    	entityI = new StringEntity(payload, ContentType.APPLICATION_JSON);
	    
	    	HttpPost request = new HttpPost(URLbase);
	    	request.setEntity(entityI);
	    	
		  	HttpResponse httpResponse = httpClient.execute(request);
		  	
		  	
		  	int code=httpResponse.getStatusLine().getStatusCode();
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          return strFileContents;
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          request.abort();
		          runtimeException.printStackTrace();
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		System.out.println(retorno);
		return retorno;
		
	}
	
	public String callWSPOSTparam(String URLbase, List<DataIDDescripcion> params)
	{
		
	
		String retorno = "";
		HttpClient httpClient = new DefaultHttpClient();
		
	    try 
		{
	    	
	    	System.out.println("Respuesta");
	    	HttpPost httpPostRequest = new HttpPost(URLbase);
	    	
	    	//StringEntity params =new StringEntity(jotason);
	    	httpPostRequest.setHeader("Content-type", "application/x-www-form-urlencoded");
	    	
	    	//httpPostRequest.setEntity(params);
	    	
	    	ArrayList<NameValuePair> postParameters;
	    	postParameters = new ArrayList<NameValuePair>();
	    	for(DataIDDescripcion p:params){
	    		postParameters.add(new BasicNameValuePair(p.getDescripcion(), p.getDescripcionB()));
	    	}
	        
	        httpPostRequest.setEntity(new UrlEncodedFormEntity(postParameters, "UTF-8"));    	
	    	
	    	
		  	HttpResponse httpResponse = httpClient.execute(httpPostRequest);
		  	int code=httpResponse.getStatusLine().getStatusCode();
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          System.out.println(strFileContents);
		          return strFileContents;
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          httpPostRequest.abort();
		          runtimeException.printStackTrace();
		          return "error";
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		      return "error";
		      
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		      return "error";
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		return retorno;
	
		
	}
	
	private String callWSGET(String URL)
	{
		String retorno = "";
		HttpClient httpClient = new DefaultHttpClient();
		
	    ((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT),new UsernamePasswordCredentials("produccion@200data.com", "200data2017"));
	    try 
		{
	    	HttpGet httpGetRequest = new HttpGet(URL);
	    	
		  	HttpResponse httpResponse = httpClient.execute(httpGetRequest);
		  	HttpEntity entity = httpResponse.getEntity();
		  	
		  	byte[] buffer = new byte[1024];
		    
		  	if (entity != null) 
		  	{
		        InputStream inputStream = entity.getContent();
		        try 
		        {
		          int bytesRead = 0;
		          BufferedInputStream bis = new BufferedInputStream(inputStream);
		          byte[] contents = new byte[1024];
		          String strFileContents=""; 
		          while((bytesRead = bis.read(contents)) != -1) 
		          { 
		              strFileContents += new String(contents, 0, bytesRead);              
		          }

		          
		          
		          return strFileContents;
		          
		          
		          
		        }
		        catch (RuntimeException runtimeException) 
		        {
		          // In case of an unexpected exception you may want to abort
		          // the HTTP request in order to shut down the underlying
		          // connection immediately.
		          httpGetRequest.abort();
		          runtimeException.printStackTrace();
		        }
		        finally 
		        {
		          // Closing the input stream will trigger connection release
		          try 
		          {
		            inputStream.close();
		          } 
		          catch (Exception ignore) 
		          {
		        	  
		          }
		        }
		      }
		    } 
	    	catch (ClientProtocolException e) 
		    {
		      e.printStackTrace();
		    }
	    	catch (IOException e) 
	    	{
		      // thrown by entity.getContent();
		      e.printStackTrace();
		    }
	    	finally 
	    	{
		      httpClient.getConnectionManager().shutdown();
		    }
		return retorno;
		
	}
	
}

