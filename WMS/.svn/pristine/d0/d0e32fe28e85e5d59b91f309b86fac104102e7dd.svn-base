package persistencia;

import helper.PropertiesHelper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import dataTypes.DataDescDescripcion;
import dataTypes.DataIDDescripcion;

public class _EncuentraPersistir {

	private Connection connection = null;
	public _EncuentraPersistir(){};

	private Connection connect() throws Exception,
			InstantiationException, IllegalAccessException {

		Connection conn = null;
		PropertiesHelper pH=new PropertiesHelper("conexion");
		pH.loadProperties();
		String puerto = pH.getValue("puerto");
		String bd = pH.getValue("bd");
		String usuario = pH.getValue("usuario");
		String password = pH.getValue("password");
		String servidor = pH.getValue("servidor");
		String prefijoURL=pH.getValue("prefijoURL");
		String url = prefijoURL + servidor + ":" + puerto + "/" + bd;

		try {
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			conn = DriverManager.getConnection(url+"?allowMultiQueries=true&autoReconnect=true", usuario, password);

		} catch (Exception e) {
			System.out.println("Error al abrir la conexión");
		}

		return conn;
	}

	public Connection getConnection() throws Exception {
		if (connection == null || connection.isClosed()) {
			connection = connect();
		}
		return connection;
	}
	


	private void desconectar(ResultSet rs,PreparedStatement ps,Statement st,Connection con) throws Exception 
	{
		if (rs != null) {
	        try {
	            rs.close();
	        } catch (SQLException e) {  e.printStackTrace(); /* ignored */}
	    }
	    if (ps != null) {
	        try {
	            ps.close();
	        } catch (SQLException e) { e.printStackTrace();/* ignored */}
	    }
	    if (st != null) {
	        try {
	            st.close();
	        } catch (SQLException e) {  e.printStackTrace(); /* ignored */}
	    }
	    if (con != null) {
	        try {
	        	con.close();
	        	con = null;
	        	
	        } catch (SQLException e) { e.printStackTrace();/* ignored */}
	    }
		
		
	}

	public boolean persistir(String consulta) throws Exception 
	{
		connection = getConnection();
		
		boolean pude = false;	
		PreparedStatement pstmt = null;
		try {
			pstmt = connection.prepareStatement("SET GLOBAL max_allowed_packet=1073741824; "+consulta);
			pstmt.executeUpdate();
			//pstmt.close();
			//coment
			pude = true;
			desconectar(null,pstmt,null, connection);

		} catch (Exception e )
		{
			pude = false;
			System.out.println("persistiendo: "+consulta);
			System.out.println("error");
			System.out.println(e.getMessage());
			desconectar(null,pstmt,null, connection);
			return pude;
		}
		
		return pude;
	}
	
	public int persistirUpt(String consulta) throws Exception 
	{
		connection = getConnection();
		
		int salida = 0;	
		PreparedStatement pstmt = null;
		try {
			pstmt = connection.prepareStatement("SET GLOBAL max_allowed_packet=1073741824; "+consulta);
			salida = pstmt.executeUpdate();
			//pstmt.close();
			//coment
			desconectar(null,pstmt,null, connection);

		} catch (Exception e )
		{
			System.out.println("persistiendo: "+consulta);
			desconectar(null,pstmt,null, connection);
			return 0;
		}
		
		return salida;
	}
	
	
	
	
	
	
	
	public boolean persistirBatch(String consulta) throws Exception 
	{
		connection = getConnection();
		boolean pude = false;
		System.out.println(consulta);
		Statement s = null;
		try 
		{
			int counter = 0;
			s = connection.createStatement();
			boolean on = false;
			s.addBatch(consulta);
			s.executeBatch();
			s.close();
			pude = true;
			desconectar(null,null,s,connection);
		} 
		catch (Exception e) 
		{
			if(e.getMessage().contains("empty"))
			{
				pude = true;
			}
			else
			{
				pude = false;
			}
			System.out.println(e.getMessage());
			desconectar(null,null,s,connection);
			return pude;
		}
		
		return pude;
	}
	
	
	public boolean persistirIdDesc(List<DataIDDescripcion> lista,String tabla, boolean borrar, int idEmpresa) throws Exception 
	{
		System.out.println("Persistiendo "+ tabla);
		connection = getConnection();
		PreparedStatement pstmt = null;
		
		StringBuilder values = new StringBuilder();
		String insert = "INSERT INTO "+tabla+" (`Id`, `Descripcion`,idEmpresa) VALUES ";
		List<String> inserts = new ArrayList<String>();
		int contador = 0;
		boolean pri = true;
		for (DataIDDescripcion d : lista) 
		{
			
			if(pri)
			{
				pri = false;
				values.append (" ("+d.getId()+", '"+d.getDescripcion()+"',"+idEmpresa+")");
			}
			else
			{
				values.append (",("+d.getId()+", '"+d.getDescripcion()+"',"+idEmpresa+")");
			}
			
			contador++;
			
			if(contador==2000)
			{
				inserts.add(insert+values.toString());
				pri=true;
				values = new StringBuilder();
				contador=0;
				
			}
		}
		
		inserts.add(insert+values.toString());

		if(borrar)
		{
			PreparedStatement pstmt0 = connection.prepareStatement("delete from "+tabla+" where idEmpresa="+idEmpresa );
			pstmt0.executeUpdate();
			pstmt0.close();
		}
		boolean pude = false;
		try 
		{
			for (String i : inserts) 
			{
				pstmt = connection.prepareStatement(i);
				pstmt.executeUpdate();
			}
			
			//pstmt.close();
			//coment
			pude = true;

		} 
		catch (Exception e)
		{
			pude = false;
		}
		
		
		desconectar(null,pstmt,null, connection);
		return true;
	}
	
	public boolean persistirDescDesc(List<DataDescDescripcion> lista,String tabla, boolean borrar, int idEmpresa) throws Exception 
	{
		connection = getConnection();
		System.out.println("Persistiendo "+ tabla);
		PreparedStatement pstmt = null;
		StringBuilder values = new StringBuilder();
		String insert = "INSERT INTO "+tabla+" (`Id`, `Descripcion`,idEmpresa) VALUES ";
		List<String> inserts = new ArrayList<String>();
		int contador = 0;
		boolean pri = true;
		for (DataDescDescripcion d : lista) 
		{
			
			if(pri)
			{
				pri = false;
				values.append (" ('"+d.getId()+"', '"+d.getDescripcion()+"',"+idEmpresa+")");
			}
			else
			{
				values.append (",('"+d.getId()+"', '"+d.getDescripcion()+"',"+idEmpresa+")");
			}
			
			contador++;
			
			if(contador==1000)
			{
				String cola = " ON DUPLICATE KEY UPDATE Descripcion= VALUES(Descripcion) ";
				inserts.add(insert+values.toString() +cola);
				pri=true;
				values = new StringBuilder();
				contador=0;
				
			}
		}
		
		String cola = " ON DUPLICATE KEY UPDATE Descripcion= VALUES(Descripcion) ";
		inserts.add(insert+values.toString() +cola);

		boolean pude;
		try 
		{
			for (String i : inserts) 
			{
				System.out.println(i);
				pstmt = connection.prepareStatement(i);
				
				pstmt.executeUpdate();
			}
			
			//pstmt.close();
			//coment
			pude = true;

		} 
		catch (Exception e)
		{
			e.printStackTrace();
			pude = false;
		}
		

		
		desconectar(null,pstmt,null, connection);
		return true;
	}
	
	
	
	
	public int persistirDarUltimo(String consulta, String tabla, String key, int idEmpresa) throws Exception 
	{
		connection = getConnection();
		_EncuentraConexion econ;
		int retorno  = 0;
		PreparedStatement pstmt = null;
		try {
		    pstmt = connection.prepareStatement(consulta);
			pstmt.executeUpdate();
			//pstmt.close();
			//coment
			econ = new _EncuentraConexion();
			Connection cone;
			cone = econ.getConnection();
			boolean cerrarConexion = false;
			retorno = econ.UltimoId("select max("+key+") from "+tabla+ " where IdEmpresa="+idEmpresa,cerrarConexion);

		} catch (Exception e) {
			
			System.out.println(e.getMessage());
			desconectar(null,pstmt,null, connection);
			return retorno;
		}

		
		return retorno;
	}

	
	public int persistirDarId(String consulta, String idDepoSap) throws Exception 
	{
		connection = getConnection();
		_EncuentraConexion econ = new _EncuentraConexion();
		int retorno  = 0;
		PreparedStatement pstmt = null;
		try {
			pstmt = connection.prepareStatement(consulta);
			pstmt.executeUpdate();
			//pstmt.close();
			//coment
			Connection cone;
			cone = econ.getConnection();
			retorno = econ.DarIdDeposito("select idDeposito from depositos where IdDepositoSAP = '"+idDepoSap+"'");

		} catch (Exception e) {
			desconectar(null,pstmt,null, connection);
			System.out.println(e.getMessage());
			return retorno;
		}
		
		desconectar(null,pstmt,null, connection);
		return retorno;
	}

	
	//NICO
	public String Consulta(String consulta) throws Exception {
		connection = getConnection();
		String resp="";
		PreparedStatement pstmt = null;
		try {
			pstmt = connection.prepareStatement(consulta);
			ResultSet rs = pstmt.executeQuery(consulta);
			while (rs.next()) 
			{
				resp = rs.getString(1);
			}
			rs.close();
			
			//pstmt.close();
			//coment
			

		} catch (Exception e)
		{
			desconectar(null,pstmt,null, connection);
			//System.out.println(consulta);
			System.out.println(e.getMessage());
			return resp;
		}
		desconectar(null,pstmt,null, connection);
		return resp;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
