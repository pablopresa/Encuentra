package web.tareas;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import beans.Usuario;
import beans.encuentra.DataLineaListaTareasMob;
import beans.encuentra.DataLineaRepo;
import beans.encuentra.TipoSector;
import dataTypes.DataArtBarraCant;
import dataTypes.DataClasificacionEntregaArti;
import dataTypes.DataIDDescripcion;
import logica.Logica;
import logica.Utilidades;

public class _EncuentraEventoTarea extends Action 
{


	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception 
	{
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
	
	
		Usuario uLog = (Usuario) session.getAttribute("uLogeado");
		Utilidades util = new Utilidades();
		int idEmpresa = util.darEmpresa(uLog);
		if(idEmpresa==0)
		{
			return mapping.findForward("LOGIN");
		}

		List<TipoSector> tipos = Logica.encuentraDarTiposSector(idEmpresa);
		//estado=1&
		//main=1&
		//tarea=5&
		//idRepo=6937819
		
		String esta = request.getParameter("estado");
		String mai = request.getParameter("main");
		String tar = request.getParameter("tarea");
		String idR = request.getParameter("idRepo");
		try
		{
			int idD = Integer.parseInt(request.getParameter("idDoc"));
			uLog.registrarEventoHilo(session.getId(), " iniciando tarea picking "+ idD, idD ,101);
			session.setAttribute("idPicking", idD);
		}
		catch(Exception e)
		{
			
		}
		String nombreTarea= request.getParameter("nombreTarea");
		
		session.setAttribute("nombreTarea", nombreTarea);
				
		int ultimaLinea = Logica.encuentraDarUltimaLinea(Integer.parseInt(tar),idEmpresa);
		int ultimoIndex =0;
		ultimoIndex= ultimaLinea;
		/*if(ultimaLinea==0)
		{
			ultimoIndex= ultimaLinea;
		}
		else
		{
			ultimoIndex= ultimaLinea+1;
		}*/
	
		
		//pregunto si es una repo
		int intR=Integer.parseInt(idR);
		if(intR==-100)
		{
			// es una clasificacion de entrega
			List<DataClasificacionEntregaArti> artis = Logica.encuentraDarLineasEntrega(Integer.parseInt(mai),idEmpresa);
			session.setAttribute("artisEntrega", artis);
			session.setAttribute("idTarea", Integer.parseInt(tar));
			session.setAttribute("idMain", Integer.parseInt(mai));
			return mapping.findForward("entrga");
		}
		
		
		
		
		DataIDDescripcion cantUPos = Logica.encuentraDarCantEjecutoresPosicionMio(Integer.parseInt(mai), uLog.getNumero(),idEmpresa);
		DataIDDescripcion ultimoItem = Logica.encuentraDarUltimoItemLinea(Integer.parseInt(mai),idEmpresa);
		//id es la can usuarios 
		int cantEjecutores = cantUPos.getId();
		int posicion = Integer.parseInt(cantUPos.getDescripcion());
		//descripcion es la posicion en string
		
		
		
		if(intR>1)
		{
			//es repo
			//la traigo
			List <DataLineaRepo> repos = Logica.encuentraDarArtRepos(Integer.parseInt(idR), "",idEmpresa);
			
			if(repos.size()==0)
			{
				request.setAttribute("menError","Reposicion eliminada de la base de datos");
				Logica.encuentraUpdateAvanceTarea(Integer.parseInt(tar),100, -100,idEmpresa);
				Logica.encuentraAltaEventoTarea(Integer.parseInt(tar), 2, uLog.getNumero(),0,idEmpresa);
				
				List<DataLineaListaTareasMob> tarMob = Logica.encuentraDarTareasMob(uLog.getNumero(),idEmpresa);
				session.setAttribute("tarMob", tarMob);
				return mapping.findForward("vacio");
			}

			//pregunto cuanto son
			if(cantEjecutores>1)
			{
				int inicioMio;
				
				int cantidadMia = (repos.size()-1)/cantEjecutores;
				inicioMio = ((cantidadMia*posicion)-cantidadMia)+1;
				//por si no da exacto
				int multip = cantidadMia*cantEjecutores;
				
				if(multip!= repos.size() && cantEjecutores==posicion)
				{
					cantidadMia = cantidadMia +(repos.size()-(cantidadMia*cantEjecutores));
				}
				List <DataLineaRepo> retorno = new ArrayList<DataLineaRepo>();
				
				
				int voyX=0;
				int cantIn=0;
				boolean pone = false;
				for (DataLineaRepo da : repos) 
				{
					voyX ++;
					if(voyX==inicioMio)
					{
						pone = true;
					}
					else if(cantIn==cantidadMia)
					{
						pone = false;
						break;
					}
					
					
					if(pone)
					{
						retorno.add(da);
						cantIn++;
					}
					
				}
				
				repos = retorno;
			}
			
			session.setAttribute("repoArt", repos);
			session.setAttribute("idTarea", Integer.parseInt(tar));
			session.setAttribute("idMain", Integer.parseInt(mai));
			session.setAttribute("voy", repos.get(ultimoIndex));
			
			List<String> codigos = Logica.bultosValidosEnOjo(repos.get(ultimoIndex).getIdArticulo(), repos.get(ultimoIndex).getCubi(), idEmpresa);
			session.setAttribute("codigosRecomendados", codigos);
			
			session.setAttribute("cuantasVoy", ultimoIndex);
			session.setAttribute("unidad", Integer.valueOf(ultimoItem.getId()));
			session.setAttribute("total", (repos.size()));
		}
		else if(intR==0)
		{
			List<DataArtBarraCant>recepciones=Logica.darListaARecepcionar(Integer.parseInt(mai),idEmpresa);
			DataIDDescripcion tipo=Logica.darTipoRecepcion(Integer.parseInt(mai),idEmpresa);
			
			session.setAttribute("idMain", mai);
			session.setAttribute("idTarea", Integer.parseInt(tar));
			session.setAttribute("artBarCantTorecep", recepciones);
			session.setAttribute("tipoTar", tipo);
			Logica.encuentraAltaEventoTarea(Integer.parseInt(tar), Integer.parseInt(esta), uLog.getNumero(),0,idEmpresa);
			return mapping.findForward("rec");
			
		}
		
		
		
		Logica.encuentraAltaEventoTarea(Integer.parseInt(tar), Integer.parseInt(esta), uLog.getNumero(),0,idEmpresa);
		
		
		//guardo el evento sobre la tarea
		
		
		return mapping.findForward("repo");
			
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
