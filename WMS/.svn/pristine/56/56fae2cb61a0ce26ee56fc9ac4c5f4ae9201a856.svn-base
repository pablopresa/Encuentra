package web.picking;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import logica.Logica;
import logica.Utilidades;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import dataTypes.DataIDDescripcion;

import beans.ArticuloLineaReposicion;
import beans.Fecha;
import beans.Usuario;

import beans.encuentra.Tarea;

public class _EncuentraAltaPicking extends Action{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception 
	{
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
		System.out.println("alta de picking");
		
		Usuario uLog = (Usuario) session.getAttribute("uLogeado");
		Utilidades util = new Utilidades();
		int idEmpresa = util.darEmpresa(uLog);
		if(idEmpresa==0)
		{
			return mapping.findForward("LOGIN");
		}
		List<ArticuloLineaReposicion> articulosIn = new ArrayList<ArticuloLineaReposicion>();
		List<List<ArticuloLineaReposicion>> pickingsPedidos = null; //new ArrayList<List<ArticuloLineaReposicion>>(); 
		String saveType = request.getParameter("tipoSave");
		
		List<ArticuloLineaReposicion> articulos = (List<ArticuloLineaReposicion>) session.getAttribute("articulosRepo");
		int cantidades = 0;
		String ecommerce = (String) session.getAttribute("ecommerce");
		StringBuilder sb = new StringBuilder();
		
		for (ArticuloLineaReposicion ar : articulos) 
		{
			if(ecommerce.equals("1")){											//SI ES ECOMMERCE AGARRO TODOS LOS NUMEROS DE PEDIDOS Y VOY A BUSCAR LOS ARTICULOS A LA BASE
				String param = request.getParameter(ar.getPedido()+"-"+ar.getIdArticulo());			//PARA QUE NO ME QUEDEN PEDIDOS PARCIALES
				if(param!=null && param.equals("on"))
				{					
					sb.append(ar.getPedido()+",");
				}
			}
			else{
				String param = request.getParameter(ar.getSinc().getId()+"-"+ar.getIdArticulo()+"-"+ar.getDestino().getId());
				if(param!=null && param.equals("on"))
				{					
					articulosIn.add(ar);
					cantidades+=ar.getCantidad();
				}
			}
			
		}
		if(ecommerce.equals("1")){												//SI ES ECOMMERCE VOY A BUSCAR LOS ARTICULOS
			articulosIn = Logica.darArtsLineasRepoEC(sb,idEmpresa);						//Y SUMO SUS CANTIDADES
			for(ArticuloLineaReposicion a:articulosIn){				
				cantidades+= a.getCantidad();
			}
		}
		
		Hashtable<Integer, Integer> depositosHT = new Hashtable<Integer, Integer>();
		int cantidaDestino =0;
		
		for (ArticuloLineaReposicion ar : articulosIn) 
		{
			depositosHT.put(ar.getDestino().getId(), ar.getDestino().getId());
		}
		
		List <Integer> destinosList = new ArrayList<Integer>(depositosHT.values()); 
		cantidaDestino = destinosList.size();
		
		if(cantidaDestino>1)
		{
			int capacidadClasificacion = 0;
			try
			{
				capacidadClasificacion = (Integer) session.getAttribute("capacidadClasificacion");
			}
			catch(Exception e)
			{
				
			}
			
			if(cantidaDestino>capacidadClasificacion)
			{
				request.setAttribute("menError", "Atencion: Seleccione menos destinos <br/> "+cantidaDestino+" destinos y "+capacidadClasificacion+" ubicaciones de clasificacion <br/> Puede generar pickings hasta a "+capacidadClasificacion+" destinos diferentes");
				session.setAttribute("capacidadClasificacion", capacidadClasificacion);
				return mapping.findForward("no");
			}
			else
			{/*
				Hashtable<Integer, Integer> destinosHt = new Hashtable<Integer, Integer>(); // la tabla de la que voy a consultar la posicion segun el destino
				int posicion = 1;
				for (Integer integer : destinosList) 
				{
					destinosHt.put(integer, posicion);// le asigno posicion a cada estion
					posicion++;
				}
				
				for (ArticuloLineaReposicion ar : articulos) 
				{
					int posicionDestino = destinosHt.get(ar.getDestino().getId());
					ar.setPosClasif(posicionDestino);
				}
				*/
				for (ArticuloLineaReposicion ar : articulos) 
				{					
					ar.setPosClasif(ar.getDestino().getId());
				}
				
				
			}
		}
		
		
		
		
		
		if(saveType.equals("0"))
		{
			Hashtable<String, List<ArticuloLineaReposicion>> htPickPedidos = new Hashtable<String, List<ArticuloLineaReposicion>>();
			List<Tarea> tareas = new ArrayList<Tarea>();
			
			for (ArticuloLineaReposicion ar : articulosIn) 
			{
				if(htPickPedidos.get(ar.getPedido()+"")!=null)
				{
					htPickPedidos.get(ar.getPedido()+"").add(ar);
				}
				else
				{
					List<ArticuloLineaReposicion> lista = new ArrayList<ArticuloLineaReposicion>();
					lista.add(ar);
					htPickPedidos.put(ar.getPedido()+"", lista);
				}
			}
			
			pickingsPedidos = new ArrayList<List<ArticuloLineaReposicion>>(htPickPedidos.values());
						
			for (List<ArticuloLineaReposicion> articulosInL : pickingsPedidos) 
			{
				int idPicking = Logica.encuentraAltaPicking(articulosInL, cantidades, "Sin filtros aplicados",idEmpresa);
				List <DataIDDescripcion> usuariosOperarios = Logica.encuentraDaroperarios(idEmpresa);
				
				int cant = 0;
				for (ArticuloLineaReposicion a : articulosInL) 
				{
					cant+=a.getCantidad();
				}

				session.setAttribute("operarios", usuariosOperarios);
				
				Tarea tarea = new Tarea();
				
				DataIDDescripcion estado = new DataIDDescripcion();
				estado.setId(0);
				
				tarea.setEstado(estado);
				Fecha fecha = new Fecha();
				String fechaI = fecha.darFechaDia_Mes_Anio_HoraBarra();
				
				String destinos = "";
				List<Integer> destinosLST = new ArrayList<Integer>(depositosHT.values());
				for (Integer integer : destinosLST) 
				{
					destinos+=" - "+integer;
				}
				
				
				tarea.setFechaInicio(fechaI);
				tarea.setObservacion("Picking "+destinos+" "+uLog.getNick());
				tarea.setPorcentaje(0);
				tarea.setResponsable(new DataIDDescripcion(uLog.getNumero(),uLog.getNick()));
				tarea.setTipo(new DataIDDescripcion(1,"Picking"));
				tarea.setCantidadPares(cant);
				tarea.setIdDocumento(idPicking);
				tarea.setArticulosIn(articulosInL);
				
				tareas.add(tarea);
				
				
			}
			
			session.setAttribute("tareas",tareas);
			session.setAttribute("singleTar", "0");
			return mapping.findForward("tar");
			
			
			
		}
		
		int idPicking = Logica.encuentraAltaPicking(articulosIn, cantidades, "Sin filtros aplicados",idEmpresa);
		
		
		

		
		uLog.registrarEventoHilo(session.getId(), "Asignando picking  "+ idPicking, idPicking,101);
		
		if(saveType.equals("0"))
		{
			return mapping.findForward("ok");
		}
		else
		{
			List <DataIDDescripcion> usuariosOperarios = Logica.encuentraDaroperarios(idEmpresa);
			List <DataIDDescripcion> usuariosSuper = Logica.encuentraDarSuper(idEmpresa);
			List <DataIDDescripcion> tiposTarea = Logica.encuentraDarTiposTarea(idEmpresa);
			

			session.setAttribute("operarios", usuariosOperarios);
			
			Tarea tarea = new Tarea();
			
			
			DataIDDescripcion estado = new DataIDDescripcion();
			estado.setId(0);
			
			tarea.setEstado(estado);
			Fecha fecha = new Fecha();
			String fechaI = fecha.darFechaDia_Mes_Anio_HoraBarra();
			
			String destinos = "";
			List<Integer> destinosLST = new ArrayList<Integer>(depositosHT.values());
			for (Integer integer : destinosLST) 
			{
				destinos+=" - "+integer;
			}
			
			
			tarea.setFechaInicio(fechaI);
			tarea.setObservacion("Picking "+destinos+" "+uLog.getNick());
			tarea.setPorcentaje(0);
			tarea.setResponsable(new DataIDDescripcion(uLog.getNumero(),uLog.getNick()));
			tarea.setTipo(new DataIDDescripcion(1,"Picking"));
			tarea.setCantidadPares(cantidades);
			tarea.setIdDocumento(idPicking);
			
			session.setAttribute("dipick", "dipick");
			
			
			
			
			
			
			
			session.setAttribute("articulosIn",articulosIn);
			session.setAttribute("tarea", tarea);
			session.setAttribute("singleTar", "1");
			
			return mapping.findForward("tar");
			
			
			
		}
		
		
		
		
		
	
	}
	
	
	
	
	
}








































