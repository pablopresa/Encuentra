package web.picking;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import beans.Usuario;
import beans.encuentra.DataPicking;

import cliente_rest_Invoke.Call_WS_APIENCUENTRA;
import clientesVisual_Store.forus.clienteWSVisual.ClienteWSVisualForus;
import dataTypes.DataDescDescripcion;
import dataTypes.DataIDDescripcion;
import helper.PropertiesHelper;
import jsonObjects.SendMail;
import logica.EnviaMail;
import logica.ImpresionesPDF;
import logica.Logica;
import logica.Utilidades;
import main.EcommerceProcessOrders;



public class _EncuentraRemitirPicking extends Action 
{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
		String menError = "";
		try 
		{
			
			
			
			
			System.out.println("-");
			
			List<DataPicking> pickings = (List<DataPicking>) session.getAttribute("pickings"); 
			Usuario uLog = (Usuario) session.getAttribute("uLogeado");
			Utilidades util = new Utilidades();
			
			
			int idEmpresa = util.darEmpresa(uLog);
			if(idEmpresa==0)
			{
				return mapping.findForward("LOGIN");
			}
			
			
			String tipoMov = util.darParametroEmpresaSTR(idEmpresa, 9);
			int idDepoWEB = util.darParametroEmpresaINT(idEmpresa,5);
			int idDepoCentral = util.darParametroEmpresaINT(idEmpresa,4);
			
			if(idDepoWEB==-1 || idDepoCentral==-1)
			{
				request.setAttribute("menError", "Atencion, falta parametrizar depositos");
				return mapping.findForward("LOGIN");
			}
			
			boolean integracionActiva = false;
			integracionActiva = Logica.darIntegracionProductiva(2, idEmpresa);
			
			Hashtable<Integer, List<DataPicking>> picksDestino = new Hashtable<Integer, List<DataPicking>>();
			Hashtable<Integer, List<DataPicking>> picksEcommerce = new Hashtable<Integer, List<DataPicking>>();
			Hashtable<Long, List<DataPicking>> picksPedidoMayo = new Hashtable<Long, List<DataPicking>>();
			String ssId = session.getId();
			Hashtable<Long, Long>  pedidos = new Hashtable<Long, Long>();
			
			for (DataPicking p : pickings) 
			{
				if(p.isMayorista() && p.getDestino().getId()!=idDepoWEB)
				{
					pedidos.put(p.getIdPedido(),p.getIdPedido());
				}
			}
			Hashtable<Integer, String>  pedidosDestino = new Hashtable<Integer, String>();
			if(!pedidos.isEmpty())
			{
				pedidosDestino = null;
			}
			
			
			
			
			
			for (DataPicking p : pickings) 
			{
				if(!p.isMayorista() )
				{
					p.getDestino().setDescripcionB("");
					
					if(picksDestino.get(p.getDestino().getId())==null)
					{
						List<DataPicking> picks = new ArrayList<DataPicking>();
						picks.add(p);
						picksDestino.put(p.getDestino().getId(), picks);
					}
					else
					{
						List<DataPicking> picks = picksDestino.get(p.getDestino().getId());
						picks.add(p);
						picksDestino.put(p.getDestino().getId(), picks);
					}
				}
				else
				{
					if(p.getDestino().getId()==idDepoWEB){
						p.getDestino().setDescripcionB("");
						if(picksEcommerce.get(p.getSolicitud())==null)
						{
							List<DataPicking> picks = new ArrayList<DataPicking>();
							picks.add(p);
							picksEcommerce.put(p.getSolicitud(), picks);
						}
						else
						{
							List<DataPicking> picks = picksEcommerce.get(p.getSolicitud());
							picks.add(p);
							picksEcommerce.put(p.getSolicitud(), picks);
						}
					}
					else{
						try
						{
							String descripcionCliente = p.getDestino().getDescripcion();
							int destino = Integer.parseInt(pedidosDestino.get(p.getIdPedido()));
							String destinoSTR = pedidosDestino.get(p.getIdPedido());
							p.setDestino(new DataIDDescripcion(destino, destinoSTR));
							p.getDestino().setDescripcionB(descripcionCliente);
						}
						catch(Exception e)
						{
							p.setDestino(new DataIDDescripcion(99, "099"));
						}
						
						
						
						
						if(picksPedidoMayo.get(p.getIdPedido())==null)
						{
							List<DataPicking> picks = new ArrayList<DataPicking>();
							picks.add(p);
							picksPedidoMayo.put(p.getIdPedido(), picks);
						}
						else
						{
							List<DataPicking> picks = picksPedidoMayo.get(p.getIdPedido());
							picks.add(p);
							picksPedidoMayo.put(p.getIdPedido(), picks);
						}
					}
					
					
				}
				
			}
			
			System.out.println("llamando a WS VISUAL");
			
			List<List<DataPicking>> lista = new ArrayList<List<DataPicking>>(picksDestino.values());
			List<List<DataPicking>> listaEC = new ArrayList<List<DataPicking>>(picksEcommerce.values());
			List<List<DataPicking>> listaMayo = new ArrayList<List<DataPicking>>(picksPedidoMayo.values());
			List<DataPicking> noEncontrados = new ArrayList<DataPicking>();
			
			
			ClienteWSVisualForus ws = new ClienteWSVisualForus();
			List<DataIDDescripcion> list;
			List<DataIDDescripcion> remitoEC = new ArrayList<DataIDDescripcion>();
			List<String> ArtsSinAfectar;
			DataIDDescripcion data;
			
			if(!listaEC.isEmpty())
			{
				EcommerceProcessOrders pro = new EcommerceProcessOrders();
				list = null;
				ArtsSinAfectar = null;
				data = null;
				for (List<DataPicking> l : listaEC) 
				{
					list = new ArrayList<DataIDDescripcion>();
					ArtsSinAfectar = new ArrayList<String>();
					for (DataPicking p : l) 
						{
							if(p.getVerificada()-p.getRemitida()>0)
							{
								System.out.println("VERIFICANDO PEDIDOS WEB");
								pro.confirmarSKUForus(p.getArticulo(), p.getOrigen().getId(), p.getVerificada()-p.getRemitida(),p.getIdPedido(),idEmpresa,uLog.getNumero());
								data = new DataIDDescripcion(p.getVerificada()-p.getRemitida(),p.getArticulo());
								data.setIdB(idDepoWEB);
								data.setDescripcionB(p.getIdPedido()+"");
								list.add(data);
								remitoEC.add(data);
								
								Logica.encuentraBajaArticulosOjos(data.getId(),data.getDescripcion(), "1",idEmpresa);									//BAJAR DE LA ZONA DE PICKING
								Logica.encuentraMoverOjos(idDepoWEB+"P",data.getDescripcion(),data.getId(),uLog.getNumero(),idEmpresa);					//AGREGO ARTICULO A CLASIFICADOR ECOMMERCE
								Logica.IngresarMovimientoArticulo("1",idDepoWEB+"P", data.getDescripcion(), data.getId(), uLog.getNumero(),idEmpresa);	//REGISTRO EL MOVIMIENTO DE MERCADERIA 
							}
							else{
								ArtsSinAfectar.add(p.getArticulo());
							}
							
							
							if(p.getVerificada()<p.getSol())
							{
								
								noEncontrados.add(p);
								
							}
							else
							{
								//mandar mail
							}
							
						}
					try {
						int idEncuentra = 0;
						System.out.println("Enviando info a visual");
						if(integracionActiva)
						{
							if(list.size()>0){
								DataIDDescripcion respVisual = null;
								switch (tipoMov) {
								case "1":
									System.out.println("");
									System.out.println("");
									idEncuentra = Logica.RegistrarMovimientoStock(idDepoCentral, idDepoWEB, uLog.getNumero(), list, idEmpresa,l.get(0).getIdPicking());
									respVisual = ws.EntregaPrepararYTerminar(l.get(0).getSolicitud(), list,idDepoWEB);
									break;
								case "2":
									respVisual = ws.EntregaPreparar(l.get(0).getSolicitud(), list,idDepoWEB);
									break;
								case "3":
									ws.EntregaTerminar(l.get(0).getSolicitud(), list,idDepoWEB);
									break;

								default:
									break;
								}
								
								if(respVisual!=null){
									if(!respVisual.getDescripcion().equals("")){
										menError += "DOC "+l.get(0).getSolicitud()+" - "+respVisual.getDescripcion() + " <br/>";
										Logica.RegistrarDocMovimientoStock(0, idEncuentra, l.get(0).getSolicitud(), respVisual.getDescripcion(),
												idEmpresa,uLog.getNumero(),respVisual.getIdB());
									}
									else {
										Logica.RegistrarDocMovimientoStock(1, idEncuentra, l.get(0).getSolicitud(), respVisual.getDescripcion(),
												idEmpresa,uLog.getNumero(),respVisual.getIdB());
									}
									if(respVisual.getId()!=0){
										//MODIFICO NUMERO DE DOCUMENTO EN ARTICULOS QUE NO SE AFECTARON EN ESTA DISTRIBUCION
										Logica.updateDocVisual(l.get(0).getSolicitud(), ArtsSinAfectar, respVisual.getId(),idEmpresa);
										menError +="Se genero un nuevo documento ("+respVisual.getId()+") por la diferencia del documento "
										+l.get(0).getSolicitud()+" <br/>";
									}
									
								}
							}
						}
						
					} catch (Exception e) {
						System.out.println("*************************ERROR AL ENVIAR A VISUAL*************************");
					}
					
					
					//ws.EntregaPrepararYTerminar(l.get(0).getSolicitud(), list,idDepoWEB);
					System.out.println("REMITIENDO");
					Logica.encuentraUpdateRemirPickinEC(l,idEmpresa);
				}
			}
			
			if(!remitoEC.isEmpty()){
				ImpresionesPDF.imprimirTicketMovStock(idDepoCentral, idDepoWEB, uLog.getNick(), "Remito del picking "+pickings.get(0).getIdPicking(), 
						remitoEC, pickings.get(0).getIdPicking(),true, uLog.getIdEquipo(),idEmpresa);
			}
			
			List<DataIDDescripcion> movVerificarStockSAP = new ArrayList<DataIDDescripcion>();
			boolean productivoSAP = true;
			int origen = 0;
			
			
			 
			 String mailsD = util.darParametroEmpresaSTR(idEmpresa, 6);
			
			if(!noEncontrados.isEmpty())
			{
				EnviaMail em = new EnviaMail();
				String body1 = "<h2 style=\"text-align: center;\"><strong>Articulos <span style=\"color: #ff6600;\">no encontrados</span> en el picking</strong></h2> "+
							"	<table style=\"height: 36px; width: 100%; border-collapse: collapse; margin-left: auto; margin-right: auto;\" border=\"1\"> "+
							"	  <tbody> "+
							"	    <tr style=\"height: 18px; background-color: #a81865;\"> "+
							"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
							"	        <h3><strong><span style=\"color: #ffffff;\">Picking</span></strong></h3> "+
							"	      </td> "+
							"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
							"	        <h3><strong><span style=\"color: #ffffff;\">Usuario</span></strong></h3> "+
							"	      </td> "+
							"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
							"	        <h3><strong><span style=\"color: #ffffff;\">Articulo</span></strong></h3> "+
							"	      </td> "+
							"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
							"	        <h3><strong><span style=\"color: #ffffff;\">Cantidad</span></strong></h3> "+
							"	      </td> "+
							"	      <td style=\"width: 20%; text-align: center; height: 18px;\"> "+
							"	        <h3><strong><span style=\"color: #ffffff;\">Pedido</span></strong></h3> "+
							"	      </td> "+
							"	    </tr> ";
							
				String body2 = "";
				
				
				
				for (DataPicking n : noEncontrados) 
				{
					body2+=
				
							"	    <tr style=\"height: 18px; border-color: #000000; text-align: center;\"> "+
							"	      <td style=\"width: 20%; height: 18px;\">"+n.getIdPicking()+"</td> "+
							"	      <td style=\"width: 20%; height: 18px;\">"+n.getUsuario().getDescripcion()+"</td> "+
							"	      <td style=\"width: 20%; height: 18px;\">"+n.getArticulo()+"</td> "+
							"	      <td style=\"width: 20%; height: 18px;\">"+n.getSol()+"</td> "+
							"	      <td style=\"width: 20%; height: 18px;\">"+n.getIdPedido()+"</td> "+
							"	      </td> "+
							"	    </tr> ";
				}			
			
				String body3 = "	  </tbody> "+
							"	</table> "+
							"	<p>&nbsp;</p> "+
							"	<p>&nbsp;</p> "+
							"	<p>&nbsp;</p> "+
							"	<p>&nbsp;</p> "+
							"	<p style=\"text-align: center;\">Notificacion generada automaticamente por Encuentra</p>";
				
				List<String> mailDestinos = new ArrayList<String>();
				String[] arregloMails = mailsD.split(",");
				for (int i = 0; i < arregloMails.length; i++) 
				{
					mailDestinos.add(arregloMails[i]);
				}
				
				SendMail sm = new SendMail("P"+noEncontrados.get(0).getIdPicking(),mailsD,"Articulos no encontrados", body1+body2+body3,
						"encuentra@200.com.uy");
				Call_WS_APIENCUENTRA api = new Call_WS_APIENCUENTRA();
				List<SendMail> mails = new ArrayList<SendMail>();
				mails.add(sm);
				api.PutColaEnvioMails(mails);
				//em.enviarMailHTMLOD("encuentra@200.com.uy", mailDestinos, "Articulos no encontrados", body1+body2+body3);
			}
			
			
			
			if(!listaMayo.isEmpty())
			{
				//cliente.guardarMovStock(max200(listaMayo), true, usuario,1,1, ssId, productivoSAP);
			}
			
			
			
			List<DataDescDescripcion> logs = Logica.darLogClienteWSSAP(ssId);
			session.setAttribute("logsSAP", logs);
			
			session.setAttribute("mensajeVS", menError);
			return mapping.findForward("ok");
			
			

		}
		catch (Exception e) 
		{
			System.out.println("llegamos al catch");
			request.setAttribute("mensaje", menError);
			return mapping.findForward("ok");

		}

		
		
	}
	
	public static List<List<DataPicking>> max200(List<List<DataPicking>> in)
	{
		List<List<DataPicking>> out = new ArrayList<List<DataPicking>>();
		int largoMax = 199;
		
		for (List<DataPicking> list : in) 
		{
			if(list.size()>largoMax)
			{
				List<List<DataPicking>> outII = new ArrayList<List<DataPicking>>();
				int largo = list.size();
				int tope = largoMax;
				int desde = 0;
				while (tope<largo) 
				{
					outII.add(list.subList(desde, tope));
					desde +=largoMax;
					tope +=largoMax;
				}
				//agrega el resto
				outII.add(list.subList(desde, largo));
				
				for (List<DataPicking> list2 : outII) 
				{
					out.add(list2);
				}
				
			}
			else
			{
				out.add(list);
			}
		}
		
		return out;
	}
}















