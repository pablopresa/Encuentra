package web.tareas;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import logica.Logica;
import logica.Utilidades;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import dataTypes.ArticuloPedido;
import dataTypes.DataDescDescripcion;
import dataTypes.DataDistribucion;
import dataTypes.DataIDDescripcion;
import dataTypes.DataRecepcion;

import beans.ArticuloLineaReposicion;
import beans.OrdenAlmacen;
import beans.Usuario;
import beans.encuentra.DataLineaRepo;
import beans.encuentra.Tarea;



public class _EncuentraAltaTareaII extends Action 
{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
		try 
		{
			

			Usuario uLog = (Usuario) session.getAttribute("uLogeado");
			Utilidades util = new Utilidades();
			int idEmpresa = util.darEmpresa(uLog);
			if(idEmpresa==0)
			{
				return mapping.findForward("LOGIN");
			}
			
			List<Usuario> operariosSelect = darListaOperarios(request);
			if (operariosSelect.isEmpty())
		     {
				request.setAttribute("menError", "Seleccione almenos un usuario para la tarea");
		        System.out.println("Seleccione almenos un usuario para la tarea");
		        return mapping.findForward("no");
		      }		
			
			String singleTar = (String) session.getAttribute("singleTar");
			if(singleTar==null || singleTar.equals("1")) //es una sola tarea
			{
				Tarea tarea = (Tarea) session.getAttribute("tarea");
				tarea.setUsuarios(operariosSelect);
				if(tarea.getUsuarios().size()>1)
				{	
					tarea.setParcial(false);
				}
				else
				{
					tarea.setParcial(true);
				}
				
				
				
				
				/*********tarea sort**********/
				if(tarea.getTipo().getId()==5)
				{
					session.setAttribute("tarea", tarea);
					return mapping.findForward("sorter");
					
				}
				/*********tarea recepcion**********/
				else if(tarea.getTipo().getId()==2)
				{
					List<DataRecepcion>recepciones=Logica.getRecepciones(idEmpresa);
					session.setAttribute("tarea", tarea);
					session.setAttribute("recepciones", recepciones);
					return mapping.findForward("rec");
				}
				/*********tarea ??? 3 **********/
				else if(tarea.getTipo().getId()==3)
				{
					//da de alta
					
					if(!tarea.getUsuarios().isEmpty())
					{
						tarea.setIdDocumento(0);
						Logica.encuentraAltaTarea(tarea, false, uLog.getNumero(),idEmpresa);
					}
					else
					{
						request.setAttribute("menError", "Seleccione almenos un usuario para la tarea");
						System.out.println("Seleccione almenos un usuario para la tarea");
						return mapping.findForward("ok");
					}
					
				}
				/*********tarea almacen**********/
				else if(tarea.getTipo().getId()==106)
				{
					
					List<OrdenAlmacen> almacen = Logica.getOrdenesAlmacen(idEmpresa);
					session.setAttribute("tarea", tarea);
					session.setAttribute("almacen", almacen);
					return mapping.findForward("alm");
					
				}
				else if(tarea.getTipo().getId()==1)
				{
					List<ArticuloLineaReposicion> articulosIn = (List<ArticuloLineaReposicion>) session.getAttribute("articulosIn");
					tarea.setArticulosIn(articulosIn);
					
					
					if(tarea.getTipo().getId()==1 && session.getAttribute("dipick")!=null)
					{

						guardarTarea(tarea, uLog, idEmpresa,session, Logica);
						session.setAttribute("tarea", null);
						session.setAttribute("dipick", null);
						return mapping.findForward("ok");
					}
				}
				
				
			}
			else
			{
				List<Tarea> tareas = (List<Tarea>) session.getAttribute("tareas");
				session.setAttribute("tarea", null);
				session.setAttribute("dipick", null);
				for (Tarea tarea : tareas) 
				{
					tarea.setUsuarios(operariosSelect);
					if(tarea.getUsuarios().size()>1)
					{	
						tarea.setParcial(false);
					}
					else
					{
						tarea.setParcial(true);
					}
					guardarTarea(tarea, uLog, idEmpresa,session, Logica);
					
					
				}
				return mapping.findForward("ok");
			}
			
			
			
			
			
			
			
			
		
			
			

		} catch (Exception e) {
			System.out.println("llegamos al catch");
			e.printStackTrace();
			session.setAttribute("mensaje", e.getMessage());
			return mapping.findForward("ok");

		}

		
		return mapping.findForward("ok");
	}

	private int guardarTarea(Tarea tarea, Usuario uLog, int idEmpresa, HttpSession session, Logica log) 
	{
		
		int idMain = log.encuentraAltaTarea(tarea, false, uLog.getNumero(),idEmpresa );
		
		
		List<DataLineaRepo> articulosInDLR = new ArrayList<DataLineaRepo>();
		for (ArticuloLineaReposicion art : tarea.getArticulosIn()) 
		{
			DataLineaRepo li = new DataLineaRepo();
			li.setIdArticulo(art.getIdArticulo());
			li.setIdDepDestino(art.getDestino().getId());
			li.setIdDepOrigen(art.getOrigen().getId());
			li.setSolicitada(art.getCantidad());
			li.setPedido(art.getPedido());
			articulosInDLR.add(li);
		}
		
		//articulosInDLR = Logica.encuentraReservaDaArtRepos(articulosInDLR,null);
		log.encuentraUpdateEstadoArticulosPicking(articulosInDLR, tarea.getIdDocumento()+"", 3,null,idEmpresa);
		
		log.encuentraDistribuirCargaPicking(tarea,articulosInDLR,idEmpresa);
		
		System.out.println("");

		
		
		for (Usuario ut :tarea.getUsuarios()) 
		{
			
			uLog.registrarEventoHilo(session.getId(), "Asignando picking a "+ut.getNumero(), tarea.getIdDocumento(), 101);
		}
		
		return idMain;
		
	}

	private List<Usuario> darListaOperarios(HttpServletRequest request) 
	{
		HttpSession session = request.getSession();
		List<DataIDDescripcion> operarios = (List<DataIDDescripcion>) session.getAttribute("operarios");
		List<Usuario> operariosSelect = new ArrayList<Usuario>();
		for (DataIDDescripcion da: operarios) 
		{
			String on = request.getParameter(String.valueOf(da.getId()));
			if(on!=null &&  on.equals("on"))
			{
				Usuario u = new Usuario();
				u.setNumero(da.getId());
				u.setNick(da.getDescripcion());
				operariosSelect.add(u);
			}
		}
		
		 return operariosSelect;
	}
}
