package web.picking;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import logica.Logica;
import logica.Utilidades;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import beans.Usuario;
import beans.encuentra.DataArticulo;
import beans.encuentra.DataLineaListaTareasMob;
import beans.encuentra.DataLineaRepo;

public class _EncuentraPasaPaginaTarea extends Action 
{


	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception 
	{
		HttpSession session = request.getSession();
		Logica Logica = new Logica();
	
		
		
		 Usuario uLog = (Usuario) session.getAttribute("uLogeado");
			Utilidades util = new Utilidades();
			int idEmpresa = util.darEmpresa(uLog);
			if(idEmpresa==0)
			{
				return mapping.findForward("LOGIN");
			}
		
		int idDepoWEB = util.darParametroEmpresaINT(idEmpresa,5);
		boolean verific = util.darParametroEmpresaBool(idEmpresa,1);
		int idTarea = (Integer) session.getAttribute("idTarea");
		int idMain = (Integer) session.getAttribute("idMain");
		String nombreTarea = (String) session.getAttribute("nombreTarea");
		String art = request.getParameter("base");
		List <DataLineaRepo> lista = (List<DataLineaRepo>) session.getAttribute("repoArt");
		
		List <DataLineaRepo> noNcontrados = (List<DataLineaRepo>) session.getAttribute("noNcontrados");
		DataLineaRepo voy = (DataLineaRepo) session.getAttribute("voy");
		int cauntasVan = (Integer) session.getAttribute("cuantasVoy");
		int unidad = (Integer) session.getAttribute("unidad");
		int idPicking = (Integer) session.getAttribute("idPicking");
		String confirmar = request.getParameter("confirmarOjo");
		
		String noNco  = request.getParameter("noEncontrado");
		
		if(noNco==null){
			if(!confirmar.equals(voy.getCubi())){
				request.setAttribute("menError", "Tome la mercaderia de donde se indica");
				return mapping.findForward("ok");			
			}
		}
		
		
		session.setAttribute("ojoConfirmado", confirmar);
		
		
		//noEncontrado
		//cuantasVoy
		//unidad
		
		
		
		if(noNco==null)
		{
			//SUMO UNA UNIDAD
			boolean esValido = false;
			
			if(cauntasVan==0)
			{
				Logica.encuentraAltaEventoTarea(idTarea, 1, uLog.getNumero(),0,idEmpresa);
			}
			//cambiar control para que valide contra el que le pide y no contra la lista.   0
			DataArticulo articulo = Logica.encuentraCodArticulo(art,idEmpresa);
			
			if((articulo.getId()!=null) && articulo.getId().equals(voy.getIdArticulo()))
			{
				esValido = true;
			}
			else
			{
				esValido = false;
				uLog.registrarEvento(idPicking,0,107,0,true, session.getId(), " articulo incorrecto "+articulo.getId());
			}
			
			int porcentaje = 0;
			if(esValido)
			{
				
				int qty = 1;
				
				try
				{
					String cantidad =request.getParameter("qty");
					qty = Integer.parseInt(cantidad);
				}
				catch (Exception e) 
				{
					qty = 1;
				}
				
				for (int i = 0; i < qty; i++) 
				{
					unidad++;
					
					uLog.registrarEvento(idPicking, 1,107,0,true, session.getId(), " articulo pickeado "+articulo.getId());
					
					//bajo el articulo de la ubicacao
					
					Logica.encuentraUpdateOjosTienenArt(voy.getCubi(),articulo.getId(),idEmpresa);	//BAJO CANTIDAD FISICA DEL OJO Y LAS RESERVADAS;
					Logica.encuentraMoverOjos("1",articulo.getId(),1,uLog.getNumero(),idEmpresa);					//AGREGO ARTICULO A ZONA DE PICKING
					Logica.IngresarMovimientoArticulo(voy.getCubi(), "1", articulo.getId(), 1,  uLog.getNumero(),idEmpresa);	//REGISTRO EL MOVIMIENTO DE MERCADERIA A ZONA DE PICKING
					Logica.encuentraUpdateAvanceLineaTarea(idTarea,unidad,idMain,idEmpresa );		//AVANCE DE TAREA
					Logica.encuentraUpdateAvancePicking(idPicking,voy.getIdArticulo(),voy.getIdDepOrigen(),voy.getIdDepDestino(),verific,voy.getPedido(),voy.getDocumento(),idEmpresa,idDepoWEB);	//AVANCE DE LA REPO
				}
				
			
				
				
				
				//pregunto cuanto pide la linea
				if(voy.getSolicitada()==unidad)
				{
					
					
					cauntasVan++;
					porcentaje = 0;
					try
					{
						porcentaje = ((cauntasVan)*100) / (lista.size()-1);
					}
					catch
					(Exception e)
					{
						
					}
					 /* 	sumo cuantas van++*/
					 
					/*  pongo unidad en 0*/
					unidad=0;
					/*  agarro el nuevo voy con lista.get(cuantasVan)*/
					/*
					 *  
					 *  guardo el avance*/
					Logica.encuentraUpdateAvanceTarea(idTarea, porcentaje, cauntasVan,idEmpresa);
					Logica.encuentraAltaNoncontrados(idTarea, voy, 1,cauntasVan,idEmpresa);
					
					if((cauntasVan)!=lista.size())
					{
						Logica.encuentraUpdateAvanceLineaTarea(idTarea,unidad,idMain,idEmpresa );
						voy = lista.get(cauntasVan);
						 /*  seteo voy
						 *  seteo cuantasVan
						 *  Seteo unidad
						 *  chau
						 */
						if(!voy.getCubi().equals(confirmar)){
							session.setAttribute("ojoConfirmado", "");
						}
						session.setAttribute("voy", voy);
						session.setAttribute("cuantasVoy", cauntasVan);
						session.setAttribute("unidad",unidad);
						
						return mapping.findForward("ok");
						
					}
					else
					{
						
						Logica.encuentraUpdateLineasPicking(idPicking,idEmpresa);
						Logica.encuentraAltaEventoTarea(idTarea, 2, uLog.getNumero(),0,idEmpresa);
						List<DataLineaListaTareasMob> tarMob = Logica.encuentraDarTareasMob(uLog.getNumero(),idEmpresa);
						
						session.setAttribute("tarMob", tarMob);
						request.setAttribute("menError","Ha concretado correctamente la reposicion");
						
						
						if (noNcontrados == null)
						{
							uLog.registrarEventoHilo(session.getId(), "Tarea Finalizada", idPicking,101);
							return mapping.findForward("fin");
						
						}
						else
						{
							request.setAttribute("menError","Muestre la siguiente lista a su supervisor");
							uLog.registrarEventoHilo(session.getId(), "Tarea Finalizada con faltantes", idPicking,101);
							return mapping.findForward("noFin");
						}
					}
				}
				else
				{
					/*
					 * esto quiere decir que hay mas
					 * unidad ya está sumada
					 
					 *  seteo voy
					 *  seteo cuantasVan
					 *  Seteo unidad*/
					 session.setAttribute("voy", voy);
					 session.setAttribute("cuantasVoy", cauntasVan);
					 session.setAttribute("unidad",unidad);
					 return mapping.findForward("ok");
					 /*  chau
					 */
					
				}
				
				
			}
			else
			{
				//setea mensaje de error devolve NO
				uLog.registrarEvento(idPicking, 0,107,0,true, session.getId(), "El código del articulo no es valido");
				request.setAttribute("menError", "El código del articulo no es valido");
				return mapping.findForward("ok");
			}
		}
		else
		{
			/*********************************************no lo encontró**************************************************/
			uLog.registrarEvento(idPicking, 0,107,0,true, session.getId(), "No encontro el articulo "+voy.getIdArticulo());
			Logica.justificarNoEncontrado(idPicking,voy.getIdArticulo(),voy.getIdDepOrigen(),voy.getIdDepDestino(),voy.getPedido(),idEmpresa);
			/*
			 * si no encuentra le pasa la cantidad solicitada a la cantidad que resta.
			 * si sale o se pausa, cuando retome va a ir a la linea con el numero de la nueva cantidad solicitada, o sea 0 o 1
			 */
			if (noNcontrados == null)
			{
				noNcontrados = new ArrayList<DataLineaRepo>();
			}
			
			unidad++;
			
			Logica.encuentraUpdateAvanceLineaTarea(idTarea,unidad,idMain,idEmpresa );
			
			int unidadesRestan = voy.getSolicitada()-unidad;
			int unidadIba = unidad;
			
			DataLineaRepo iba = new DataLineaRepo();
			iba.setModulo(voy.getModulo());
			iba.setIdArticulo(voy.getIdArticulo());
			iba.setEstnte(voy.getEstnte());
			iba.setEstnteria(voy.getEstnteria());
			iba.setSolicitada(1);
			iba.setSotck(voy.getSotck());
			noNcontrados.add(iba);
			session.setAttribute("noNcontrados", noNcontrados);
			
			
			unidad=0;
			
			if(unidadesRestan<=0)
			{
				Logica.encuentraUpdateAvanceLineaTarea(idTarea,unidad,idMain,idEmpresa );
				if(lista.size()>cauntasVan)
				{
					if((cauntasVan+1)!=lista.size())
					{
						cauntasVan++;
						int porcentaje = ((cauntasVan)*100) / (lista.size()-1);
						Logica.encuentraUpdateAvanceTarea(idTarea, porcentaje, cauntasVan,idEmpresa);
						voy = lista.get(cauntasVan);
						session.setAttribute("voy", voy);
						if(!voy.getCubi().equals(confirmar)){
							session.setAttribute("ojoConfirmado", "");
						}
					}
					else
					{
						System.out.println("aca");
						Logica.encuentraUpdateLineasPicking(idPicking,idEmpresa);
						Logica.encuentraAltaEventoTarea(idTarea, 2, uLog.getNumero(),0,idEmpresa);
						List<DataLineaListaTareasMob> tarMob = Logica.encuentraDarTareasMob(uLog.getNumero(),idEmpresa);
						session.setAttribute("tarMob", tarMob);
						request.setAttribute("menError","Muestre la siguiente lista a su supervisor");
						uLog.registrarEventoHilo(session.getId(), "Tarea Finalizada con faltantes", idPicking,101);
						return mapping.findForward("noFin");
					}
					session.setAttribute("cuantasVoy", cauntasVan);
					session.setAttribute("unidad",unidad);
					return mapping.findForward("ok");
				}
				else
				{
					Logica.encuentraUpdateLineasPicking(idPicking,idEmpresa);
					Logica.encuentraAltaEventoTarea(idTarea, 2, uLog.getNumero(),0,idEmpresa);
					List<DataLineaListaTareasMob> tarMob = Logica.encuentraDarTareasMob(uLog.getNumero(),idEmpresa);
					session.setAttribute("tarMob", tarMob);
					request.setAttribute("menError","Muestre la siguiente lista a su supervisor");
					uLog.registrarEventoHilo(session.getId(), "Tarea Finalizada con faltantes", idPicking,101);
					return mapping.findForward("noFin");
				}
			}
			else
			{
				voy.setSolicitada(unidadesRestan);
				session.setAttribute("voy", voy);
				Logica.encuentraUpdateAvanceLineaTarea(idTarea,unidadIba,idMain,idEmpresa );
				session.setAttribute("cuantasVoy", cauntasVan);
				session.setAttribute("unidad",unidad);
				try
				{
					int porcentaje = ((cauntasVan)*100) / (lista.size()-1);
					Logica.encuentraUpdateAvanceTarea(idTarea, porcentaje, cauntasVan,idEmpresa);
				}
				catch (Exception e) 
				{
					// TODO: handle exception
				}
				
				return mapping.findForward("ok");
				
				
			}
		}
	}
}
