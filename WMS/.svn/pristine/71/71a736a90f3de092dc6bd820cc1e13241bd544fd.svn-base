package web.informes;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import beans.Usuario;
import beans.encuentra.DepositoAdmin;
import beans.reportes.Filtro;
import dataTypes.DataIDDescripcion;
import logica.Logica;
import logica.Utilidades;

public class DarFiltros extends Action 
{

	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception 
			{
				HttpSession session = request.getSession();
				Logica Logica = new Logica();
				Usuario uLog = (Usuario) session.getAttribute("uLogeado");
				Utilidades util = new Utilidades();
				int idEmpresa = util.darEmpresa(uLog);
				if(idEmpresa==0)
				{
					return mapping.findForward("LOGIN");
				}
				
				
				String reporte = request.getParameter("reporte");
				String nombreReporte = request.getParameter("nombre");
				session.setAttribute("reporteSel", reporte);
				session.setAttribute("nombreReporte", nombreReporte);
				List<Filtro> filtros = new ArrayList<Filtro>();
				
				session.setAttribute("lista", null);
				
				switch (reporte) 
				{
					case "movsXArt":
					{
						Filtro articulo = new Filtro("text", "articulo", "Indique Articulo", "",true, "Articulo");
						Filtro fechas = new Filtro("rango", "fechas", "", "",true, "Fechas");
						
						filtros.add(fechas);
						filtros.add(articulo);
						
						session.setAttribute("filtros", filtros);
						break;
					}
					
					case "inventXUbi":
					{
						Filtro articulo = new Filtro("text", "articulo", "Indique Articulo", "",false, "Articulo");
						
						Filtro estanteriasF = new Filtro("multi", "estanteria", "Seleccione Estanteria", "",false, "Estanterias");
						List<DataIDDescripcion> estanterias = Logica.darEstanterias(idEmpresa, Integer.parseInt(uLog.getDeposito()));
						estanteriasF.setValues(estanterias);
						
						List<DataIDDescripcion> marcas = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_marca WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro marcasF = new Filtro("multi", "marca", "Seleccione marcas", "",false, "Marcas");
						marcasF.setValues(marcas);
						
						
						List<DataIDDescripcion> generos = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_genero WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro generosF = new Filtro("multi", "genero", "Seleccione generos", "",false, "Generos");
						generosF.setValues(generos);
						
						List<DataIDDescripcion> categorias = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_categoria WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro categoriasF = new Filtro("multi", "categoria", "Seleccione categorias", "",false, "Categorias");
						categoriasF.setValues(categorias);
						
						List<DataIDDescripcion> clases = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_clase WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro clasesF = new Filtro("multi", "clases", "Seleccione clases", "",false, "Clases");
						clasesF.setValues(clases);
						
						Filtro agruparArt = new Filtro("switch", "agruparArt", "Seleccione clases", "",false, "Agrupar Articulos");
						agruparArt.setId("switch-0");
						
						filtros.add(articulo);
						filtros.add(estanteriasF);
						filtros.add(marcasF);
						filtros.add(generosF);
						filtros.add(categoriasF);
						filtros.add(clasesF);
						filtros.add(agruparArt);
						
						session.setAttribute("filtros", filtros);
						break;
					}
					case "inventDisponible":
					{
						Filtro articulo = new Filtro("text", "articulo", "Indique Articulo", "",false, "Articulo");
						
						List<DataIDDescripcion> estanterias = Logica.darEstanterias(idEmpresa, Integer.parseInt(uLog.getDeposito()));
						Filtro estanteriasF = new Filtro("multi", "estanteria", "Seleccione Estanteria", "",false, "Estanterias");
						estanteriasF.setValues(estanterias);
						
						String depoPrincipal = Logica.darParametroEmpresa(idEmpresa, 4);
						List<DataIDDescripcion> depositos = Logica.darListaDataIdDescripcionConsulMYSQL("select idDeposito,Nombre from depositos WHERE idEmpresa="+idEmpresa+" and idDeposito="+depoPrincipal+" AND idDeposito < 100000\r\n UNION ALL select idDeposito,Nombre from depositos WHERE idEmpresa="+idEmpresa+" and idDeposito!="+depoPrincipal+" AND idDeposito < 100000");
						Filtro depositosF = new Filtro("multi", "deposito", "Seleccione Deposito", "",false, "Depositos");
						depositosF.setValues(depositos);
						
						List<DataIDDescripcion> marcas = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_marca WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro marcasF = new Filtro("multi", "marca", "Seleccione marcas", "",false, "Marcas");
						marcasF.setValues(marcas);
						
						
						List<DataIDDescripcion> generos = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_genero WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro generosF = new Filtro("multi", "genero", "Seleccione generos", "",false, "Generos");
						generosF.setValues(generos);
						
						List<DataIDDescripcion> categorias = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_categoria WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro categoriasF = new Filtro("multi", "categoria", "Seleccione categorias", "",false, "Categorias");
						categoriasF.setValues(categorias);
						
						List<DataIDDescripcion> clases = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_clase WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro clasesF = new Filtro("multi", "clases", "Seleccione clases", "",false, "Clases");
						clasesF.setValues(clases);
						
						filtros.add(articulo);
						filtros.add(estanteriasF);
						filtros.add(depositosF);
						filtros.add(marcasF);
						filtros.add(generosF);
						filtros.add(categoriasF);
						filtros.add(clasesF);
						
						
						session.setAttribute("filtros", filtros);
						break;
					}
					case "recepMovsXArt":
					{
						Filtro articulo = new Filtro("text", "articulo", "Indique Articulo", "",false, "Articulo");
						
						Filtro proveedor = new Filtro("text", "proveedor", "Indique Proveedor", "",false, "Proveedor");
						
						Filtro folio = new Filtro("text", "folio", "Indique Folio", "",false, "Folio");
						
						List<DataIDDescripcion> marcas = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_marca WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro marcasF = new Filtro("multi", "marca", "Seleccione marcas", "",false, "Marcas");
						marcasF.setValues(marcas);
						
						List<DataIDDescripcion> clases = Logica.darListaDataIdDescripcionConsulMYSQL("SELECT id,Descripcion FROM art_clase WHERE idEmpresa="+idEmpresa+" ORDER BY descripcion");
						Filtro clasesF = new Filtro("multi", "clases", "Seleccione clases", "",false, "Clases");
						clasesF.setValues(clases);
						
						Filtro fechas = new Filtro("rango", "fechas", "", "",true, "Fechas");
						
						filtros.add(articulo);
						filtros.add(proveedor);
						filtros.add(folio);
						filtros.add(marcasF);
						filtros.add(clasesF);
						filtros.add(fechas);
						
						session.setAttribute("filtros", filtros);
						break;
					}
				default:
					break;
				}
				
				return mapping.findForward("ok");
			}
	

}
